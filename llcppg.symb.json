[{
		"mangle":	"UCNV_FROM_U_CALLBACK_STOP_76",
		"c++":	"UCNV_FROM_U_CALLBACK_STOP_76(const void *, UConverterFromUnicodeArgs *, const UChar *, int32_t, UChar32, UConverterCallbackReason, UErrorCode *)",
		"go":	"UCNVFROMUCALLBACKSTOP76"
	}, {
		"mangle":	"UCNV_TO_U_CALLBACK_STOP_76",
		"c++":	"UCNV_TO_U_CALLBACK_STOP_76(const void *, UConverterToUnicodeArgs *, const char *, int32_t, UConverterCallbackReason, UErrorCode *)",
		"go":	"UCNVTOUCALLBACKSTOP76"
	}, {
		"mangle":	"UTF8ToHtml",
		"c++":	"UTF8ToHtml(unsigned char *, int *, const unsigned char *, int *)",
		"go":	"UTF8ToHtml"
	}, {
		"mangle":	"UTF8Toisolat1",
		"c++":	"UTF8Toisolat1(unsigned char *, int *, const unsigned char *, int *)",
		"go":	"UTF8Toisolat1"
	}, {
		"mangle":	"__htmlDefaultSAXHandler",
		"c++":	"__htmlDefaultSAXHandler()",
		"go":	"X__HtmlDefaultSAXHandler"
	}, {
		"mangle":	"__oldXMLWDcompatibility",
		"c++":	"__oldXMLWDcompatibility()",
		"go":	"X__OldXMLWDcompatibility"
	}, {
		"mangle":	"__xmlBufferAllocScheme",
		"c++":	"__xmlBufferAllocScheme()",
		"go":	"X__XmlBufferAllocScheme"
	}, {
		"mangle":	"__xmlDefaultBufferSize",
		"c++":	"__xmlDefaultBufferSize()",
		"go":	"X__XmlDefaultBufferSize"
	}, {
		"mangle":	"__xmlDefaultSAXHandler",
		"c++":	"__xmlDefaultSAXHandler()",
		"go":	"X__XmlDefaultSAXHandler"
	}, {
		"mangle":	"__xmlDefaultSAXLocator",
		"c++":	"__xmlDefaultSAXLocator()",
		"go":	"X__XmlDefaultSAXLocator"
	}, {
		"mangle":	"__xmlDeregisterNodeDefaultValue",
		"c++":	"__xmlDeregisterNodeDefaultValue()",
		"go":	"X__XmlDeregisterNodeDefaultValue"
	}, {
		"mangle":	"__xmlDoValidityCheckingDefaultValue",
		"c++":	"__xmlDoValidityCheckingDefaultValue()",
		"go":	"X__XmlDoValidityCheckingDefaultValue"
	}, {
		"mangle":	"__xmlGenericError",
		"c++":	"__xmlGenericError()",
		"go":	"X__XmlGenericError"
	}, {
		"mangle":	"__xmlGenericErrorContext",
		"c++":	"__xmlGenericErrorContext()",
		"go":	"X__XmlGenericErrorContext"
	}, {
		"mangle":	"__xmlGetWarningsDefaultValue",
		"c++":	"__xmlGetWarningsDefaultValue()",
		"go":	"X__XmlGetWarningsDefaultValue"
	}, {
		"mangle":	"__xmlIndentTreeOutput",
		"c++":	"__xmlIndentTreeOutput()",
		"go":	"X__XmlIndentTreeOutput"
	}, {
		"mangle":	"__xmlKeepBlanksDefaultValue",
		"c++":	"__xmlKeepBlanksDefaultValue()",
		"go":	"X__XmlKeepBlanksDefaultValue"
	}, {
		"mangle":	"__xmlLastError",
		"c++":	"__xmlLastError()",
		"go":	"X__XmlLastError"
	}, {
		"mangle":	"__xmlLineNumbersDefaultValue",
		"c++":	"__xmlLineNumbersDefaultValue()",
		"go":	"X__XmlLineNumbersDefaultValue"
	}, {
		"mangle":	"__xmlLoadExtDtdDefaultValue",
		"c++":	"__xmlLoadExtDtdDefaultValue()",
		"go":	"X__XmlLoadExtDtdDefaultValue"
	}, {
		"mangle":	"__xmlOutputBufferCreateFilename",
		"c++":	"__xmlOutputBufferCreateFilename(const char *, xmlCharEncodingHandlerPtr, int)",
		"go":	"X__XmlOutputBufferCreateFilename"
	}, {
		"mangle":	"__xmlOutputBufferCreateFilenameValue",
		"c++":	"__xmlOutputBufferCreateFilenameValue()",
		"go":	"X__XmlOutputBufferCreateFilenameValue"
	}, {
		"mangle":	"__xmlParserDebugEntities",
		"c++":	"__xmlParserDebugEntities()",
		"go":	"X__XmlParserDebugEntities"
	}, {
		"mangle":	"__xmlParserInputBufferCreateFilename",
		"c++":	"__xmlParserInputBufferCreateFilename(const char *, xmlCharEncoding)",
		"go":	"X__XmlParserInputBufferCreateFilename"
	}, {
		"mangle":	"__xmlParserInputBufferCreateFilenameValue",
		"c++":	"__xmlParserInputBufferCreateFilenameValue()",
		"go":	"X__XmlParserInputBufferCreateFilenameValue"
	}, {
		"mangle":	"__xmlParserVersion",
		"c++":	"__xmlParserVersion()",
		"go":	"X__XmlParserVersion"
	}, {
		"mangle":	"__xmlPedanticParserDefaultValue",
		"c++":	"__xmlPedanticParserDefaultValue()",
		"go":	"X__XmlPedanticParserDefaultValue"
	}, {
		"mangle":	"__xmlRegisterNodeDefaultValue",
		"c++":	"__xmlRegisterNodeDefaultValue()",
		"go":	"X__XmlRegisterNodeDefaultValue"
	}, {
		"mangle":	"__xmlSaveNoEmptyTags",
		"c++":	"__xmlSaveNoEmptyTags()",
		"go":	"X__XmlSaveNoEmptyTags"
	}, {
		"mangle":	"__xmlStructuredError",
		"c++":	"__xmlStructuredError()",
		"go":	"X__XmlStructuredError"
	}, {
		"mangle":	"__xmlStructuredErrorContext",
		"c++":	"__xmlStructuredErrorContext()",
		"go":	"X__XmlStructuredErrorContext"
	}, {
		"mangle":	"__xmlSubstituteEntitiesDefaultValue",
		"c++":	"__xmlSubstituteEntitiesDefaultValue()",
		"go":	"X__XmlSubstituteEntitiesDefaultValue"
	}, {
		"mangle":	"__xmlTreeIndentString",
		"c++":	"__xmlTreeIndentString()",
		"go":	"X__XmlTreeIndentString"
	}, {
		"mangle":	"attribute",
		"c++":	"attribute(void *, const xmlChar *, const xmlChar *)",
		"go":	"Attribute"
	}, {
		"mangle":	"attributeDecl",
		"c++":	"attributeDecl(void *, const xmlChar *, const xmlChar *, int, int, const xmlChar *, xmlEnumerationPtr)",
		"go":	"AttributeDecl"
	}, {
		"mangle":	"cdataBlock",
		"c++":	"cdataBlock(void *, const xmlChar *, int)",
		"go":	"CdataBlock"
	}, {
		"mangle":	"characters",
		"c++":	"characters(void *, const xmlChar *, int)",
		"go":	"Characters"
	}, {
		"mangle":	"checkNamespace",
		"c++":	"checkNamespace(void *, xmlChar *)",
		"go":	"CheckNamespace"
	}, {
		"mangle":	"comment",
		"c++":	"comment(void *, const xmlChar *)",
		"go":	"Comment"
	}, {
		"mangle":	"elementDecl",
		"c++":	"elementDecl(void *, const xmlChar *, int, xmlElementContentPtr)",
		"go":	"ElementDecl"
	}, {
		"mangle":	"endDocument",
		"c++":	"endDocument(void *)",
		"go":	"EndDocument"
	}, {
		"mangle":	"endElement",
		"c++":	"endElement(void *, const xmlChar *)",
		"go":	"EndElement"
	}, {
		"mangle":	"entityDecl",
		"c++":	"entityDecl(void *, const xmlChar *, int, const xmlChar *, const xmlChar *, xmlChar *)",
		"go":	"EntityDecl"
	}, {
		"mangle":	"externalSubset",
		"c++":	"externalSubset(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"ExternalSubset"
	}, {
		"mangle":	"getColumnNumber",
		"c++":	"getColumnNumber(void *)",
		"go":	"GetColumnNumber"
	}, {
		"mangle":	"getEntity",
		"c++":	"getEntity(void *, const xmlChar *)",
		"go":	"GetEntity"
	}, {
		"mangle":	"getLineNumber",
		"c++":	"getLineNumber(void *)",
		"go":	"GetLineNumber"
	}, {
		"mangle":	"getNamespace",
		"c++":	"getNamespace(void *)",
		"go":	"GetNamespace"
	}, {
		"mangle":	"getParameterEntity",
		"c++":	"getParameterEntity(void *, const xmlChar *)",
		"go":	"GetParameterEntity"
	}, {
		"mangle":	"getPublicId",
		"c++":	"getPublicId(void *)",
		"go":	"GetPublicId"
	}, {
		"mangle":	"getSystemId",
		"c++":	"getSystemId(void *)",
		"go":	"GetSystemId"
	}, {
		"mangle":	"globalNamespace",
		"c++":	"globalNamespace(void *, const xmlChar *, const xmlChar *)",
		"go":	"GlobalNamespace"
	}, {
		"mangle":	"gzclose",
		"c++":	"gzclose(gzFile)",
		"go":	"Gzclose"
	}, {
		"mangle":	"gzdirect",
		"c++":	"gzdirect(gzFile)",
		"go":	"Gzdirect"
	}, {
		"mangle":	"gzdopen",
		"c++":	"gzdopen(int, const char *)",
		"go":	"Gzdopen"
	}, {
		"mangle":	"gzread",
		"c++":	"gzread(gzFile, voidp, unsigned int)",
		"go":	"Gzread"
	}, {
		"mangle":	"gzwrite",
		"c++":	"gzwrite(gzFile, voidpc, unsigned int)",
		"go":	"Gzwrite"
	}, {
		"mangle":	"hasExternalSubset",
		"c++":	"hasExternalSubset(void *)",
		"go":	"HasExternalSubset"
	}, {
		"mangle":	"hasInternalSubset",
		"c++":	"hasInternalSubset(void *)",
		"go":	"HasInternalSubset"
	}, {
		"mangle":	"htmlAttrAllowed",
		"c++":	"htmlAttrAllowed(const htmlElemDesc *, const xmlChar *, int)",
		"go":	"(*HtmlElemDesc).HtmlAttrAllowed"
	}, {
		"mangle":	"htmlAutoCloseTag",
		"c++":	"htmlAutoCloseTag(htmlDocPtr, const xmlChar *, htmlNodePtr)",
		"go":	"HtmlAutoCloseTag"
	}, {
		"mangle":	"htmlCreateFileParserCtxt",
		"c++":	"htmlCreateFileParserCtxt(const char *, const char *)",
		"go":	"HtmlCreateFileParserCtxt"
	}, {
		"mangle":	"htmlCreateMemoryParserCtxt",
		"c++":	"htmlCreateMemoryParserCtxt(const char *, int)",
		"go":	"HtmlCreateMemoryParserCtxt"
	}, {
		"mangle":	"htmlCreatePushParserCtxt",
		"c++":	"htmlCreatePushParserCtxt(htmlSAXHandlerPtr, void *, const char *, int, const char *, xmlCharEncoding)",
		"go":	"HtmlCreatePushParserCtxt"
	}, {
		"mangle":	"htmlCtxtParseDocument",
		"c++":	"htmlCtxtParseDocument(htmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"HtmlCtxtParseDocument"
	}, {
		"mangle":	"htmlCtxtReadDoc",
		"c++":	"htmlCtxtReadDoc(xmlParserCtxtPtr, const xmlChar *, const char *, const char *, int)",
		"go":	"HtmlCtxtReadDoc"
	}, {
		"mangle":	"htmlCtxtReadFd",
		"c++":	"htmlCtxtReadFd(xmlParserCtxtPtr, int, const char *, const char *, int)",
		"go":	"HtmlCtxtReadFd"
	}, {
		"mangle":	"htmlCtxtReadFile",
		"c++":	"htmlCtxtReadFile(xmlParserCtxtPtr, const char *, const char *, int)",
		"go":	"HtmlCtxtReadFile"
	}, {
		"mangle":	"htmlCtxtReadIO",
		"c++":	"htmlCtxtReadIO(xmlParserCtxtPtr, xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"HtmlCtxtReadIO"
	}, {
		"mangle":	"htmlCtxtReadMemory",
		"c++":	"htmlCtxtReadMemory(xmlParserCtxtPtr, const char *, int, const char *, const char *, int)",
		"go":	"HtmlCtxtReadMemory"
	}, {
		"mangle":	"htmlCtxtReset",
		"c++":	"htmlCtxtReset(htmlParserCtxtPtr)",
		"go":	"HtmlCtxtReset"
	}, {
		"mangle":	"htmlCtxtUseOptions",
		"c++":	"htmlCtxtUseOptions(htmlParserCtxtPtr, int)",
		"go":	"HtmlCtxtUseOptions"
	}, {
		"mangle":	"htmlDefaultSAXHandlerInit",
		"c++":	"htmlDefaultSAXHandlerInit()",
		"go":	"HtmlDefaultSAXHandlerInit"
	}, {
		"mangle":	"htmlDocContentDumpFormatOutput",
		"c++":	"htmlDocContentDumpFormatOutput(xmlOutputBufferPtr, xmlDocPtr, const char *, int)",
		"go":	"HtmlDocContentDumpFormatOutput"
	}, {
		"mangle":	"htmlDocContentDumpOutput",
		"c++":	"htmlDocContentDumpOutput(xmlOutputBufferPtr, xmlDocPtr, const char *)",
		"go":	"HtmlDocContentDumpOutput"
	}, {
		"mangle":	"htmlDocDump",
		"c++":	"htmlDocDump(FILE *, xmlDocPtr)",
		"go":	"HtmlDocDump"
	}, {
		"mangle":	"htmlDocDumpMemory",
		"c++":	"htmlDocDumpMemory(xmlDocPtr, xmlChar **, int *)",
		"go":	"HtmlDocDumpMemory"
	}, {
		"mangle":	"htmlDocDumpMemoryFormat",
		"c++":	"htmlDocDumpMemoryFormat(xmlDocPtr, xmlChar **, int *, int)",
		"go":	"HtmlDocDumpMemoryFormat"
	}, {
		"mangle":	"htmlElementAllowedHere",
		"c++":	"htmlElementAllowedHere(const htmlElemDesc *, const xmlChar *)",
		"go":	"(*HtmlElemDesc).HtmlElementAllowedHere"
	}, {
		"mangle":	"htmlElementStatusHere",
		"c++":	"htmlElementStatusHere(const htmlElemDesc *, const htmlElemDesc *)",
		"go":	"(*HtmlElemDesc).HtmlElementStatusHere"
	}, {
		"mangle":	"htmlEncodeEntities",
		"c++":	"htmlEncodeEntities(unsigned char *, int *, const unsigned char *, int *, int)",
		"go":	"HtmlEncodeEntities"
	}, {
		"mangle":	"htmlEntityLookup",
		"c++":	"htmlEntityLookup(const xmlChar *)",
		"go":	"(*XmlChar).HtmlEntityLookup"
	}, {
		"mangle":	"htmlEntityValueLookup",
		"c++":	"htmlEntityValueLookup(unsigned int)",
		"go":	"HtmlEntityValueLookup"
	}, {
		"mangle":	"htmlFreeParserCtxt",
		"c++":	"htmlFreeParserCtxt(htmlParserCtxtPtr)",
		"go":	"HtmlFreeParserCtxt"
	}, {
		"mangle":	"htmlGetMetaEncoding",
		"c++":	"htmlGetMetaEncoding(htmlDocPtr)",
		"go":	"HtmlGetMetaEncoding"
	}, {
		"mangle":	"htmlHandleOmittedElem",
		"c++":	"htmlHandleOmittedElem(int)",
		"go":	"HtmlHandleOmittedElem"
	}, {
		"mangle":	"htmlInitAutoClose",
		"c++":	"htmlInitAutoClose()",
		"go":	"HtmlInitAutoClose"
	}, {
		"mangle":	"htmlIsAutoClosed",
		"c++":	"htmlIsAutoClosed(htmlDocPtr, htmlNodePtr)",
		"go":	"HtmlIsAutoClosed"
	}, {
		"mangle":	"htmlIsBooleanAttr",
		"c++":	"htmlIsBooleanAttr(const xmlChar *)",
		"go":	"(*XmlChar).HtmlIsBooleanAttr"
	}, {
		"mangle":	"htmlIsScriptAttribute",
		"c++":	"htmlIsScriptAttribute(const xmlChar *)",
		"go":	"(*XmlChar).HtmlIsScriptAttribute"
	}, {
		"mangle":	"htmlNewDoc",
		"c++":	"htmlNewDoc(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).HtmlNewDoc"
	}, {
		"mangle":	"htmlNewDocNoDtD",
		"c++":	"htmlNewDocNoDtD(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).HtmlNewDocNoDtD"
	}, {
		"mangle":	"htmlNewParserCtxt",
		"c++":	"htmlNewParserCtxt()",
		"go":	"HtmlNewParserCtxt"
	}, {
		"mangle":	"htmlNewSAXParserCtxt",
		"c++":	"htmlNewSAXParserCtxt(const htmlSAXHandler *, void *)",
		"go":	"(*HtmlSAXHandler).HtmlNewSAXParserCtxt"
	}, {
		"mangle":	"htmlNodeDump",
		"c++":	"htmlNodeDump(xmlBufferPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"HtmlNodeDump"
	}, {
		"mangle":	"htmlNodeDumpFile",
		"c++":	"htmlNodeDumpFile(FILE *, xmlDocPtr, xmlNodePtr)",
		"go":	"HtmlNodeDumpFile"
	}, {
		"mangle":	"htmlNodeDumpFileFormat",
		"c++":	"htmlNodeDumpFileFormat(FILE *, xmlDocPtr, xmlNodePtr, const char *, int)",
		"go":	"HtmlNodeDumpFileFormat"
	}, {
		"mangle":	"htmlNodeDumpFormatOutput",
		"c++":	"htmlNodeDumpFormatOutput(xmlOutputBufferPtr, xmlDocPtr, xmlNodePtr, const char *, int)",
		"go":	"HtmlNodeDumpFormatOutput"
	}, {
		"mangle":	"htmlNodeDumpOutput",
		"c++":	"htmlNodeDumpOutput(xmlOutputBufferPtr, xmlDocPtr, xmlNodePtr, const char *)",
		"go":	"HtmlNodeDumpOutput"
	}, {
		"mangle":	"htmlNodeStatus",
		"c++":	"htmlNodeStatus(htmlNodePtr, int)",
		"go":	"HtmlNodeStatus"
	}, {
		"mangle":	"htmlParseCharRef",
		"c++":	"htmlParseCharRef(htmlParserCtxtPtr)",
		"go":	"HtmlParseCharRef"
	}, {
		"mangle":	"htmlParseChunk",
		"c++":	"htmlParseChunk(htmlParserCtxtPtr, const char *, int, int)",
		"go":	"HtmlParseChunk"
	}, {
		"mangle":	"htmlParseDoc",
		"c++":	"htmlParseDoc(const xmlChar *, const char *)",
		"go":	"(*XmlChar).HtmlParseDoc"
	}, {
		"mangle":	"htmlParseDocument",
		"c++":	"htmlParseDocument(htmlParserCtxtPtr)",
		"go":	"HtmlParseDocument"
	}, {
		"mangle":	"htmlParseElement",
		"c++":	"htmlParseElement(htmlParserCtxtPtr)",
		"go":	"HtmlParseElement"
	}, {
		"mangle":	"htmlParseEntityRef",
		"c++":	"htmlParseEntityRef(htmlParserCtxtPtr, const xmlChar **)",
		"go":	"HtmlParseEntityRef"
	}, {
		"mangle":	"htmlParseFile",
		"c++":	"htmlParseFile(const char *, const char *)",
		"go":	"HtmlParseFile"
	}, {
		"mangle":	"htmlReadDoc",
		"c++":	"htmlReadDoc(const xmlChar *, const char *, const char *, int)",
		"go":	"(*XmlChar).HtmlReadDoc"
	}, {
		"mangle":	"htmlReadFd",
		"c++":	"htmlReadFd(int, const char *, const char *, int)",
		"go":	"HtmlReadFd"
	}, {
		"mangle":	"htmlReadFile",
		"c++":	"htmlReadFile(const char *, const char *, int)",
		"go":	"HtmlReadFile"
	}, {
		"mangle":	"htmlReadIO",
		"c++":	"htmlReadIO(xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"HtmlReadIO"
	}, {
		"mangle":	"htmlReadMemory",
		"c++":	"htmlReadMemory(const char *, int, const char *, const char *, int)",
		"go":	"HtmlReadMemory"
	}, {
		"mangle":	"htmlSAXParseDoc",
		"c++":	"htmlSAXParseDoc(const xmlChar *, const char *, htmlSAXHandlerPtr, void *)",
		"go":	"(*XmlChar).HtmlSAXParseDoc"
	}, {
		"mangle":	"htmlSAXParseFile",
		"c++":	"htmlSAXParseFile(const char *, const char *, htmlSAXHandlerPtr, void *)",
		"go":	"HtmlSAXParseFile"
	}, {
		"mangle":	"htmlSaveFile",
		"c++":	"htmlSaveFile(const char *, xmlDocPtr)",
		"go":	"HtmlSaveFile"
	}, {
		"mangle":	"htmlSaveFileEnc",
		"c++":	"htmlSaveFileEnc(const char *, xmlDocPtr, const char *)",
		"go":	"HtmlSaveFileEnc"
	}, {
		"mangle":	"htmlSaveFileFormat",
		"c++":	"htmlSaveFileFormat(const char *, xmlDocPtr, const char *, int)",
		"go":	"HtmlSaveFileFormat"
	}, {
		"mangle":	"htmlSetMetaEncoding",
		"c++":	"htmlSetMetaEncoding(htmlDocPtr, const xmlChar *)",
		"go":	"HtmlSetMetaEncoding"
	}, {
		"mangle":	"htmlTagLookup",
		"c++":	"htmlTagLookup(const xmlChar *)",
		"go":	"(*XmlChar).HtmlTagLookup"
	}, {
		"mangle":	"ignorableWhitespace",
		"c++":	"ignorableWhitespace(void *, const xmlChar *, int)",
		"go":	"IgnorableWhitespace"
	}, {
		"mangle":	"inflate",
		"c++":	"inflate(z_streamp, int)",
		"go":	"Inflate"
	}, {
		"mangle":	"inflateEnd",
		"c++":	"inflateEnd(z_streamp)",
		"go":	"InflateEnd"
	}, {
		"mangle":	"inflateInit2_",
		"c++":	"inflateInit2_(z_streamp, int, const char *, int)",
		"go":	"InflateInit2"
	}, {
		"mangle":	"initGenericErrorDefaultFunc",
		"c++":	"initGenericErrorDefaultFunc(xmlGenericErrorFunc *)",
		"go":	"InitGenericErrorDefaultFunc"
	}, {
		"mangle":	"inithtmlDefaultSAXHandler",
		"c++":	"inithtmlDefaultSAXHandler(xmlSAXHandlerV1 *)",
		"go":	"(*XmlSAXHandlerV1).InithtmlDefaultSAXHandler"
	}, {
		"mangle":	"initxmlDefaultSAXHandler",
		"c++":	"initxmlDefaultSAXHandler(xmlSAXHandlerV1 *, int)",
		"go":	"(*XmlSAXHandlerV1).InitxmlDefaultSAXHandler"
	}, {
		"mangle":	"inputPop",
		"c++":	"inputPop(xmlParserCtxtPtr)",
		"go":	"InputPop"
	}, {
		"mangle":	"inputPush",
		"c++":	"inputPush(xmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"InputPush"
	}, {
		"mangle":	"internalSubset",
		"c++":	"internalSubset(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"InternalSubset"
	}, {
		"mangle":	"isStandalone",
		"c++":	"isStandalone(void *)",
		"go":	"IsStandalone"
	}, {
		"mangle":	"isolat1ToUTF8",
		"c++":	"isolat1ToUTF8(unsigned char *, int *, const unsigned char *, int *)",
		"go":	"Isolat1ToUTF8"
	}, {
		"mangle":	"namePop",
		"c++":	"namePop(xmlParserCtxtPtr)",
		"go":	"NamePop"
	}, {
		"mangle":	"namePush",
		"c++":	"namePush(xmlParserCtxtPtr, const xmlChar *)",
		"go":	"NamePush"
	}, {
		"mangle":	"namespaceDecl",
		"c++":	"namespaceDecl(void *, const xmlChar *, const xmlChar *)",
		"go":	"NamespaceDecl"
	}, {
		"mangle":	"nodePop",
		"c++":	"nodePop(xmlParserCtxtPtr)",
		"go":	"NodePop"
	}, {
		"mangle":	"nodePush",
		"c++":	"nodePush(xmlParserCtxtPtr, xmlNodePtr)",
		"go":	"NodePush"
	}, {
		"mangle":	"notationDecl",
		"c++":	"notationDecl(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"NotationDecl"
	}, {
		"mangle":	"processingInstruction",
		"c++":	"processingInstruction(void *, const xmlChar *, const xmlChar *)",
		"go":	"ProcessingInstruction"
	}, {
		"mangle":	"reference",
		"c++":	"reference(void *, const xmlChar *)",
		"go":	"Reference"
	}, {
		"mangle":	"resolveEntity",
		"c++":	"resolveEntity(void *, const xmlChar *, const xmlChar *)",
		"go":	"ResolveEntity"
	}, {
		"mangle":	"setDocumentLocator",
		"c++":	"setDocumentLocator(void *, xmlSAXLocatorPtr)",
		"go":	"SetDocumentLocator"
	}, {
		"mangle":	"setNamespace",
		"c++":	"setNamespace(void *, const xmlChar *)",
		"go":	"SetNamespace"
	}, {
		"mangle":	"startDocument",
		"c++":	"startDocument(void *)",
		"go":	"StartDocument"
	}, {
		"mangle":	"startElement",
		"c++":	"startElement(void *, const xmlChar *, const xmlChar **)",
		"go":	"StartElement"
	}, {
		"mangle":	"ucnv_close_76",
		"c++":	"ucnv_close_76(UConverter *)",
		"go":	"(*UConverter).UcnvClose76"
	}, {
		"mangle":	"ucnv_convertEx_76",
		"c++":	"ucnv_convertEx_76(UConverter *, UConverter *, char **, const char *, const char **, const char *, UChar *, UChar **, UChar **, const UChar *, UBool, UBool, UErrorCode *)",
		"go":	"(*UConverter).UcnvConvertEx76"
	}, {
		"mangle":	"ucnv_open_76",
		"c++":	"ucnv_open_76(const char *, UErrorCode *)",
		"go":	"UcnvOpen76"
	}, {
		"mangle":	"ucnv_setFromUCallBack_76",
		"c++":	"ucnv_setFromUCallBack_76(UConverter *, UConverterFromUCallback, const void *, UConverterFromUCallback *, const void **, UErrorCode *)",
		"go":	"(*UConverter).UcnvSetFromUCallBack76"
	}, {
		"mangle":	"ucnv_setToUCallBack_76",
		"c++":	"ucnv_setToUCallBack_76(UConverter *, UConverterToUCallback, const void *, UConverterToUCallback *, const void **, UErrorCode *)",
		"go":	"(*UConverter).UcnvSetToUCallBack76"
	}, {
		"mangle":	"unparsedEntityDecl",
		"c++":	"unparsedEntityDecl(void *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"UnparsedEntityDecl"
	}, {
		"mangle":	"valuePop",
		"c++":	"valuePop(xmlXPathParserContextPtr)",
		"go":	"ValuePop"
	}, {
		"mangle":	"valuePush",
		"c++":	"valuePush(xmlXPathParserContextPtr, xmlXPathObjectPtr)",
		"go":	"ValuePush"
	}, {
		"mangle":	"xlinkGetDefaultDetect",
		"c++":	"xlinkGetDefaultDetect()",
		"go":	"XlinkGetDefaultDetect"
	}, {
		"mangle":	"xlinkGetDefaultHandler",
		"c++":	"xlinkGetDefaultHandler()",
		"go":	"XlinkGetDefaultHandler"
	}, {
		"mangle":	"xlinkIsLink",
		"c++":	"xlinkIsLink(xmlDocPtr, xmlNodePtr)",
		"go":	"XlinkIsLink"
	}, {
		"mangle":	"xlinkSetDefaultDetect",
		"c++":	"xlinkSetDefaultDetect(xlinkNodeDetectFunc)",
		"go":	"XlinkSetDefaultDetect"
	}, {
		"mangle":	"xlinkSetDefaultHandler",
		"c++":	"xlinkSetDefaultHandler(xlinkHandlerPtr)",
		"go":	"XlinkSetDefaultHandler"
	}, {
		"mangle":	"xmlACatalogAdd",
		"c++":	"xmlACatalogAdd(xmlCatalogPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlACatalogAdd"
	}, {
		"mangle":	"xmlACatalogDump",
		"c++":	"xmlACatalogDump(xmlCatalogPtr, FILE *)",
		"go":	"XmlACatalogDump"
	}, {
		"mangle":	"xmlACatalogRemove",
		"c++":	"xmlACatalogRemove(xmlCatalogPtr, const xmlChar *)",
		"go":	"XmlACatalogRemove"
	}, {
		"mangle":	"xmlACatalogResolve",
		"c++":	"xmlACatalogResolve(xmlCatalogPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlACatalogResolve"
	}, {
		"mangle":	"xmlACatalogResolvePublic",
		"c++":	"xmlACatalogResolvePublic(xmlCatalogPtr, const xmlChar *)",
		"go":	"XmlACatalogResolvePublic"
	}, {
		"mangle":	"xmlACatalogResolveSystem",
		"c++":	"xmlACatalogResolveSystem(xmlCatalogPtr, const xmlChar *)",
		"go":	"XmlACatalogResolveSystem"
	}, {
		"mangle":	"xmlACatalogResolveURI",
		"c++":	"xmlACatalogResolveURI(xmlCatalogPtr, const xmlChar *)",
		"go":	"XmlACatalogResolveURI"
	}, {
		"mangle":	"xmlAddAttributeDecl",
		"c++":	"xmlAddAttributeDecl(xmlValidCtxtPtr, xmlDtdPtr, const xmlChar *, const xmlChar *, const xmlChar *, xmlAttributeType, xmlAttributeDefault, const xmlChar *, xmlEnumerationPtr)",
		"go":	"XmlAddAttributeDecl"
	}, {
		"mangle":	"xmlAddChild",
		"c++":	"xmlAddChild(xmlNodePtr, xmlNodePtr)",
		"go":	"XmlAddChild"
	}, {
		"mangle":	"xmlAddChildList",
		"c++":	"xmlAddChildList(xmlNodePtr, xmlNodePtr)",
		"go":	"XmlAddChildList"
	}, {
		"mangle":	"xmlAddDocEntity",
		"c++":	"xmlAddDocEntity(xmlDocPtr, const xmlChar *, int, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlAddDocEntity"
	}, {
		"mangle":	"xmlAddDtdEntity",
		"c++":	"xmlAddDtdEntity(xmlDocPtr, const xmlChar *, int, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlAddDtdEntity"
	}, {
		"mangle":	"xmlAddElementDecl",
		"c++":	"xmlAddElementDecl(xmlValidCtxtPtr, xmlDtdPtr, const xmlChar *, xmlElementTypeVal, xmlElementContentPtr)",
		"go":	"XmlAddElementDecl"
	}, {
		"mangle":	"xmlAddEncodingAlias",
		"c++":	"xmlAddEncodingAlias(const char *, const char *)",
		"go":	"XmlAddEncodingAlias"
	}, {
		"mangle":	"xmlAddEntity",
		"c++":	"xmlAddEntity(xmlDocPtr, int, const xmlChar *, int, const xmlChar *, const xmlChar *, const xmlChar *, xmlEntityPtr *)",
		"go":	"XmlAddEntity"
	}, {
		"mangle":	"xmlAddID",
		"c++":	"xmlAddID(xmlValidCtxtPtr, xmlDocPtr, const xmlChar *, xmlAttrPtr)",
		"go":	"XmlAddID"
	}, {
		"mangle":	"xmlAddIDSafe",
		"c++":	"xmlAddIDSafe(xmlAttrPtr, const xmlChar *)",
		"go":	"XmlAddIDSafe"
	}, {
		"mangle":	"xmlAddNextSibling",
		"c++":	"xmlAddNextSibling(xmlNodePtr, xmlNodePtr)",
		"go":	"XmlAddNextSibling"
	}, {
		"mangle":	"xmlAddNotationDecl",
		"c++":	"xmlAddNotationDecl(xmlValidCtxtPtr, xmlDtdPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlAddNotationDecl"
	}, {
		"mangle":	"xmlAddPrevSibling",
		"c++":	"xmlAddPrevSibling(xmlNodePtr, xmlNodePtr)",
		"go":	"XmlAddPrevSibling"
	}, {
		"mangle":	"xmlAddRef",
		"c++":	"xmlAddRef(xmlValidCtxtPtr, xmlDocPtr, const xmlChar *, xmlAttrPtr)",
		"go":	"XmlAddRef"
	}, {
		"mangle":	"xmlAddSibling",
		"c++":	"xmlAddSibling(xmlNodePtr, xmlNodePtr)",
		"go":	"XmlAddSibling"
	}, {
		"mangle":	"xmlAllocOutputBuffer",
		"c++":	"xmlAllocOutputBuffer(xmlCharEncodingHandlerPtr)",
		"go":	"XmlAllocOutputBuffer"
	}, {
		"mangle":	"xmlAllocParserInputBuffer",
		"c++":	"xmlAllocParserInputBuffer(xmlCharEncoding)",
		"go":	"XmlCharEncoding.XmlAllocParserInputBuffer"
	}, {
		"mangle":	"xmlAttrSerializeTxtContent",
		"c++":	"xmlAttrSerializeTxtContent(xmlBufferPtr, xmlDocPtr, xmlAttrPtr, const xmlChar *)",
		"go":	"XmlAttrSerializeTxtContent"
	}, {
		"mangle":	"xmlAutomataCompile",
		"c++":	"xmlAutomataCompile(xmlAutomataPtr)",
		"go":	"XmlAutomataCompile"
	}, {
		"mangle":	"xmlAutomataGetInitState",
		"c++":	"xmlAutomataGetInitState(xmlAutomataPtr)",
		"go":	"XmlAutomataGetInitState"
	}, {
		"mangle":	"xmlAutomataIsDeterminist",
		"c++":	"xmlAutomataIsDeterminist(xmlAutomataPtr)",
		"go":	"XmlAutomataIsDeterminist"
	}, {
		"mangle":	"xmlAutomataNewAllTrans",
		"c++":	"xmlAutomataNewAllTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)",
		"go":	"XmlAutomataNewAllTrans"
	}, {
		"mangle":	"xmlAutomataNewCountTrans",
		"c++":	"xmlAutomataNewCountTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, int, int, void *)",
		"go":	"XmlAutomataNewCountTrans"
	}, {
		"mangle":	"xmlAutomataNewCountTrans2",
		"c++":	"xmlAutomataNewCountTrans2(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, const xmlChar *, int, int, void *)",
		"go":	"XmlAutomataNewCountTrans2"
	}, {
		"mangle":	"xmlAutomataNewCountedTrans",
		"c++":	"xmlAutomataNewCountedTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)",
		"go":	"XmlAutomataNewCountedTrans"
	}, {
		"mangle":	"xmlAutomataNewCounter",
		"c++":	"xmlAutomataNewCounter(xmlAutomataPtr, int, int)",
		"go":	"XmlAutomataNewCounter"
	}, {
		"mangle":	"xmlAutomataNewCounterTrans",
		"c++":	"xmlAutomataNewCounterTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)",
		"go":	"XmlAutomataNewCounterTrans"
	}, {
		"mangle":	"xmlAutomataNewEpsilon",
		"c++":	"xmlAutomataNewEpsilon(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr)",
		"go":	"XmlAutomataNewEpsilon"
	}, {
		"mangle":	"xmlAutomataNewNegTrans",
		"c++":	"xmlAutomataNewNegTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"XmlAutomataNewNegTrans"
	}, {
		"mangle":	"xmlAutomataNewOnceTrans",
		"c++":	"xmlAutomataNewOnceTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, int, int, void *)",
		"go":	"XmlAutomataNewOnceTrans"
	}, {
		"mangle":	"xmlAutomataNewOnceTrans2",
		"c++":	"xmlAutomataNewOnceTrans2(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, const xmlChar *, int, int, void *)",
		"go":	"XmlAutomataNewOnceTrans2"
	}, {
		"mangle":	"xmlAutomataNewState",
		"c++":	"xmlAutomataNewState(xmlAutomataPtr)",
		"go":	"XmlAutomataNewState"
	}, {
		"mangle":	"xmlAutomataNewTransition",
		"c++":	"xmlAutomataNewTransition(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, void *)",
		"go":	"XmlAutomataNewTransition"
	}, {
		"mangle":	"xmlAutomataNewTransition2",
		"c++":	"xmlAutomataNewTransition2(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"XmlAutomataNewTransition2"
	}, {
		"mangle":	"xmlAutomataSetFinalState",
		"c++":	"xmlAutomataSetFinalState(xmlAutomataPtr, xmlAutomataStatePtr)",
		"go":	"XmlAutomataSetFinalState"
	}, {
		"mangle":	"xmlBoolToText",
		"c++":	"xmlBoolToText(int)",
		"go":	"XmlBoolToText"
	}, {
		"mangle":	"xmlBufContent",
		"c++":	"xmlBufContent(const xmlBuf *)",
		"go":	"(*XmlBuf).XmlBufContent"
	}, {
		"mangle":	"xmlBufEnd",
		"c++":	"xmlBufEnd(xmlBufPtr)",
		"go":	"XmlBufEnd"
	}, {
		"mangle":	"xmlBufGetNodeContent",
		"c++":	"xmlBufGetNodeContent(xmlBufPtr, const xmlNode *)",
		"go":	"XmlBufGetNodeContent"
	}, {
		"mangle":	"xmlBufNodeDump",
		"c++":	"xmlBufNodeDump(xmlBufPtr, xmlDocPtr, xmlNodePtr, int, int)",
		"go":	"XmlBufNodeDump"
	}, {
		"mangle":	"xmlBufShrink",
		"c++":	"xmlBufShrink(xmlBufPtr, size_t)",
		"go":	"XmlBufShrink"
	}, {
		"mangle":	"xmlBufUse",
		"c++":	"xmlBufUse(const xmlBufPtr)",
		"go":	"XmlBufUse"
	}, {
		"mangle":	"xmlBufferAdd",
		"c++":	"xmlBufferAdd(xmlBufferPtr, const xmlChar *, int)",
		"go":	"XmlBufferAdd"
	}, {
		"mangle":	"xmlBufferAddHead",
		"c++":	"xmlBufferAddHead(xmlBufferPtr, const xmlChar *, int)",
		"go":	"XmlBufferAddHead"
	}, {
		"mangle":	"xmlBufferCCat",
		"c++":	"xmlBufferCCat(xmlBufferPtr, const char *)",
		"go":	"XmlBufferCCat"
	}, {
		"mangle":	"xmlBufferCat",
		"c++":	"xmlBufferCat(xmlBufferPtr, const xmlChar *)",
		"go":	"XmlBufferCat"
	}, {
		"mangle":	"xmlBufferContent",
		"c++":	"xmlBufferContent(const xmlBuffer *)",
		"go":	"(*XmlBuffer).XmlBufferContent"
	}, {
		"mangle":	"xmlBufferCreate",
		"c++":	"xmlBufferCreate()",
		"go":	"XmlBufferCreate"
	}, {
		"mangle":	"xmlBufferCreateSize",
		"c++":	"xmlBufferCreateSize(size_t)",
		"go":	"XmlBufferCreateSize"
	}, {
		"mangle":	"xmlBufferCreateStatic",
		"c++":	"xmlBufferCreateStatic(void *, size_t)",
		"go":	"XmlBufferCreateStatic"
	}, {
		"mangle":	"xmlBufferDetach",
		"c++":	"xmlBufferDetach(xmlBufferPtr)",
		"go":	"XmlBufferDetach"
	}, {
		"mangle":	"xmlBufferDump",
		"c++":	"xmlBufferDump(FILE *, xmlBufferPtr)",
		"go":	"XmlBufferDump"
	}, {
		"mangle":	"xmlBufferEmpty",
		"c++":	"xmlBufferEmpty(xmlBufferPtr)",
		"go":	"XmlBufferEmpty"
	}, {
		"mangle":	"xmlBufferFree",
		"c++":	"xmlBufferFree(xmlBufferPtr)",
		"go":	"XmlBufferFree"
	}, {
		"mangle":	"xmlBufferGrow",
		"c++":	"xmlBufferGrow(xmlBufferPtr, unsigned int)",
		"go":	"XmlBufferGrow"
	}, {
		"mangle":	"xmlBufferLength",
		"c++":	"xmlBufferLength(const xmlBuffer *)",
		"go":	"(*XmlBuffer).XmlBufferLength"
	}, {
		"mangle":	"xmlBufferResize",
		"c++":	"xmlBufferResize(xmlBufferPtr, unsigned int)",
		"go":	"XmlBufferResize"
	}, {
		"mangle":	"xmlBufferSetAllocationScheme",
		"c++":	"xmlBufferSetAllocationScheme(xmlBufferPtr, xmlBufferAllocationScheme)",
		"go":	"XmlBufferSetAllocationScheme"
	}, {
		"mangle":	"xmlBufferShrink",
		"c++":	"xmlBufferShrink(xmlBufferPtr, unsigned int)",
		"go":	"XmlBufferShrink"
	}, {
		"mangle":	"xmlBufferWriteCHAR",
		"c++":	"xmlBufferWriteCHAR(xmlBufferPtr, const xmlChar *)",
		"go":	"XmlBufferWriteCHAR"
	}, {
		"mangle":	"xmlBufferWriteChar",
		"c++":	"xmlBufferWriteChar(xmlBufferPtr, const char *)",
		"go":	"XmlBufferWriteChar"
	}, {
		"mangle":	"xmlBufferWriteQuotedString",
		"c++":	"xmlBufferWriteQuotedString(xmlBufferPtr, const xmlChar *)",
		"go":	"XmlBufferWriteQuotedString"
	}, {
		"mangle":	"xmlBuildQName",
		"c++":	"xmlBuildQName(const xmlChar *, const xmlChar *, xmlChar *, int)",
		"go":	"(*XmlChar).XmlBuildQName"
	}, {
		"mangle":	"xmlBuildRelativeURI",
		"c++":	"xmlBuildRelativeURI(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlBuildRelativeURI"
	}, {
		"mangle":	"xmlBuildRelativeURISafe",
		"c++":	"xmlBuildRelativeURISafe(const xmlChar *, const xmlChar *, xmlChar **)",
		"go":	"(*XmlChar).XmlBuildRelativeURISafe"
	}, {
		"mangle":	"xmlBuildURI",
		"c++":	"xmlBuildURI(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlBuildURI"
	}, {
		"mangle":	"xmlBuildURISafe",
		"c++":	"xmlBuildURISafe(const xmlChar *, const xmlChar *, xmlChar **)",
		"go":	"(*XmlChar).XmlBuildURISafe"
	}, {
		"mangle":	"xmlByteConsumed",
		"c++":	"xmlByteConsumed(xmlParserCtxtPtr)",
		"go":	"XmlByteConsumed"
	}, {
		"mangle":	"xmlC14NDocDumpMemory",
		"c++":	"xmlC14NDocDumpMemory(xmlDocPtr, xmlNodeSetPtr, int, xmlChar **, int, xmlChar **)",
		"go":	"XmlC14NDocDumpMemory"
	}, {
		"mangle":	"xmlC14NDocSave",
		"c++":	"xmlC14NDocSave(xmlDocPtr, xmlNodeSetPtr, int, xmlChar **, int, const char *, int)",
		"go":	"XmlC14NDocSave"
	}, {
		"mangle":	"xmlC14NDocSaveTo",
		"c++":	"xmlC14NDocSaveTo(xmlDocPtr, xmlNodeSetPtr, int, xmlChar **, int, xmlOutputBufferPtr)",
		"go":	"XmlC14NDocSaveTo"
	}, {
		"mangle":	"xmlC14NExecute",
		"c++":	"xmlC14NExecute(xmlDocPtr, xmlC14NIsVisibleCallback, void *, int, xmlChar **, int, xmlOutputBufferPtr)",
		"go":	"XmlC14NExecute"
	}, {
		"mangle":	"xmlCanonicPath",
		"c++":	"xmlCanonicPath(const xmlChar *)",
		"go":	"(*XmlChar).XmlCanonicPath"
	}, {
		"mangle":	"xmlCatalogAdd",
		"c++":	"xmlCatalogAdd(const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlCatalogAdd"
	}, {
		"mangle":	"xmlCatalogAddLocal",
		"c++":	"xmlCatalogAddLocal(void *, const xmlChar *)",
		"go":	"XmlCatalogAddLocal"
	}, {
		"mangle":	"xmlCatalogCleanup",
		"c++":	"xmlCatalogCleanup()",
		"go":	"XmlCatalogCleanup"
	}, {
		"mangle":	"xmlCatalogConvert",
		"c++":	"xmlCatalogConvert()",
		"go":	"XmlCatalogConvert"
	}, {
		"mangle":	"xmlCatalogDump",
		"c++":	"xmlCatalogDump(FILE *)",
		"go":	"XmlCatalogDump"
	}, {
		"mangle":	"xmlCatalogFreeLocal",
		"c++":	"xmlCatalogFreeLocal(void *)",
		"go":	"XmlCatalogFreeLocal"
	}, {
		"mangle":	"xmlCatalogGetDefaults",
		"c++":	"xmlCatalogGetDefaults()",
		"go":	"XmlCatalogGetDefaults"
	}, {
		"mangle":	"xmlCatalogGetPublic",
		"c++":	"xmlCatalogGetPublic(const xmlChar *)",
		"go":	"(*XmlChar).XmlCatalogGetPublic"
	}, {
		"mangle":	"xmlCatalogGetSystem",
		"c++":	"xmlCatalogGetSystem(const xmlChar *)",
		"go":	"(*XmlChar).XmlCatalogGetSystem"
	}, {
		"mangle":	"xmlCatalogIsEmpty",
		"c++":	"xmlCatalogIsEmpty(xmlCatalogPtr)",
		"go":	"XmlCatalogIsEmpty"
	}, {
		"mangle":	"xmlCatalogLocalResolve",
		"c++":	"xmlCatalogLocalResolve(void *, const xmlChar *, const xmlChar *)",
		"go":	"XmlCatalogLocalResolve"
	}, {
		"mangle":	"xmlCatalogLocalResolveURI",
		"c++":	"xmlCatalogLocalResolveURI(void *, const xmlChar *)",
		"go":	"XmlCatalogLocalResolveURI"
	}, {
		"mangle":	"xmlCatalogRemove",
		"c++":	"xmlCatalogRemove(const xmlChar *)",
		"go":	"(*XmlChar).XmlCatalogRemove"
	}, {
		"mangle":	"xmlCatalogResolve",
		"c++":	"xmlCatalogResolve(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlCatalogResolve"
	}, {
		"mangle":	"xmlCatalogResolvePublic",
		"c++":	"xmlCatalogResolvePublic(const xmlChar *)",
		"go":	"(*XmlChar).XmlCatalogResolvePublic"
	}, {
		"mangle":	"xmlCatalogResolveSystem",
		"c++":	"xmlCatalogResolveSystem(const xmlChar *)",
		"go":	"(*XmlChar).XmlCatalogResolveSystem"
	}, {
		"mangle":	"xmlCatalogResolveURI",
		"c++":	"xmlCatalogResolveURI(const xmlChar *)",
		"go":	"(*XmlChar).XmlCatalogResolveURI"
	}, {
		"mangle":	"xmlCatalogSetDebug",
		"c++":	"xmlCatalogSetDebug(int)",
		"go":	"XmlCatalogSetDebug"
	}, {
		"mangle":	"xmlCatalogSetDefaultPrefer",
		"c++":	"xmlCatalogSetDefaultPrefer(xmlCatalogPrefer)",
		"go":	"XmlCatalogPrefer.XmlCatalogSetDefaultPrefer"
	}, {
		"mangle":	"xmlCatalogSetDefaults",
		"c++":	"xmlCatalogSetDefaults(xmlCatalogAllow)",
		"go":	"XmlCatalogAllow.XmlCatalogSetDefaults"
	}, {
		"mangle":	"xmlCharEncCloseFunc",
		"c++":	"xmlCharEncCloseFunc(xmlCharEncodingHandler *)",
		"go":	"(*XmlCharEncodingHandler).XmlCharEncCloseFunc"
	}, {
		"mangle":	"xmlCharEncFirstLine",
		"c++":	"xmlCharEncFirstLine(xmlCharEncodingHandler *, struct _xmlBuffer *, struct _xmlBuffer *)",
		"go":	"(*XmlCharEncodingHandler).XmlCharEncFirstLine"
	}, {
		"mangle":	"xmlCharEncInFunc",
		"c++":	"xmlCharEncInFunc(xmlCharEncodingHandler *, struct _xmlBuffer *, struct _xmlBuffer *)",
		"go":	"(*XmlCharEncodingHandler).XmlCharEncInFunc"
	}, {
		"mangle":	"xmlCharEncOutFunc",
		"c++":	"xmlCharEncOutFunc(xmlCharEncodingHandler *, struct _xmlBuffer *, struct _xmlBuffer *)",
		"go":	"(*XmlCharEncodingHandler).XmlCharEncOutFunc"
	}, {
		"mangle":	"xmlCharInRange",
		"c++":	"xmlCharInRange(unsigned int, const xmlChRangeGroup *)",
		"go":	"XmlCharInRange"
	}, {
		"mangle":	"xmlCharStrdup",
		"c++":	"xmlCharStrdup(const char *)",
		"go":	"XmlCharStrdup"
	}, {
		"mangle":	"xmlCharStrndup",
		"c++":	"xmlCharStrndup(const char *, int)",
		"go":	"XmlCharStrndup"
	}, {
		"mangle":	"xmlCheckFilename",
		"c++":	"xmlCheckFilename(const char *)",
		"go":	"XmlCheckFilename"
	}, {
		"mangle":	"xmlCheckHTTPInput",
		"c++":	"xmlCheckHTTPInput(xmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"XmlCheckHTTPInput"
	}, {
		"mangle":	"xmlCheckLanguageID",
		"c++":	"xmlCheckLanguageID(const xmlChar *)",
		"go":	"(*XmlChar).XmlCheckLanguageID"
	}, {
		"mangle":	"xmlCheckThreadLocalStorage",
		"c++":	"xmlCheckThreadLocalStorage()",
		"go":	"XmlCheckThreadLocalStorage"
	}, {
		"mangle":	"xmlCheckUTF8",
		"c++":	"xmlCheckUTF8(const unsigned char *)",
		"go":	"XmlCheckUTF8"
	}, {
		"mangle":	"xmlCheckVersion",
		"c++":	"xmlCheckVersion(int)",
		"go":	"XmlCheckVersion"
	}, {
		"mangle":	"xmlChildElementCount",
		"c++":	"xmlChildElementCount(xmlNodePtr)",
		"go":	"XmlChildElementCount"
	}, {
		"mangle":	"xmlCleanupCharEncodingHandlers",
		"c++":	"xmlCleanupCharEncodingHandlers()",
		"go":	"XmlCleanupCharEncodingHandlers"
	}, {
		"mangle":	"xmlCleanupEncodingAliases",
		"c++":	"xmlCleanupEncodingAliases()",
		"go":	"XmlCleanupEncodingAliases"
	}, {
		"mangle":	"xmlCleanupGlobals",
		"c++":	"xmlCleanupGlobals()",
		"go":	"XmlCleanupGlobals"
	}, {
		"mangle":	"xmlCleanupInputCallbacks",
		"c++":	"xmlCleanupInputCallbacks()",
		"go":	"XmlCleanupInputCallbacks"
	}, {
		"mangle":	"xmlCleanupMemory",
		"c++":	"xmlCleanupMemory()",
		"go":	"XmlCleanupMemory"
	}, {
		"mangle":	"xmlCleanupOutputCallbacks",
		"c++":	"xmlCleanupOutputCallbacks()",
		"go":	"XmlCleanupOutputCallbacks"
	}, {
		"mangle":	"xmlCleanupParser",
		"c++":	"xmlCleanupParser()",
		"go":	"XmlCleanupParser"
	}, {
		"mangle":	"xmlCleanupPredefinedEntities",
		"c++":	"xmlCleanupPredefinedEntities()",
		"go":	"XmlCleanupPredefinedEntities"
	}, {
		"mangle":	"xmlCleanupThreads",
		"c++":	"xmlCleanupThreads()",
		"go":	"XmlCleanupThreads"
	}, {
		"mangle":	"xmlClearNodeInfoSeq",
		"c++":	"xmlClearNodeInfoSeq(xmlParserNodeInfoSeqPtr)",
		"go":	"XmlClearNodeInfoSeq"
	}, {
		"mangle":	"xmlClearParserCtxt",
		"c++":	"xmlClearParserCtxt(xmlParserCtxtPtr)",
		"go":	"XmlClearParserCtxt"
	}, {
		"mangle":	"xmlConvertSGMLCatalog",
		"c++":	"xmlConvertSGMLCatalog(xmlCatalogPtr)",
		"go":	"XmlConvertSGMLCatalog"
	}, {
		"mangle":	"xmlCopyAttributeTable",
		"c++":	"xmlCopyAttributeTable(xmlAttributeTablePtr)",
		"go":	"XmlCopyAttributeTable"
	}, {
		"mangle":	"xmlCopyChar",
		"c++":	"xmlCopyChar(int, xmlChar *, int)",
		"go":	"XmlCopyChar"
	}, {
		"mangle":	"xmlCopyCharMultiByte",
		"c++":	"xmlCopyCharMultiByte(xmlChar *, int)",
		"go":	"(*XmlChar).XmlCopyCharMultiByte"
	}, {
		"mangle":	"xmlCopyDoc",
		"c++":	"xmlCopyDoc(xmlDocPtr, int)",
		"go":	"XmlCopyDoc"
	}, {
		"mangle":	"xmlCopyDocElementContent",
		"c++":	"xmlCopyDocElementContent(xmlDocPtr, xmlElementContentPtr)",
		"go":	"XmlCopyDocElementContent"
	}, {
		"mangle":	"xmlCopyDtd",
		"c++":	"xmlCopyDtd(xmlDtdPtr)",
		"go":	"XmlCopyDtd"
	}, {
		"mangle":	"xmlCopyElementContent",
		"c++":	"xmlCopyElementContent(xmlElementContentPtr)",
		"go":	"XmlCopyElementContent"
	}, {
		"mangle":	"xmlCopyElementTable",
		"c++":	"xmlCopyElementTable(xmlElementTablePtr)",
		"go":	"XmlCopyElementTable"
	}, {
		"mangle":	"xmlCopyEntitiesTable",
		"c++":	"xmlCopyEntitiesTable(xmlEntitiesTablePtr)",
		"go":	"XmlCopyEntitiesTable"
	}, {
		"mangle":	"xmlCopyEnumeration",
		"c++":	"xmlCopyEnumeration(xmlEnumerationPtr)",
		"go":	"XmlCopyEnumeration"
	}, {
		"mangle":	"xmlCopyError",
		"c++":	"xmlCopyError(const xmlError *, xmlErrorPtr)",
		"go":	"(*XmlError).XmlCopyError"
	}, {
		"mangle":	"xmlCopyNamespace",
		"c++":	"xmlCopyNamespace(xmlNsPtr)",
		"go":	"XmlCopyNamespace"
	}, {
		"mangle":	"xmlCopyNamespaceList",
		"c++":	"xmlCopyNamespaceList(xmlNsPtr)",
		"go":	"XmlCopyNamespaceList"
	}, {
		"mangle":	"xmlCopyNode",
		"c++":	"xmlCopyNode(xmlNodePtr, int)",
		"go":	"XmlCopyNode"
	}, {
		"mangle":	"xmlCopyNodeList",
		"c++":	"xmlCopyNodeList(xmlNodePtr)",
		"go":	"XmlCopyNodeList"
	}, {
		"mangle":	"xmlCopyNotationTable",
		"c++":	"xmlCopyNotationTable(xmlNotationTablePtr)",
		"go":	"XmlCopyNotationTable"
	}, {
		"mangle":	"xmlCopyProp",
		"c++":	"xmlCopyProp(xmlNodePtr, xmlAttrPtr)",
		"go":	"XmlCopyProp"
	}, {
		"mangle":	"xmlCopyPropList",
		"c++":	"xmlCopyPropList(xmlNodePtr, xmlAttrPtr)",
		"go":	"XmlCopyPropList"
	}, {
		"mangle":	"xmlCreateDocParserCtxt",
		"c++":	"xmlCreateDocParserCtxt(const xmlChar *)",
		"go":	"(*XmlChar).XmlCreateDocParserCtxt"
	}, {
		"mangle":	"xmlCreateEntitiesTable",
		"c++":	"xmlCreateEntitiesTable()",
		"go":	"XmlCreateEntitiesTable"
	}, {
		"mangle":	"xmlCreateEntityParserCtxt",
		"c++":	"xmlCreateEntityParserCtxt(const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlCreateEntityParserCtxt"
	}, {
		"mangle":	"xmlCreateEnumeration",
		"c++":	"xmlCreateEnumeration(const xmlChar *)",
		"go":	"(*XmlChar).XmlCreateEnumeration"
	}, {
		"mangle":	"xmlCreateFileParserCtxt",
		"c++":	"xmlCreateFileParserCtxt(const char *)",
		"go":	"XmlCreateFileParserCtxt"
	}, {
		"mangle":	"xmlCreateIOParserCtxt",
		"c++":	"xmlCreateIOParserCtxt(xmlSAXHandlerPtr, void *, xmlInputReadCallback, xmlInputCloseCallback, void *, xmlCharEncoding)",
		"go":	"XmlCreateIOParserCtxt"
	}, {
		"mangle":	"xmlCreateIntSubset",
		"c++":	"xmlCreateIntSubset(xmlDocPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlCreateIntSubset"
	}, {
		"mangle":	"xmlCreateMemoryParserCtxt",
		"c++":	"xmlCreateMemoryParserCtxt(const char *, int)",
		"go":	"XmlCreateMemoryParserCtxt"
	}, {
		"mangle":	"xmlCreatePushParserCtxt",
		"c++":	"xmlCreatePushParserCtxt(xmlSAXHandlerPtr, void *, const char *, int, const char *)",
		"go":	"XmlCreatePushParserCtxt"
	}, {
		"mangle":	"xmlCreateURI",
		"c++":	"xmlCreateURI()",
		"go":	"XmlCreateURI"
	}, {
		"mangle":	"xmlCreateURLParserCtxt",
		"c++":	"xmlCreateURLParserCtxt(const char *, int)",
		"go":	"XmlCreateURLParserCtxt"
	}, {
		"mangle":	"xmlCtxtErrMemory",
		"c++":	"xmlCtxtErrMemory(xmlParserCtxtPtr)",
		"go":	"XmlCtxtErrMemory"
	}, {
		"mangle":	"xmlCtxtGetLastError",
		"c++":	"xmlCtxtGetLastError(void *)",
		"go":	"XmlCtxtGetLastError"
	}, {
		"mangle":	"xmlCtxtParseDocument",
		"c++":	"xmlCtxtParseDocument(xmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"XmlCtxtParseDocument"
	}, {
		"mangle":	"xmlCtxtReadDoc",
		"c++":	"xmlCtxtReadDoc(xmlParserCtxtPtr, const xmlChar *, const char *, const char *, int)",
		"go":	"XmlCtxtReadDoc"
	}, {
		"mangle":	"xmlCtxtReadFd",
		"c++":	"xmlCtxtReadFd(xmlParserCtxtPtr, int, const char *, const char *, int)",
		"go":	"XmlCtxtReadFd"
	}, {
		"mangle":	"xmlCtxtReadFile",
		"c++":	"xmlCtxtReadFile(xmlParserCtxtPtr, const char *, const char *, int)",
		"go":	"XmlCtxtReadFile"
	}, {
		"mangle":	"xmlCtxtReadIO",
		"c++":	"xmlCtxtReadIO(xmlParserCtxtPtr, xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"XmlCtxtReadIO"
	}, {
		"mangle":	"xmlCtxtReadMemory",
		"c++":	"xmlCtxtReadMemory(xmlParserCtxtPtr, const char *, int, const char *, const char *, int)",
		"go":	"XmlCtxtReadMemory"
	}, {
		"mangle":	"xmlCtxtReset",
		"c++":	"xmlCtxtReset(xmlParserCtxtPtr)",
		"go":	"XmlCtxtReset"
	}, {
		"mangle":	"xmlCtxtResetLastError",
		"c++":	"xmlCtxtResetLastError(void *)",
		"go":	"XmlCtxtResetLastError"
	}, {
		"mangle":	"xmlCtxtResetPush",
		"c++":	"xmlCtxtResetPush(xmlParserCtxtPtr, const char *, int, const char *, const char *)",
		"go":	"XmlCtxtResetPush"
	}, {
		"mangle":	"xmlCtxtSetErrorHandler",
		"c++":	"xmlCtxtSetErrorHandler(xmlParserCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlCtxtSetErrorHandler"
	}, {
		"mangle":	"xmlCtxtSetMaxAmplification",
		"c++":	"xmlCtxtSetMaxAmplification(xmlParserCtxtPtr, unsigned int)",
		"go":	"XmlCtxtSetMaxAmplification"
	}, {
		"mangle":	"xmlCtxtSetOptions",
		"c++":	"xmlCtxtSetOptions(xmlParserCtxtPtr, int)",
		"go":	"XmlCtxtSetOptions"
	}, {
		"mangle":	"xmlCtxtUseOptions",
		"c++":	"xmlCtxtUseOptions(xmlParserCtxtPtr, int)",
		"go":	"XmlCtxtUseOptions"
	}, {
		"mangle":	"xmlCurrentChar",
		"c++":	"xmlCurrentChar(xmlParserCtxtPtr, int *)",
		"go":	"XmlCurrentChar"
	}, {
		"mangle":	"xmlDOMWrapAdoptNode",
		"c++":	"xmlDOMWrapAdoptNode(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, xmlDocPtr, xmlNodePtr, int)",
		"go":	"XmlDOMWrapAdoptNode"
	}, {
		"mangle":	"xmlDOMWrapCloneNode",
		"c++":	"xmlDOMWrapCloneNode(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, xmlNodePtr *, xmlDocPtr, xmlNodePtr, int, int)",
		"go":	"XmlDOMWrapCloneNode"
	}, {
		"mangle":	"xmlDOMWrapFreeCtxt",
		"c++":	"xmlDOMWrapFreeCtxt(xmlDOMWrapCtxtPtr)",
		"go":	"XmlDOMWrapFreeCtxt"
	}, {
		"mangle":	"xmlDOMWrapNewCtxt",
		"c++":	"xmlDOMWrapNewCtxt()",
		"go":	"XmlDOMWrapNewCtxt"
	}, {
		"mangle":	"xmlDOMWrapReconcileNamespaces",
		"c++":	"xmlDOMWrapReconcileNamespaces(xmlDOMWrapCtxtPtr, xmlNodePtr, int)",
		"go":	"XmlDOMWrapReconcileNamespaces"
	}, {
		"mangle":	"xmlDOMWrapRemoveNode",
		"c++":	"xmlDOMWrapRemoveNode(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, int)",
		"go":	"XmlDOMWrapRemoveNode"
	}, {
		"mangle":	"xmlDebugCheckDocument",
		"c++":	"xmlDebugCheckDocument(FILE *, xmlDocPtr)",
		"go":	"XmlDebugCheckDocument"
	}, {
		"mangle":	"xmlDebugDumpAttr",
		"c++":	"xmlDebugDumpAttr(FILE *, xmlAttrPtr, int)",
		"go":	"XmlDebugDumpAttr"
	}, {
		"mangle":	"xmlDebugDumpAttrList",
		"c++":	"xmlDebugDumpAttrList(FILE *, xmlAttrPtr, int)",
		"go":	"XmlDebugDumpAttrList"
	}, {
		"mangle":	"xmlDebugDumpDTD",
		"c++":	"xmlDebugDumpDTD(FILE *, xmlDtdPtr)",
		"go":	"XmlDebugDumpDTD"
	}, {
		"mangle":	"xmlDebugDumpDocument",
		"c++":	"xmlDebugDumpDocument(FILE *, xmlDocPtr)",
		"go":	"XmlDebugDumpDocument"
	}, {
		"mangle":	"xmlDebugDumpDocumentHead",
		"c++":	"xmlDebugDumpDocumentHead(FILE *, xmlDocPtr)",
		"go":	"XmlDebugDumpDocumentHead"
	}, {
		"mangle":	"xmlDebugDumpEntities",
		"c++":	"xmlDebugDumpEntities(FILE *, xmlDocPtr)",
		"go":	"XmlDebugDumpEntities"
	}, {
		"mangle":	"xmlDebugDumpNode",
		"c++":	"xmlDebugDumpNode(FILE *, xmlNodePtr, int)",
		"go":	"XmlDebugDumpNode"
	}, {
		"mangle":	"xmlDebugDumpNodeList",
		"c++":	"xmlDebugDumpNodeList(FILE *, xmlNodePtr, int)",
		"go":	"XmlDebugDumpNodeList"
	}, {
		"mangle":	"xmlDebugDumpOneNode",
		"c++":	"xmlDebugDumpOneNode(FILE *, xmlNodePtr, int)",
		"go":	"XmlDebugDumpOneNode"
	}, {
		"mangle":	"xmlDebugDumpString",
		"c++":	"xmlDebugDumpString(FILE *, const xmlChar *)",
		"go":	"XmlDebugDumpString"
	}, {
		"mangle":	"xmlDecodeEntities",
		"c++":	"xmlDecodeEntities(xmlParserCtxtPtr, int, int, xmlChar, xmlChar, xmlChar)",
		"go":	"XmlDecodeEntities"
	}, {
		"mangle":	"xmlDefaultSAXHandlerInit",
		"c++":	"xmlDefaultSAXHandlerInit()",
		"go":	"XmlDefaultSAXHandlerInit"
	}, {
		"mangle":	"xmlDelEncodingAlias",
		"c++":	"xmlDelEncodingAlias(const char *)",
		"go":	"XmlDelEncodingAlias"
	}, {
		"mangle":	"xmlDeregisterNodeDefault",
		"c++":	"xmlDeregisterNodeDefault(xmlDeregisterNodeFunc)",
		"go":	"XmlDeregisterNodeDefault"
	}, {
		"mangle":	"xmlDetectCharEncoding",
		"c++":	"xmlDetectCharEncoding(const unsigned char *, int)",
		"go":	"XmlDetectCharEncoding"
	}, {
		"mangle":	"xmlDictCleanup",
		"c++":	"xmlDictCleanup()",
		"go":	"XmlDictCleanup"
	}, {
		"mangle":	"xmlDictCreate",
		"c++":	"xmlDictCreate()",
		"go":	"XmlDictCreate"
	}, {
		"mangle":	"xmlDictCreateSub",
		"c++":	"xmlDictCreateSub(xmlDictPtr)",
		"go":	"XmlDictCreateSub"
	}, {
		"mangle":	"xmlDictExists",
		"c++":	"xmlDictExists(xmlDictPtr, const xmlChar *, int)",
		"go":	"XmlDictExists"
	}, {
		"mangle":	"xmlDictFree",
		"c++":	"xmlDictFree(xmlDictPtr)",
		"go":	"XmlDictFree"
	}, {
		"mangle":	"xmlDictGetUsage",
		"c++":	"xmlDictGetUsage(xmlDictPtr)",
		"go":	"XmlDictGetUsage"
	}, {
		"mangle":	"xmlDictLookup",
		"c++":	"xmlDictLookup(xmlDictPtr, const xmlChar *, int)",
		"go":	"XmlDictLookup"
	}, {
		"mangle":	"xmlDictOwns",
		"c++":	"xmlDictOwns(xmlDictPtr, const xmlChar *)",
		"go":	"XmlDictOwns"
	}, {
		"mangle":	"xmlDictQLookup",
		"c++":	"xmlDictQLookup(xmlDictPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlDictQLookup"
	}, {
		"mangle":	"xmlDictReference",
		"c++":	"xmlDictReference(xmlDictPtr)",
		"go":	"XmlDictReference"
	}, {
		"mangle":	"xmlDictSetLimit",
		"c++":	"xmlDictSetLimit(xmlDictPtr, size_t)",
		"go":	"XmlDictSetLimit"
	}, {
		"mangle":	"xmlDictSize",
		"c++":	"xmlDictSize(xmlDictPtr)",
		"go":	"XmlDictSize"
	}, {
		"mangle":	"xmlDocCopyNode",
		"c++":	"xmlDocCopyNode(xmlNodePtr, xmlDocPtr, int)",
		"go":	"XmlDocCopyNode"
	}, {
		"mangle":	"xmlDocCopyNodeList",
		"c++":	"xmlDocCopyNodeList(xmlDocPtr, xmlNodePtr)",
		"go":	"XmlDocCopyNodeList"
	}, {
		"mangle":	"xmlDocDump",
		"c++":	"xmlDocDump(FILE *, xmlDocPtr)",
		"go":	"XmlDocDump"
	}, {
		"mangle":	"xmlDocDumpFormatMemory",
		"c++":	"xmlDocDumpFormatMemory(xmlDocPtr, xmlChar **, int *, int)",
		"go":	"XmlDocDumpFormatMemory"
	}, {
		"mangle":	"xmlDocDumpFormatMemoryEnc",
		"c++":	"xmlDocDumpFormatMemoryEnc(xmlDocPtr, xmlChar **, int *, const char *, int)",
		"go":	"XmlDocDumpFormatMemoryEnc"
	}, {
		"mangle":	"xmlDocDumpMemory",
		"c++":	"xmlDocDumpMemory(xmlDocPtr, xmlChar **, int *)",
		"go":	"XmlDocDumpMemory"
	}, {
		"mangle":	"xmlDocDumpMemoryEnc",
		"c++":	"xmlDocDumpMemoryEnc(xmlDocPtr, xmlChar **, int *, const char *)",
		"go":	"XmlDocDumpMemoryEnc"
	}, {
		"mangle":	"xmlDocFormatDump",
		"c++":	"xmlDocFormatDump(FILE *, xmlDocPtr, int)",
		"go":	"XmlDocFormatDump"
	}, {
		"mangle":	"xmlDocGetRootElement",
		"c++":	"xmlDocGetRootElement(const xmlDoc *)",
		"go":	"(*XmlDoc).XmlDocGetRootElement"
	}, {
		"mangle":	"xmlDocSetRootElement",
		"c++":	"xmlDocSetRootElement(xmlDocPtr, xmlNodePtr)",
		"go":	"XmlDocSetRootElement"
	}, {
		"mangle":	"xmlDumpAttributeDecl",
		"c++":	"xmlDumpAttributeDecl(xmlBufferPtr, xmlAttributePtr)",
		"go":	"XmlDumpAttributeDecl"
	}, {
		"mangle":	"xmlDumpAttributeTable",
		"c++":	"xmlDumpAttributeTable(xmlBufferPtr, xmlAttributeTablePtr)",
		"go":	"XmlDumpAttributeTable"
	}, {
		"mangle":	"xmlDumpElementDecl",
		"c++":	"xmlDumpElementDecl(xmlBufferPtr, xmlElementPtr)",
		"go":	"XmlDumpElementDecl"
	}, {
		"mangle":	"xmlDumpElementTable",
		"c++":	"xmlDumpElementTable(xmlBufferPtr, xmlElementTablePtr)",
		"go":	"XmlDumpElementTable"
	}, {
		"mangle":	"xmlDumpEntitiesTable",
		"c++":	"xmlDumpEntitiesTable(xmlBufferPtr, xmlEntitiesTablePtr)",
		"go":	"XmlDumpEntitiesTable"
	}, {
		"mangle":	"xmlDumpEntityDecl",
		"c++":	"xmlDumpEntityDecl(xmlBufferPtr, xmlEntityPtr)",
		"go":	"XmlDumpEntityDecl"
	}, {
		"mangle":	"xmlDumpNotationDecl",
		"c++":	"xmlDumpNotationDecl(xmlBufferPtr, xmlNotationPtr)",
		"go":	"XmlDumpNotationDecl"
	}, {
		"mangle":	"xmlDumpNotationTable",
		"c++":	"xmlDumpNotationTable(xmlBufferPtr, xmlNotationTablePtr)",
		"go":	"XmlDumpNotationTable"
	}, {
		"mangle":	"xmlElemDump",
		"c++":	"xmlElemDump(FILE *, xmlDocPtr, xmlNodePtr)",
		"go":	"XmlElemDump"
	}, {
		"mangle":	"xmlEncodeEntities",
		"c++":	"xmlEncodeEntities(xmlDocPtr, const xmlChar *)",
		"go":	"XmlEncodeEntities"
	}, {
		"mangle":	"xmlEncodeEntitiesReentrant",
		"c++":	"xmlEncodeEntitiesReentrant(xmlDocPtr, const xmlChar *)",
		"go":	"XmlEncodeEntitiesReentrant"
	}, {
		"mangle":	"xmlEncodeSpecialChars",
		"c++":	"xmlEncodeSpecialChars(const xmlDoc *, const xmlChar *)",
		"go":	"(*XmlDoc).XmlEncodeSpecialChars"
	}, {
		"mangle":	"xmlFileClose",
		"c++":	"xmlFileClose(void *)",
		"go":	"XmlFileClose"
	}, {
		"mangle":	"xmlFileMatch",
		"c++":	"xmlFileMatch(const char *)",
		"go":	"XmlFileMatch"
	}, {
		"mangle":	"xmlFileOpen",
		"c++":	"xmlFileOpen(const char *)",
		"go":	"XmlFileOpen"
	}, {
		"mangle":	"xmlFileRead",
		"c++":	"xmlFileRead(void *, char *, int)",
		"go":	"XmlFileRead"
	}, {
		"mangle":	"xmlFindCharEncodingHandler",
		"c++":	"xmlFindCharEncodingHandler(const char *)",
		"go":	"XmlFindCharEncodingHandler"
	}, {
		"mangle":	"xmlFirstElementChild",
		"c++":	"xmlFirstElementChild(xmlNodePtr)",
		"go":	"XmlFirstElementChild"
	}, {
		"mangle":	"xmlFormatError",
		"c++":	"xmlFormatError(const xmlError *, xmlGenericErrorFunc, void *)",
		"go":	"(*XmlError).XmlFormatError"
	}, {
		"mangle":	"xmlFreeAttributeTable",
		"c++":	"xmlFreeAttributeTable(xmlAttributeTablePtr)",
		"go":	"XmlFreeAttributeTable"
	}, {
		"mangle":	"xmlFreeAutomata",
		"c++":	"xmlFreeAutomata(xmlAutomataPtr)",
		"go":	"XmlFreeAutomata"
	}, {
		"mangle":	"xmlFreeCatalog",
		"c++":	"xmlFreeCatalog(xmlCatalogPtr)",
		"go":	"XmlFreeCatalog"
	}, {
		"mangle":	"xmlFreeDoc",
		"c++":	"xmlFreeDoc(xmlDocPtr)",
		"go":	"XmlFreeDoc"
	}, {
		"mangle":	"xmlFreeDocElementContent",
		"c++":	"xmlFreeDocElementContent(xmlDocPtr, xmlElementContentPtr)",
		"go":	"XmlFreeDocElementContent"
	}, {
		"mangle":	"xmlFreeDtd",
		"c++":	"xmlFreeDtd(xmlDtdPtr)",
		"go":	"XmlFreeDtd"
	}, {
		"mangle":	"xmlFreeElementContent",
		"c++":	"xmlFreeElementContent(xmlElementContentPtr)",
		"go":	"XmlFreeElementContent"
	}, {
		"mangle":	"xmlFreeElementTable",
		"c++":	"xmlFreeElementTable(xmlElementTablePtr)",
		"go":	"XmlFreeElementTable"
	}, {
		"mangle":	"xmlFreeEntitiesTable",
		"c++":	"xmlFreeEntitiesTable(xmlEntitiesTablePtr)",
		"go":	"XmlFreeEntitiesTable"
	}, {
		"mangle":	"xmlFreeEntity",
		"c++":	"xmlFreeEntity(xmlEntityPtr)",
		"go":	"XmlFreeEntity"
	}, {
		"mangle":	"xmlFreeEnumeration",
		"c++":	"xmlFreeEnumeration(xmlEnumerationPtr)",
		"go":	"XmlFreeEnumeration"
	}, {
		"mangle":	"xmlFreeIDTable",
		"c++":	"xmlFreeIDTable(xmlIDTablePtr)",
		"go":	"XmlFreeIDTable"
	}, {
		"mangle":	"xmlFreeInputStream",
		"c++":	"xmlFreeInputStream(xmlParserInputPtr)",
		"go":	"XmlFreeInputStream"
	}, {
		"mangle":	"xmlFreeMutex",
		"c++":	"xmlFreeMutex(xmlMutexPtr)",
		"go":	"XmlFreeMutex"
	}, {
		"mangle":	"xmlFreeNode",
		"c++":	"xmlFreeNode(xmlNodePtr)",
		"go":	"XmlFreeNode"
	}, {
		"mangle":	"xmlFreeNodeList",
		"c++":	"xmlFreeNodeList(xmlNodePtr)",
		"go":	"XmlFreeNodeList"
	}, {
		"mangle":	"xmlFreeNotationTable",
		"c++":	"xmlFreeNotationTable(xmlNotationTablePtr)",
		"go":	"XmlFreeNotationTable"
	}, {
		"mangle":	"xmlFreeNs",
		"c++":	"xmlFreeNs(xmlNsPtr)",
		"go":	"XmlFreeNs"
	}, {
		"mangle":	"xmlFreeNsList",
		"c++":	"xmlFreeNsList(xmlNsPtr)",
		"go":	"XmlFreeNsList"
	}, {
		"mangle":	"xmlFreeParserCtxt",
		"c++":	"xmlFreeParserCtxt(xmlParserCtxtPtr)",
		"go":	"XmlFreeParserCtxt"
	}, {
		"mangle":	"xmlFreeParserInputBuffer",
		"c++":	"xmlFreeParserInputBuffer(xmlParserInputBufferPtr)",
		"go":	"XmlFreeParserInputBuffer"
	}, {
		"mangle":	"xmlFreePattern",
		"c++":	"xmlFreePattern(xmlPatternPtr)",
		"go":	"XmlFreePattern"
	}, {
		"mangle":	"xmlFreePatternList",
		"c++":	"xmlFreePatternList(xmlPatternPtr)",
		"go":	"XmlFreePatternList"
	}, {
		"mangle":	"xmlFreeProp",
		"c++":	"xmlFreeProp(xmlAttrPtr)",
		"go":	"XmlFreeProp"
	}, {
		"mangle":	"xmlFreePropList",
		"c++":	"xmlFreePropList(xmlAttrPtr)",
		"go":	"XmlFreePropList"
	}, {
		"mangle":	"xmlFreeRMutex",
		"c++":	"xmlFreeRMutex(xmlRMutexPtr)",
		"go":	"XmlFreeRMutex"
	}, {
		"mangle":	"xmlFreeRefTable",
		"c++":	"xmlFreeRefTable(xmlRefTablePtr)",
		"go":	"XmlFreeRefTable"
	}, {
		"mangle":	"xmlFreeStreamCtxt",
		"c++":	"xmlFreeStreamCtxt(xmlStreamCtxtPtr)",
		"go":	"XmlFreeStreamCtxt"
	}, {
		"mangle":	"xmlFreeTextReader",
		"c++":	"xmlFreeTextReader(xmlTextReaderPtr)",
		"go":	"XmlFreeTextReader"
	}, {
		"mangle":	"xmlFreeTextWriter",
		"c++":	"xmlFreeTextWriter(xmlTextWriterPtr)",
		"go":	"XmlFreeTextWriter"
	}, {
		"mangle":	"xmlFreeURI",
		"c++":	"xmlFreeURI(xmlURIPtr)",
		"go":	"XmlFreeURI"
	}, {
		"mangle":	"xmlFreeValidCtxt",
		"c++":	"xmlFreeValidCtxt(xmlValidCtxtPtr)",
		"go":	"XmlFreeValidCtxt"
	}, {
		"mangle":	"xmlGcMemGet",
		"c++":	"xmlGcMemGet(xmlFreeFunc *, xmlMallocFunc *, xmlMallocFunc *, xmlReallocFunc *, xmlStrdupFunc *)",
		"go":	"XmlGcMemGet"
	}, {
		"mangle":	"xmlGcMemSetup",
		"c++":	"xmlGcMemSetup(xmlFreeFunc, xmlMallocFunc, xmlMallocFunc, xmlReallocFunc, xmlStrdupFunc)",
		"go":	"XmlGcMemSetup"
	}, {
		"mangle":	"xmlGetBufferAllocationScheme",
		"c++":	"xmlGetBufferAllocationScheme()",
		"go":	"XmlGetBufferAllocationScheme"
	}, {
		"mangle":	"xmlGetCharEncodingHandler",
		"c++":	"xmlGetCharEncodingHandler(xmlCharEncoding)",
		"go":	"XmlCharEncoding.XmlGetCharEncodingHandler"
	}, {
		"mangle":	"xmlGetCharEncodingName",
		"c++":	"xmlGetCharEncodingName(xmlCharEncoding)",
		"go":	"XmlCharEncoding.XmlGetCharEncodingName"
	}, {
		"mangle":	"xmlGetCompressMode",
		"c++":	"xmlGetCompressMode()",
		"go":	"XmlGetCompressMode"
	}, {
		"mangle":	"xmlGetDocCompressMode",
		"c++":	"xmlGetDocCompressMode(const xmlDoc *)",
		"go":	"(*XmlDoc).XmlGetDocCompressMode"
	}, {
		"mangle":	"xmlGetDocEntity",
		"c++":	"xmlGetDocEntity(const xmlDoc *, const xmlChar *)",
		"go":	"(*XmlDoc).XmlGetDocEntity"
	}, {
		"mangle":	"xmlGetDtdAttrDesc",
		"c++":	"xmlGetDtdAttrDesc(xmlDtdPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlGetDtdAttrDesc"
	}, {
		"mangle":	"xmlGetDtdElementDesc",
		"c++":	"xmlGetDtdElementDesc(xmlDtdPtr, const xmlChar *)",
		"go":	"XmlGetDtdElementDesc"
	}, {
		"mangle":	"xmlGetDtdEntity",
		"c++":	"xmlGetDtdEntity(xmlDocPtr, const xmlChar *)",
		"go":	"XmlGetDtdEntity"
	}, {
		"mangle":	"xmlGetDtdNotationDesc",
		"c++":	"xmlGetDtdNotationDesc(xmlDtdPtr, const xmlChar *)",
		"go":	"XmlGetDtdNotationDesc"
	}, {
		"mangle":	"xmlGetDtdQAttrDesc",
		"c++":	"xmlGetDtdQAttrDesc(xmlDtdPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlGetDtdQAttrDesc"
	}, {
		"mangle":	"xmlGetDtdQElementDesc",
		"c++":	"xmlGetDtdQElementDesc(xmlDtdPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlGetDtdQElementDesc"
	}, {
		"mangle":	"xmlGetEncodingAlias",
		"c++":	"xmlGetEncodingAlias(const char *)",
		"go":	"XmlGetEncodingAlias"
	}, {
		"mangle":	"xmlGetExternalEntityLoader",
		"c++":	"xmlGetExternalEntityLoader()",
		"go":	"XmlGetExternalEntityLoader"
	}, {
		"mangle":	"xmlGetFeature",
		"c++":	"xmlGetFeature(xmlParserCtxtPtr, const char *, void *)",
		"go":	"XmlGetFeature"
	}, {
		"mangle":	"xmlGetFeaturesList",
		"c++":	"xmlGetFeaturesList(int *, const char **)",
		"go":	"XmlGetFeaturesList"
	}, {
		"mangle":	"xmlGetGlobalState",
		"c++":	"xmlGetGlobalState()",
		"go":	"XmlGetGlobalState"
	}, {
		"mangle":	"xmlGetID",
		"c++":	"xmlGetID(xmlDocPtr, const xmlChar *)",
		"go":	"XmlGetID"
	}, {
		"mangle":	"xmlGetIntSubset",
		"c++":	"xmlGetIntSubset(const xmlDoc *)",
		"go":	"(*XmlDoc).XmlGetIntSubset"
	}, {
		"mangle":	"xmlGetLastChild",
		"c++":	"xmlGetLastChild(const xmlNode *)",
		"go":	"(*XmlNode).XmlGetLastChild"
	}, {
		"mangle":	"xmlGetLastError",
		"c++":	"xmlGetLastError()",
		"go":	"XmlGetLastError"
	}, {
		"mangle":	"xmlGetLineNo",
		"c++":	"xmlGetLineNo(const xmlNode *)",
		"go":	"(*XmlNode).XmlGetLineNo"
	}, {
		"mangle":	"xmlGetNoNsProp",
		"c++":	"xmlGetNoNsProp(const xmlNode *, const xmlChar *)",
		"go":	"(*XmlNode).XmlGetNoNsProp"
	}, {
		"mangle":	"xmlGetNodePath",
		"c++":	"xmlGetNodePath(const xmlNode *)",
		"go":	"(*XmlNode).XmlGetNodePath"
	}, {
		"mangle":	"xmlGetNsList",
		"c++":	"xmlGetNsList(const xmlDoc *, const xmlNode *)",
		"go":	"(*XmlDoc).XmlGetNsList"
	}, {
		"mangle":	"xmlGetNsListSafe",
		"c++":	"xmlGetNsListSafe(const xmlDoc *, const xmlNode *, xmlNsPtr **)",
		"go":	"(*XmlDoc).XmlGetNsListSafe"
	}, {
		"mangle":	"xmlGetNsProp",
		"c++":	"xmlGetNsProp(const xmlNode *, const xmlChar *, const xmlChar *)",
		"go":	"(*XmlNode).XmlGetNsProp"
	}, {
		"mangle":	"xmlGetParameterEntity",
		"c++":	"xmlGetParameterEntity(xmlDocPtr, const xmlChar *)",
		"go":	"XmlGetParameterEntity"
	}, {
		"mangle":	"xmlGetPredefinedEntity",
		"c++":	"xmlGetPredefinedEntity(const xmlChar *)",
		"go":	"(*XmlChar).XmlGetPredefinedEntity"
	}, {
		"mangle":	"xmlGetProp",
		"c++":	"xmlGetProp(const xmlNode *, const xmlChar *)",
		"go":	"(*XmlNode).XmlGetProp"
	}, {
		"mangle":	"xmlGetRefs",
		"c++":	"xmlGetRefs(xmlDocPtr, const xmlChar *)",
		"go":	"XmlGetRefs"
	}, {
		"mangle":	"xmlGetThreadId",
		"c++":	"xmlGetThreadId()",
		"go":	"XmlGetThreadId"
	}, {
		"mangle":	"xmlGetUTF8Char",
		"c++":	"xmlGetUTF8Char(const unsigned char *, int *)",
		"go":	"XmlGetUTF8Char"
	}, {
		"mangle":	"xmlHandleEntity",
		"c++":	"xmlHandleEntity(xmlParserCtxtPtr, xmlEntityPtr)",
		"go":	"XmlHandleEntity"
	}, {
		"mangle":	"xmlHasFeature",
		"c++":	"xmlHasFeature(xmlFeature)",
		"go":	"XmlFeature.XmlHasFeature"
	}, {
		"mangle":	"xmlHasNsProp",
		"c++":	"xmlHasNsProp(const xmlNode *, const xmlChar *, const xmlChar *)",
		"go":	"(*XmlNode).XmlHasNsProp"
	}, {
		"mangle":	"xmlHasProp",
		"c++":	"xmlHasProp(const xmlNode *, const xmlChar *)",
		"go":	"(*XmlNode).XmlHasProp"
	}, {
		"mangle":	"xmlHashAdd",
		"c++":	"xmlHashAdd(xmlHashTablePtr, const xmlChar *, void *)",
		"go":	"XmlHashAdd"
	}, {
		"mangle":	"xmlHashAdd2",
		"c++":	"xmlHashAdd2(xmlHashTablePtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"XmlHashAdd2"
	}, {
		"mangle":	"xmlHashAdd3",
		"c++":	"xmlHashAdd3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, void *)",
		"go":	"XmlHashAdd3"
	}, {
		"mangle":	"xmlHashAddEntry",
		"c++":	"xmlHashAddEntry(xmlHashTablePtr, const xmlChar *, void *)",
		"go":	"XmlHashAddEntry"
	}, {
		"mangle":	"xmlHashAddEntry2",
		"c++":	"xmlHashAddEntry2(xmlHashTablePtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"XmlHashAddEntry2"
	}, {
		"mangle":	"xmlHashAddEntry3",
		"c++":	"xmlHashAddEntry3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, void *)",
		"go":	"XmlHashAddEntry3"
	}, {
		"mangle":	"xmlHashCopy",
		"c++":	"xmlHashCopy(xmlHashTablePtr, xmlHashCopier)",
		"go":	"XmlHashCopy"
	}, {
		"mangle":	"xmlHashCopySafe",
		"c++":	"xmlHashCopySafe(xmlHashTablePtr, xmlHashCopier, xmlHashDeallocator)",
		"go":	"XmlHashCopySafe"
	}, {
		"mangle":	"xmlHashCreate",
		"c++":	"xmlHashCreate(int)",
		"go":	"XmlHashCreate"
	}, {
		"mangle":	"xmlHashCreateDict",
		"c++":	"xmlHashCreateDict(int, xmlDictPtr)",
		"go":	"XmlHashCreateDict"
	}, {
		"mangle":	"xmlHashDefaultDeallocator",
		"c++":	"xmlHashDefaultDeallocator(void *, const xmlChar *)",
		"go":	"XmlHashDefaultDeallocator"
	}, {
		"mangle":	"xmlHashFree",
		"c++":	"xmlHashFree(xmlHashTablePtr, xmlHashDeallocator)",
		"go":	"XmlHashFree"
	}, {
		"mangle":	"xmlHashLookup",
		"c++":	"xmlHashLookup(xmlHashTablePtr, const xmlChar *)",
		"go":	"XmlHashLookup"
	}, {
		"mangle":	"xmlHashLookup2",
		"c++":	"xmlHashLookup2(xmlHashTablePtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlHashLookup2"
	}, {
		"mangle":	"xmlHashLookup3",
		"c++":	"xmlHashLookup3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlHashLookup3"
	}, {
		"mangle":	"xmlHashQLookup",
		"c++":	"xmlHashQLookup(xmlHashTablePtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlHashQLookup"
	}, {
		"mangle":	"xmlHashQLookup2",
		"c++":	"xmlHashQLookup2(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlHashQLookup2"
	}, {
		"mangle":	"xmlHashQLookup3",
		"c++":	"xmlHashQLookup3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlHashQLookup3"
	}, {
		"mangle":	"xmlHashRemoveEntry",
		"c++":	"xmlHashRemoveEntry(xmlHashTablePtr, const xmlChar *, xmlHashDeallocator)",
		"go":	"XmlHashRemoveEntry"
	}, {
		"mangle":	"xmlHashRemoveEntry2",
		"c++":	"xmlHashRemoveEntry2(xmlHashTablePtr, const xmlChar *, const xmlChar *, xmlHashDeallocator)",
		"go":	"XmlHashRemoveEntry2"
	}, {
		"mangle":	"xmlHashRemoveEntry3",
		"c++":	"xmlHashRemoveEntry3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, xmlHashDeallocator)",
		"go":	"XmlHashRemoveEntry3"
	}, {
		"mangle":	"xmlHashScan",
		"c++":	"xmlHashScan(xmlHashTablePtr, xmlHashScanner, void *)",
		"go":	"XmlHashScan"
	}, {
		"mangle":	"xmlHashScan3",
		"c++":	"xmlHashScan3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, xmlHashScanner, void *)",
		"go":	"XmlHashScan3"
	}, {
		"mangle":	"xmlHashScanFull",
		"c++":	"xmlHashScanFull(xmlHashTablePtr, xmlHashScannerFull, void *)",
		"go":	"XmlHashScanFull"
	}, {
		"mangle":	"xmlHashScanFull3",
		"c++":	"xmlHashScanFull3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, xmlHashScannerFull, void *)",
		"go":	"XmlHashScanFull3"
	}, {
		"mangle":	"xmlHashSize",
		"c++":	"xmlHashSize(xmlHashTablePtr)",
		"go":	"XmlHashSize"
	}, {
		"mangle":	"xmlHashUpdateEntry",
		"c++":	"xmlHashUpdateEntry(xmlHashTablePtr, const xmlChar *, void *, xmlHashDeallocator)",
		"go":	"XmlHashUpdateEntry"
	}, {
		"mangle":	"xmlHashUpdateEntry2",
		"c++":	"xmlHashUpdateEntry2(xmlHashTablePtr, const xmlChar *, const xmlChar *, void *, xmlHashDeallocator)",
		"go":	"XmlHashUpdateEntry2"
	}, {
		"mangle":	"xmlHashUpdateEntry3",
		"c++":	"xmlHashUpdateEntry3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, void *, xmlHashDeallocator)",
		"go":	"XmlHashUpdateEntry3"
	}, {
		"mangle":	"xmlIOHTTPClose",
		"c++":	"xmlIOHTTPClose(void *)",
		"go":	"XmlIOHTTPClose"
	}, {
		"mangle":	"xmlIOHTTPMatch",
		"c++":	"xmlIOHTTPMatch(const char *)",
		"go":	"XmlIOHTTPMatch"
	}, {
		"mangle":	"xmlIOHTTPOpen",
		"c++":	"xmlIOHTTPOpen(const char *)",
		"go":	"XmlIOHTTPOpen"
	}, {
		"mangle":	"xmlIOHTTPOpenW",
		"c++":	"xmlIOHTTPOpenW(const char *, int)",
		"go":	"XmlIOHTTPOpenW"
	}, {
		"mangle":	"xmlIOHTTPRead",
		"c++":	"xmlIOHTTPRead(void *, char *, int)",
		"go":	"XmlIOHTTPRead"
	}, {
		"mangle":	"xmlIOParseDTD",
		"c++":	"xmlIOParseDTD(xmlSAXHandlerPtr, xmlParserInputBufferPtr, xmlCharEncoding)",
		"go":	"XmlIOParseDTD"
	}, {
		"mangle":	"xmlInitCharEncodingHandlers",
		"c++":	"xmlInitCharEncodingHandlers()",
		"go":	"XmlInitCharEncodingHandlers"
	}, {
		"mangle":	"xmlInitGlobals",
		"c++":	"xmlInitGlobals()",
		"go":	"XmlInitGlobals"
	}, {
		"mangle":	"xmlInitMemory",
		"c++":	"xmlInitMemory()",
		"go":	"XmlInitMemory"
	}, {
		"mangle":	"xmlInitNodeInfoSeq",
		"c++":	"xmlInitNodeInfoSeq(xmlParserNodeInfoSeqPtr)",
		"go":	"XmlInitNodeInfoSeq"
	}, {
		"mangle":	"xmlInitParser",
		"c++":	"xmlInitParser()",
		"go":	"XmlInitParser"
	}, {
		"mangle":	"xmlInitParserCtxt",
		"c++":	"xmlInitParserCtxt(xmlParserCtxtPtr)",
		"go":	"XmlInitParserCtxt"
	}, {
		"mangle":	"xmlInitThreads",
		"c++":	"xmlInitThreads()",
		"go":	"XmlInitThreads"
	}, {
		"mangle":	"xmlInitializeCatalog",
		"c++":	"xmlInitializeCatalog()",
		"go":	"XmlInitializeCatalog"
	}, {
		"mangle":	"xmlInitializeDict",
		"c++":	"xmlInitializeDict()",
		"go":	"XmlInitializeDict"
	}, {
		"mangle":	"xmlInitializeGlobalState",
		"c++":	"xmlInitializeGlobalState(xmlGlobalStatePtr)",
		"go":	"XmlInitializeGlobalState"
	}, {
		"mangle":	"xmlInitializePredefinedEntities",
		"c++":	"xmlInitializePredefinedEntities()",
		"go":	"XmlInitializePredefinedEntities"
	}, {
		"mangle":	"xmlIsBaseChar",
		"c++":	"xmlIsBaseChar(unsigned int)",
		"go":	"XmlIsBaseChar"
	}, {
		"mangle":	"xmlIsBlank",
		"c++":	"xmlIsBlank(unsigned int)",
		"go":	"XmlIsBlank"
	}, {
		"mangle":	"xmlIsBlankNode",
		"c++":	"xmlIsBlankNode(const xmlNode *)",
		"go":	"(*XmlNode).XmlIsBlankNode"
	}, {
		"mangle":	"xmlIsChar",
		"c++":	"xmlIsChar(unsigned int)",
		"go":	"XmlIsChar"
	}, {
		"mangle":	"xmlIsCombining",
		"c++":	"xmlIsCombining(unsigned int)",
		"go":	"XmlIsCombining"
	}, {
		"mangle":	"xmlIsDigit",
		"c++":	"xmlIsDigit(unsigned int)",
		"go":	"XmlIsDigit"
	}, {
		"mangle":	"xmlIsExtender",
		"c++":	"xmlIsExtender(unsigned int)",
		"go":	"XmlIsExtender"
	}, {
		"mangle":	"xmlIsID",
		"c++":	"xmlIsID(xmlDocPtr, xmlNodePtr, xmlAttrPtr)",
		"go":	"XmlIsID"
	}, {
		"mangle":	"xmlIsIdeographic",
		"c++":	"xmlIsIdeographic(unsigned int)",
		"go":	"XmlIsIdeographic"
	}, {
		"mangle":	"xmlIsLetter",
		"c++":	"xmlIsLetter(int)",
		"go":	"XmlIsLetter"
	}, {
		"mangle":	"xmlIsMainThread",
		"c++":	"xmlIsMainThread()",
		"go":	"XmlIsMainThread"
	}, {
		"mangle":	"xmlIsMixedElement",
		"c++":	"xmlIsMixedElement(xmlDocPtr, const xmlChar *)",
		"go":	"XmlIsMixedElement"
	}, {
		"mangle":	"xmlIsPubidChar",
		"c++":	"xmlIsPubidChar(unsigned int)",
		"go":	"XmlIsPubidChar"
	}, {
		"mangle":	"xmlIsRef",
		"c++":	"xmlIsRef(xmlDocPtr, xmlNodePtr, xmlAttrPtr)",
		"go":	"XmlIsRef"
	}, {
		"mangle":	"xmlIsXHTML",
		"c++":	"xmlIsXHTML(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlIsXHTML"
	}, {
		"mangle":	"xmlKeepBlanksDefault",
		"c++":	"xmlKeepBlanksDefault(int)",
		"go":	"XmlKeepBlanksDefault"
	}, {
		"mangle":	"xmlLastElementChild",
		"c++":	"xmlLastElementChild(xmlNodePtr)",
		"go":	"XmlLastElementChild"
	}, {
		"mangle":	"xmlLineNumbersDefault",
		"c++":	"xmlLineNumbersDefault(int)",
		"go":	"XmlLineNumbersDefault"
	}, {
		"mangle":	"xmlLinkGetData",
		"c++":	"xmlLinkGetData(xmlLinkPtr)",
		"go":	"XmlLinkGetData"
	}, {
		"mangle":	"xmlListAppend",
		"c++":	"xmlListAppend(xmlListPtr, void *)",
		"go":	"XmlListAppend"
	}, {
		"mangle":	"xmlListClear",
		"c++":	"xmlListClear(xmlListPtr)",
		"go":	"XmlListClear"
	}, {
		"mangle":	"xmlListCopy",
		"c++":	"xmlListCopy(xmlListPtr, xmlListPtr)",
		"go":	"XmlListCopy"
	}, {
		"mangle":	"xmlListCreate",
		"c++":	"xmlListCreate(xmlListDeallocator, xmlListDataCompare)",
		"go":	"XmlListCreate"
	}, {
		"mangle":	"xmlListDelete",
		"c++":	"xmlListDelete(xmlListPtr)",
		"go":	"XmlListDelete"
	}, {
		"mangle":	"xmlListDup",
		"c++":	"xmlListDup(xmlListPtr)",
		"go":	"XmlListDup"
	}, {
		"mangle":	"xmlListEmpty",
		"c++":	"xmlListEmpty(xmlListPtr)",
		"go":	"XmlListEmpty"
	}, {
		"mangle":	"xmlListEnd",
		"c++":	"xmlListEnd(xmlListPtr)",
		"go":	"XmlListEnd"
	}, {
		"mangle":	"xmlListFront",
		"c++":	"xmlListFront(xmlListPtr)",
		"go":	"XmlListFront"
	}, {
		"mangle":	"xmlListInsert",
		"c++":	"xmlListInsert(xmlListPtr, void *)",
		"go":	"XmlListInsert"
	}, {
		"mangle":	"xmlListMerge",
		"c++":	"xmlListMerge(xmlListPtr, xmlListPtr)",
		"go":	"XmlListMerge"
	}, {
		"mangle":	"xmlListPopBack",
		"c++":	"xmlListPopBack(xmlListPtr)",
		"go":	"XmlListPopBack"
	}, {
		"mangle":	"xmlListPopFront",
		"c++":	"xmlListPopFront(xmlListPtr)",
		"go":	"XmlListPopFront"
	}, {
		"mangle":	"xmlListPushBack",
		"c++":	"xmlListPushBack(xmlListPtr, void *)",
		"go":	"XmlListPushBack"
	}, {
		"mangle":	"xmlListPushFront",
		"c++":	"xmlListPushFront(xmlListPtr, void *)",
		"go":	"XmlListPushFront"
	}, {
		"mangle":	"xmlListRemoveAll",
		"c++":	"xmlListRemoveAll(xmlListPtr, void *)",
		"go":	"XmlListRemoveAll"
	}, {
		"mangle":	"xmlListRemoveFirst",
		"c++":	"xmlListRemoveFirst(xmlListPtr, void *)",
		"go":	"XmlListRemoveFirst"
	}, {
		"mangle":	"xmlListRemoveLast",
		"c++":	"xmlListRemoveLast(xmlListPtr, void *)",
		"go":	"XmlListRemoveLast"
	}, {
		"mangle":	"xmlListReverse",
		"c++":	"xmlListReverse(xmlListPtr)",
		"go":	"XmlListReverse"
	}, {
		"mangle":	"xmlListReverseSearch",
		"c++":	"xmlListReverseSearch(xmlListPtr, void *)",
		"go":	"XmlListReverseSearch"
	}, {
		"mangle":	"xmlListReverseWalk",
		"c++":	"xmlListReverseWalk(xmlListPtr, xmlListWalker, void *)",
		"go":	"XmlListReverseWalk"
	}, {
		"mangle":	"xmlListSearch",
		"c++":	"xmlListSearch(xmlListPtr, void *)",
		"go":	"XmlListSearch"
	}, {
		"mangle":	"xmlListSize",
		"c++":	"xmlListSize(xmlListPtr)",
		"go":	"XmlListSize"
	}, {
		"mangle":	"xmlListSort",
		"c++":	"xmlListSort(xmlListPtr)",
		"go":	"XmlListSort"
	}, {
		"mangle":	"xmlListWalk",
		"c++":	"xmlListWalk(xmlListPtr, xmlListWalker, void *)",
		"go":	"XmlListWalk"
	}, {
		"mangle":	"xmlLoadACatalog",
		"c++":	"xmlLoadACatalog(const char *)",
		"go":	"XmlLoadACatalog"
	}, {
		"mangle":	"xmlLoadCatalog",
		"c++":	"xmlLoadCatalog(const char *)",
		"go":	"XmlLoadCatalog"
	}, {
		"mangle":	"xmlLoadCatalogs",
		"c++":	"xmlLoadCatalogs(const char *)",
		"go":	"XmlLoadCatalogs"
	}, {
		"mangle":	"xmlLoadExternalEntity",
		"c++":	"xmlLoadExternalEntity(const char *, const char *, xmlParserCtxtPtr)",
		"go":	"XmlLoadExternalEntity"
	}, {
		"mangle":	"xmlLoadSGMLSuperCatalog",
		"c++":	"xmlLoadSGMLSuperCatalog(const char *)",
		"go":	"XmlLoadSGMLSuperCatalog"
	}, {
		"mangle":	"xmlLockLibrary",
		"c++":	"xmlLockLibrary()",
		"go":	"XmlLockLibrary"
	}, {
		"mangle":	"xmlLookupCharEncodingHandler",
		"c++":	"xmlLookupCharEncodingHandler(xmlCharEncoding, xmlCharEncodingHandlerPtr *)",
		"go":	"XmlCharEncoding.XmlLookupCharEncodingHandler"
	}, {
		"mangle":	"xmlLsCountNode",
		"c++":	"xmlLsCountNode(xmlNodePtr)",
		"go":	"XmlLsCountNode"
	}, {
		"mangle":	"xmlLsOneNode",
		"c++":	"xmlLsOneNode(FILE *, xmlNodePtr)",
		"go":	"XmlLsOneNode"
	}, {
		"mangle":	"xmlMallocAtomicLoc",
		"c++":	"xmlMallocAtomicLoc(size_t, const char *, int)",
		"go":	"XmlMallocAtomicLoc"
	}, {
		"mangle":	"xmlMallocLoc",
		"c++":	"xmlMallocLoc(size_t, const char *, int)",
		"go":	"XmlMallocLoc"
	}, {
		"mangle":	"xmlMemBlocks",
		"c++":	"xmlMemBlocks()",
		"go":	"XmlMemBlocks"
	}, {
		"mangle":	"xmlMemDisplay",
		"c++":	"xmlMemDisplay(FILE *)",
		"go":	"XmlMemDisplay"
	}, {
		"mangle":	"xmlMemDisplayLast",
		"c++":	"xmlMemDisplayLast(FILE *, long)",
		"go":	"XmlMemDisplayLast"
	}, {
		"mangle":	"xmlMemFree",
		"c++":	"xmlMemFree(void *)",
		"go":	"XmlMemFree"
	}, {
		"mangle":	"xmlMemGet",
		"c++":	"xmlMemGet(xmlFreeFunc *, xmlMallocFunc *, xmlReallocFunc *, xmlStrdupFunc *)",
		"go":	"XmlMemGet"
	}, {
		"mangle":	"xmlMemMalloc",
		"c++":	"xmlMemMalloc(size_t)",
		"go":	"XmlMemMalloc"
	}, {
		"mangle":	"xmlMemRealloc",
		"c++":	"xmlMemRealloc(void *, size_t)",
		"go":	"XmlMemRealloc"
	}, {
		"mangle":	"xmlMemSetup",
		"c++":	"xmlMemSetup(xmlFreeFunc, xmlMallocFunc, xmlReallocFunc, xmlStrdupFunc)",
		"go":	"XmlMemSetup"
	}, {
		"mangle":	"xmlMemShow",
		"c++":	"xmlMemShow(FILE *, int)",
		"go":	"XmlMemShow"
	}, {
		"mangle":	"xmlMemSize",
		"c++":	"xmlMemSize(void *)",
		"go":	"XmlMemSize"
	}, {
		"mangle":	"xmlMemStrdupLoc",
		"c++":	"xmlMemStrdupLoc(const char *, const char *, int)",
		"go":	"XmlMemStrdupLoc"
	}, {
		"mangle":	"xmlMemUsed",
		"c++":	"xmlMemUsed()",
		"go":	"XmlMemUsed"
	}, {
		"mangle":	"xmlMemoryDump",
		"c++":	"xmlMemoryDump()",
		"go":	"XmlMemoryDump"
	}, {
		"mangle":	"xmlMemoryStrdup",
		"c++":	"xmlMemoryStrdup(const char *)",
		"go":	"XmlMemoryStrdup"
	}, {
		"mangle":	"xmlModuleClose",
		"c++":	"xmlModuleClose(xmlModulePtr)",
		"go":	"XmlModuleClose"
	}, {
		"mangle":	"xmlModuleFree",
		"c++":	"xmlModuleFree(xmlModulePtr)",
		"go":	"XmlModuleFree"
	}, {
		"mangle":	"xmlModuleOpen",
		"c++":	"xmlModuleOpen(const char *, int)",
		"go":	"XmlModuleOpen"
	}, {
		"mangle":	"xmlModuleSymbol",
		"c++":	"xmlModuleSymbol(xmlModulePtr, const char *, void **)",
		"go":	"XmlModuleSymbol"
	}, {
		"mangle":	"xmlMutexLock",
		"c++":	"xmlMutexLock(xmlMutexPtr)",
		"go":	"XmlMutexLock"
	}, {
		"mangle":	"xmlMutexUnlock",
		"c++":	"xmlMutexUnlock(xmlMutexPtr)",
		"go":	"XmlMutexUnlock"
	}, {
		"mangle":	"xmlNamespaceParseNCName",
		"c++":	"xmlNamespaceParseNCName(xmlParserCtxtPtr)",
		"go":	"XmlNamespaceParseNCName"
	}, {
		"mangle":	"xmlNamespaceParseNSDef",
		"c++":	"xmlNamespaceParseNSDef(xmlParserCtxtPtr)",
		"go":	"XmlNamespaceParseNSDef"
	}, {
		"mangle":	"xmlNamespaceParseQName",
		"c++":	"xmlNamespaceParseQName(xmlParserCtxtPtr, xmlChar **)",
		"go":	"XmlNamespaceParseQName"
	}, {
		"mangle":	"xmlNanoHTTPAuthHeader",
		"c++":	"xmlNanoHTTPAuthHeader(void *)",
		"go":	"XmlNanoHTTPAuthHeader"
	}, {
		"mangle":	"xmlNanoHTTPCleanup",
		"c++":	"xmlNanoHTTPCleanup()",
		"go":	"XmlNanoHTTPCleanup"
	}, {
		"mangle":	"xmlNanoHTTPClose",
		"c++":	"xmlNanoHTTPClose(void *)",
		"go":	"XmlNanoHTTPClose"
	}, {
		"mangle":	"xmlNanoHTTPContentLength",
		"c++":	"xmlNanoHTTPContentLength(void *)",
		"go":	"XmlNanoHTTPContentLength"
	}, {
		"mangle":	"xmlNanoHTTPEncoding",
		"c++":	"xmlNanoHTTPEncoding(void *)",
		"go":	"XmlNanoHTTPEncoding"
	}, {
		"mangle":	"xmlNanoHTTPFetch",
		"c++":	"xmlNanoHTTPFetch(const char *, const char *, char **)",
		"go":	"XmlNanoHTTPFetch"
	}, {
		"mangle":	"xmlNanoHTTPInit",
		"c++":	"xmlNanoHTTPInit()",
		"go":	"XmlNanoHTTPInit"
	}, {
		"mangle":	"xmlNanoHTTPMethod",
		"c++":	"xmlNanoHTTPMethod(const char *, const char *, const char *, char **, const char *, int)",
		"go":	"XmlNanoHTTPMethod"
	}, {
		"mangle":	"xmlNanoHTTPMethodRedir",
		"c++":	"xmlNanoHTTPMethodRedir(const char *, const char *, const char *, char **, char **, const char *, int)",
		"go":	"XmlNanoHTTPMethodRedir"
	}, {
		"mangle":	"xmlNanoHTTPMimeType",
		"c++":	"xmlNanoHTTPMimeType(void *)",
		"go":	"XmlNanoHTTPMimeType"
	}, {
		"mangle":	"xmlNanoHTTPOpen",
		"c++":	"xmlNanoHTTPOpen(const char *, char **)",
		"go":	"XmlNanoHTTPOpen"
	}, {
		"mangle":	"xmlNanoHTTPOpenRedir",
		"c++":	"xmlNanoHTTPOpenRedir(const char *, char **, char **)",
		"go":	"XmlNanoHTTPOpenRedir"
	}, {
		"mangle":	"xmlNanoHTTPRead",
		"c++":	"xmlNanoHTTPRead(void *, void *, int)",
		"go":	"XmlNanoHTTPRead"
	}, {
		"mangle":	"xmlNanoHTTPRedir",
		"c++":	"xmlNanoHTTPRedir(void *)",
		"go":	"XmlNanoHTTPRedir"
	}, {
		"mangle":	"xmlNanoHTTPReturnCode",
		"c++":	"xmlNanoHTTPReturnCode(void *)",
		"go":	"XmlNanoHTTPReturnCode"
	}, {
		"mangle":	"xmlNanoHTTPSave",
		"c++":	"xmlNanoHTTPSave(void *, const char *)",
		"go":	"XmlNanoHTTPSave"
	}, {
		"mangle":	"xmlNanoHTTPScanProxy",
		"c++":	"xmlNanoHTTPScanProxy(const char *)",
		"go":	"XmlNanoHTTPScanProxy"
	}, {
		"mangle":	"xmlNewAutomata",
		"c++":	"xmlNewAutomata()",
		"go":	"XmlNewAutomata"
	}, {
		"mangle":	"xmlNewCDataBlock",
		"c++":	"xmlNewCDataBlock(xmlDocPtr, const xmlChar *, int)",
		"go":	"XmlNewCDataBlock"
	}, {
		"mangle":	"xmlNewCatalog",
		"c++":	"xmlNewCatalog(int)",
		"go":	"XmlNewCatalog"
	}, {
		"mangle":	"xmlNewCharEncodingHandler",
		"c++":	"xmlNewCharEncodingHandler(const char *, xmlCharEncodingInputFunc, xmlCharEncodingOutputFunc)",
		"go":	"XmlNewCharEncodingHandler"
	}, {
		"mangle":	"xmlNewCharRef",
		"c++":	"xmlNewCharRef(xmlDocPtr, const xmlChar *)",
		"go":	"XmlNewCharRef"
	}, {
		"mangle":	"xmlNewChild",
		"c++":	"xmlNewChild(xmlNodePtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewChild"
	}, {
		"mangle":	"xmlNewComment",
		"c++":	"xmlNewComment(const xmlChar *)",
		"go":	"(*XmlChar).XmlNewComment"
	}, {
		"mangle":	"xmlNewDoc",
		"c++":	"xmlNewDoc(const xmlChar *)",
		"go":	"(*XmlChar).XmlNewDoc"
	}, {
		"mangle":	"xmlNewDocComment",
		"c++":	"xmlNewDocComment(xmlDocPtr, const xmlChar *)",
		"go":	"XmlNewDocComment"
	}, {
		"mangle":	"xmlNewDocElementContent",
		"c++":	"xmlNewDocElementContent(xmlDocPtr, const xmlChar *, xmlElementContentType)",
		"go":	"XmlNewDocElementContent"
	}, {
		"mangle":	"xmlNewDocFragment",
		"c++":	"xmlNewDocFragment(xmlDocPtr)",
		"go":	"XmlNewDocFragment"
	}, {
		"mangle":	"xmlNewDocNode",
		"c++":	"xmlNewDocNode(xmlDocPtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewDocNode"
	}, {
		"mangle":	"xmlNewDocNodeEatName",
		"c++":	"xmlNewDocNodeEatName(xmlDocPtr, xmlNsPtr, xmlChar *, const xmlChar *)",
		"go":	"XmlNewDocNodeEatName"
	}, {
		"mangle":	"xmlNewDocPI",
		"c++":	"xmlNewDocPI(xmlDocPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewDocPI"
	}, {
		"mangle":	"xmlNewDocProp",
		"c++":	"xmlNewDocProp(xmlDocPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewDocProp"
	}, {
		"mangle":	"xmlNewDocRawNode",
		"c++":	"xmlNewDocRawNode(xmlDocPtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewDocRawNode"
	}, {
		"mangle":	"xmlNewDocText",
		"c++":	"xmlNewDocText(const xmlDoc *, const xmlChar *)",
		"go":	"(*XmlDoc).XmlNewDocText"
	}, {
		"mangle":	"xmlNewDocTextLen",
		"c++":	"xmlNewDocTextLen(xmlDocPtr, const xmlChar *, int)",
		"go":	"XmlNewDocTextLen"
	}, {
		"mangle":	"xmlNewDtd",
		"c++":	"xmlNewDtd(xmlDocPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewDtd"
	}, {
		"mangle":	"xmlNewElementContent",
		"c++":	"xmlNewElementContent(const xmlChar *, xmlElementContentType)",
		"go":	"(*XmlChar).XmlNewElementContent"
	}, {
		"mangle":	"xmlNewEntity",
		"c++":	"xmlNewEntity(xmlDocPtr, const xmlChar *, int, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewEntity"
	}, {
		"mangle":	"xmlNewEntityInputStream",
		"c++":	"xmlNewEntityInputStream(xmlParserCtxtPtr, xmlEntityPtr)",
		"go":	"XmlNewEntityInputStream"
	}, {
		"mangle":	"xmlNewGlobalNs",
		"c++":	"xmlNewGlobalNs(xmlDocPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewGlobalNs"
	}, {
		"mangle":	"xmlNewIOInputStream",
		"c++":	"xmlNewIOInputStream(xmlParserCtxtPtr, xmlParserInputBufferPtr, xmlCharEncoding)",
		"go":	"XmlNewIOInputStream"
	}, {
		"mangle":	"xmlNewInputFromFile",
		"c++":	"xmlNewInputFromFile(xmlParserCtxtPtr, const char *)",
		"go":	"XmlNewInputFromFile"
	}, {
		"mangle":	"xmlNewInputStream",
		"c++":	"xmlNewInputStream(xmlParserCtxtPtr)",
		"go":	"XmlNewInputStream"
	}, {
		"mangle":	"xmlNewMutex",
		"c++":	"xmlNewMutex()",
		"go":	"XmlNewMutex"
	}, {
		"mangle":	"xmlNewNode",
		"c++":	"xmlNewNode(xmlNsPtr, const xmlChar *)",
		"go":	"XmlNewNode"
	}, {
		"mangle":	"xmlNewNodeEatName",
		"c++":	"xmlNewNodeEatName(xmlNsPtr, xmlChar *)",
		"go":	"XmlNewNodeEatName"
	}, {
		"mangle":	"xmlNewNs",
		"c++":	"xmlNewNs(xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewNs"
	}, {
		"mangle":	"xmlNewNsProp",
		"c++":	"xmlNewNsProp(xmlNodePtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewNsProp"
	}, {
		"mangle":	"xmlNewNsPropEatName",
		"c++":	"xmlNewNsPropEatName(xmlNodePtr, xmlNsPtr, xmlChar *, const xmlChar *)",
		"go":	"XmlNewNsPropEatName"
	}, {
		"mangle":	"xmlNewPI",
		"c++":	"xmlNewPI(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlNewPI"
	}, {
		"mangle":	"xmlNewParserCtxt",
		"c++":	"xmlNewParserCtxt()",
		"go":	"XmlNewParserCtxt"
	}, {
		"mangle":	"xmlNewProp",
		"c++":	"xmlNewProp(xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewProp"
	}, {
		"mangle":	"xmlNewRMutex",
		"c++":	"xmlNewRMutex()",
		"go":	"XmlNewRMutex"
	}, {
		"mangle":	"xmlNewReference",
		"c++":	"xmlNewReference(const xmlDoc *, const xmlChar *)",
		"go":	"(*XmlDoc).XmlNewReference"
	}, {
		"mangle":	"xmlNewSAXParserCtxt",
		"c++":	"xmlNewSAXParserCtxt(const xmlSAXHandler *, void *)",
		"go":	"(*XmlSAXHandler).XmlNewSAXParserCtxt"
	}, {
		"mangle":	"xmlNewStringInputStream",
		"c++":	"xmlNewStringInputStream(xmlParserCtxtPtr, const xmlChar *)",
		"go":	"XmlNewStringInputStream"
	}, {
		"mangle":	"xmlNewText",
		"c++":	"xmlNewText(const xmlChar *)",
		"go":	"(*XmlChar).XmlNewText"
	}, {
		"mangle":	"xmlNewTextChild",
		"c++":	"xmlNewTextChild(xmlNodePtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlNewTextChild"
	}, {
		"mangle":	"xmlNewTextLen",
		"c++":	"xmlNewTextLen(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlNewTextLen"
	}, {
		"mangle":	"xmlNewTextReader",
		"c++":	"xmlNewTextReader(xmlParserInputBufferPtr, const char *)",
		"go":	"XmlNewTextReader"
	}, {
		"mangle":	"xmlNewTextReaderFilename",
		"c++":	"xmlNewTextReaderFilename(const char *)",
		"go":	"XmlNewTextReaderFilename"
	}, {
		"mangle":	"xmlNewTextWriter",
		"c++":	"xmlNewTextWriter(xmlOutputBufferPtr)",
		"go":	"XmlNewTextWriter"
	}, {
		"mangle":	"xmlNewTextWriterDoc",
		"c++":	"xmlNewTextWriterDoc(xmlDocPtr *, int)",
		"go":	"XmlNewTextWriterDoc"
	}, {
		"mangle":	"xmlNewTextWriterFilename",
		"c++":	"xmlNewTextWriterFilename(const char *, int)",
		"go":	"XmlNewTextWriterFilename"
	}, {
		"mangle":	"xmlNewTextWriterMemory",
		"c++":	"xmlNewTextWriterMemory(xmlBufferPtr, int)",
		"go":	"XmlNewTextWriterMemory"
	}, {
		"mangle":	"xmlNewTextWriterPushParser",
		"c++":	"xmlNewTextWriterPushParser(xmlParserCtxtPtr, int)",
		"go":	"XmlNewTextWriterPushParser"
	}, {
		"mangle":	"xmlNewTextWriterTree",
		"c++":	"xmlNewTextWriterTree(xmlDocPtr, xmlNodePtr, int)",
		"go":	"XmlNewTextWriterTree"
	}, {
		"mangle":	"xmlNewValidCtxt",
		"c++":	"xmlNewValidCtxt()",
		"go":	"XmlNewValidCtxt"
	}, {
		"mangle":	"xmlNextChar",
		"c++":	"xmlNextChar(xmlParserCtxtPtr)",
		"go":	"XmlNextChar"
	}, {
		"mangle":	"xmlNextElementSibling",
		"c++":	"xmlNextElementSibling(xmlNodePtr)",
		"go":	"XmlNextElementSibling"
	}, {
		"mangle":	"xmlNoNetExternalEntityLoader",
		"c++":	"xmlNoNetExternalEntityLoader(const char *, const char *, xmlParserCtxtPtr)",
		"go":	"XmlNoNetExternalEntityLoader"
	}, {
		"mangle":	"xmlNodeAddContent",
		"c++":	"xmlNodeAddContent(xmlNodePtr, const xmlChar *)",
		"go":	"XmlNodeAddContent"
	}, {
		"mangle":	"xmlNodeAddContentLen",
		"c++":	"xmlNodeAddContentLen(xmlNodePtr, const xmlChar *, int)",
		"go":	"XmlNodeAddContentLen"
	}, {
		"mangle":	"xmlNodeBufGetContent",
		"c++":	"xmlNodeBufGetContent(xmlBufferPtr, const xmlNode *)",
		"go":	"XmlNodeBufGetContent"
	}, {
		"mangle":	"xmlNodeDump",
		"c++":	"xmlNodeDump(xmlBufferPtr, xmlDocPtr, xmlNodePtr, int, int)",
		"go":	"XmlNodeDump"
	}, {
		"mangle":	"xmlNodeDumpOutput",
		"c++":	"xmlNodeDumpOutput(xmlOutputBufferPtr, xmlDocPtr, xmlNodePtr, int, int, const char *)",
		"go":	"XmlNodeDumpOutput"
	}, {
		"mangle":	"xmlNodeGetAttrValue",
		"c++":	"xmlNodeGetAttrValue(const xmlNode *, const xmlChar *, const xmlChar *, xmlChar **)",
		"go":	"(*XmlNode).XmlNodeGetAttrValue"
	}, {
		"mangle":	"xmlNodeGetBase",
		"c++":	"xmlNodeGetBase(const xmlDoc *, const xmlNode *)",
		"go":	"(*XmlDoc).XmlNodeGetBase"
	}, {
		"mangle":	"xmlNodeGetBaseSafe",
		"c++":	"xmlNodeGetBaseSafe(const xmlDoc *, const xmlNode *, xmlChar **)",
		"go":	"(*XmlDoc).XmlNodeGetBaseSafe"
	}, {
		"mangle":	"xmlNodeGetContent",
		"c++":	"xmlNodeGetContent(const xmlNode *)",
		"go":	"(*XmlNode).XmlNodeGetContent"
	}, {
		"mangle":	"xmlNodeGetLang",
		"c++":	"xmlNodeGetLang(const xmlNode *)",
		"go":	"(*XmlNode).XmlNodeGetLang"
	}, {
		"mangle":	"xmlNodeGetSpacePreserve",
		"c++":	"xmlNodeGetSpacePreserve(const xmlNode *)",
		"go":	"(*XmlNode).XmlNodeGetSpacePreserve"
	}, {
		"mangle":	"xmlNodeIsText",
		"c++":	"xmlNodeIsText(const xmlNode *)",
		"go":	"(*XmlNode).XmlNodeIsText"
	}, {
		"mangle":	"xmlNodeListGetRawString",
		"c++":	"xmlNodeListGetRawString(const xmlDoc *, const xmlNode *, int)",
		"go":	"(*XmlDoc).XmlNodeListGetRawString"
	}, {
		"mangle":	"xmlNodeListGetString",
		"c++":	"xmlNodeListGetString(xmlDocPtr, const xmlNode *, int)",
		"go":	"XmlNodeListGetString"
	}, {
		"mangle":	"xmlNodeSetBase",
		"c++":	"xmlNodeSetBase(xmlNodePtr, const xmlChar *)",
		"go":	"XmlNodeSetBase"
	}, {
		"mangle":	"xmlNodeSetContent",
		"c++":	"xmlNodeSetContent(xmlNodePtr, const xmlChar *)",
		"go":	"XmlNodeSetContent"
	}, {
		"mangle":	"xmlNodeSetContentLen",
		"c++":	"xmlNodeSetContentLen(xmlNodePtr, const xmlChar *, int)",
		"go":	"XmlNodeSetContentLen"
	}, {
		"mangle":	"xmlNodeSetLang",
		"c++":	"xmlNodeSetLang(xmlNodePtr, const xmlChar *)",
		"go":	"XmlNodeSetLang"
	}, {
		"mangle":	"xmlNodeSetName",
		"c++":	"xmlNodeSetName(xmlNodePtr, const xmlChar *)",
		"go":	"XmlNodeSetName"
	}, {
		"mangle":	"xmlNodeSetSpacePreserve",
		"c++":	"xmlNodeSetSpacePreserve(xmlNodePtr, int)",
		"go":	"XmlNodeSetSpacePreserve"
	}, {
		"mangle":	"xmlNormalizeURIPath",
		"c++":	"xmlNormalizeURIPath(char *)",
		"go":	"XmlNormalizeURIPath"
	}, {
		"mangle":	"xmlNormalizeWindowsPath",
		"c++":	"xmlNormalizeWindowsPath(const xmlChar *)",
		"go":	"(*XmlChar).XmlNormalizeWindowsPath"
	}, {
		"mangle":	"xmlOpenCharEncodingHandler",
		"c++":	"xmlOpenCharEncodingHandler(const char *, int, xmlCharEncodingHandlerPtr *)",
		"go":	"XmlOpenCharEncodingHandler"
	}, {
		"mangle":	"xmlOutputBufferClose",
		"c++":	"xmlOutputBufferClose(xmlOutputBufferPtr)",
		"go":	"XmlOutputBufferClose"
	}, {
		"mangle":	"xmlOutputBufferCreateBuffer",
		"c++":	"xmlOutputBufferCreateBuffer(xmlBufferPtr, xmlCharEncodingHandlerPtr)",
		"go":	"XmlOutputBufferCreateBuffer"
	}, {
		"mangle":	"xmlOutputBufferCreateFd",
		"c++":	"xmlOutputBufferCreateFd(int, xmlCharEncodingHandlerPtr)",
		"go":	"XmlOutputBufferCreateFd"
	}, {
		"mangle":	"xmlOutputBufferCreateFile",
		"c++":	"xmlOutputBufferCreateFile(FILE *, xmlCharEncodingHandlerPtr)",
		"go":	"XmlOutputBufferCreateFile"
	}, {
		"mangle":	"xmlOutputBufferCreateFilename",
		"c++":	"xmlOutputBufferCreateFilename(const char *, xmlCharEncodingHandlerPtr, int)",
		"go":	"XmlOutputBufferCreateFilename"
	}, {
		"mangle":	"xmlOutputBufferCreateFilenameDefault",
		"c++":	"xmlOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc)",
		"go":	"XmlOutputBufferCreateFilenameDefault"
	}, {
		"mangle":	"xmlOutputBufferCreateIO",
		"c++":	"xmlOutputBufferCreateIO(xmlOutputWriteCallback, xmlOutputCloseCallback, void *, xmlCharEncodingHandlerPtr)",
		"go":	"XmlOutputBufferCreateIO"
	}, {
		"mangle":	"xmlOutputBufferFlush",
		"c++":	"xmlOutputBufferFlush(xmlOutputBufferPtr)",
		"go":	"XmlOutputBufferFlush"
	}, {
		"mangle":	"xmlOutputBufferGetContent",
		"c++":	"xmlOutputBufferGetContent(xmlOutputBufferPtr)",
		"go":	"XmlOutputBufferGetContent"
	}, {
		"mangle":	"xmlOutputBufferGetSize",
		"c++":	"xmlOutputBufferGetSize(xmlOutputBufferPtr)",
		"go":	"XmlOutputBufferGetSize"
	}, {
		"mangle":	"xmlOutputBufferWrite",
		"c++":	"xmlOutputBufferWrite(xmlOutputBufferPtr, int, const char *)",
		"go":	"XmlOutputBufferWrite"
	}, {
		"mangle":	"xmlOutputBufferWriteEscape",
		"c++":	"xmlOutputBufferWriteEscape(xmlOutputBufferPtr, const xmlChar *, xmlCharEncodingOutputFunc)",
		"go":	"XmlOutputBufferWriteEscape"
	}, {
		"mangle":	"xmlOutputBufferWriteString",
		"c++":	"xmlOutputBufferWriteString(xmlOutputBufferPtr, const char *)",
		"go":	"XmlOutputBufferWriteString"
	}, {
		"mangle":	"xmlParseAttValue",
		"c++":	"xmlParseAttValue(xmlParserCtxtPtr)",
		"go":	"XmlParseAttValue"
	}, {
		"mangle":	"xmlParseAttribute",
		"c++":	"xmlParseAttribute(xmlParserCtxtPtr, xmlChar **)",
		"go":	"XmlParseAttribute"
	}, {
		"mangle":	"xmlParseAttributeListDecl",
		"c++":	"xmlParseAttributeListDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseAttributeListDecl"
	}, {
		"mangle":	"xmlParseAttributeType",
		"c++":	"xmlParseAttributeType(xmlParserCtxtPtr, xmlEnumerationPtr *)",
		"go":	"XmlParseAttributeType"
	}, {
		"mangle":	"xmlParseBalancedChunkMemory",
		"c++":	"xmlParseBalancedChunkMemory(xmlDocPtr, xmlSAXHandlerPtr, void *, int, const xmlChar *, xmlNodePtr *)",
		"go":	"XmlParseBalancedChunkMemory"
	}, {
		"mangle":	"xmlParseBalancedChunkMemoryRecover",
		"c++":	"xmlParseBalancedChunkMemoryRecover(xmlDocPtr, xmlSAXHandlerPtr, void *, int, const xmlChar *, xmlNodePtr *, int)",
		"go":	"XmlParseBalancedChunkMemoryRecover"
	}, {
		"mangle":	"xmlParseCDSect",
		"c++":	"xmlParseCDSect(xmlParserCtxtPtr)",
		"go":	"XmlParseCDSect"
	}, {
		"mangle":	"xmlParseCatalogFile",
		"c++":	"xmlParseCatalogFile(const char *)",
		"go":	"XmlParseCatalogFile"
	}, {
		"mangle":	"xmlParseCharData",
		"c++":	"xmlParseCharData(xmlParserCtxtPtr, int)",
		"go":	"XmlParseCharData"
	}, {
		"mangle":	"xmlParseCharEncoding",
		"c++":	"xmlParseCharEncoding(const char *)",
		"go":	"XmlParseCharEncoding"
	}, {
		"mangle":	"xmlParseCharRef",
		"c++":	"xmlParseCharRef(xmlParserCtxtPtr)",
		"go":	"XmlParseCharRef"
	}, {
		"mangle":	"xmlParseChunk",
		"c++":	"xmlParseChunk(xmlParserCtxtPtr, const char *, int, int)",
		"go":	"XmlParseChunk"
	}, {
		"mangle":	"xmlParseComment",
		"c++":	"xmlParseComment(xmlParserCtxtPtr)",
		"go":	"XmlParseComment"
	}, {
		"mangle":	"xmlParseContent",
		"c++":	"xmlParseContent(xmlParserCtxtPtr)",
		"go":	"XmlParseContent"
	}, {
		"mangle":	"xmlParseCtxtExternalEntity",
		"c++":	"xmlParseCtxtExternalEntity(xmlParserCtxtPtr, const xmlChar *, const xmlChar *, xmlNodePtr *)",
		"go":	"XmlParseCtxtExternalEntity"
	}, {
		"mangle":	"xmlParseDTD",
		"c++":	"xmlParseDTD(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlParseDTD"
	}, {
		"mangle":	"xmlParseDefaultDecl",
		"c++":	"xmlParseDefaultDecl(xmlParserCtxtPtr, xmlChar **)",
		"go":	"XmlParseDefaultDecl"
	}, {
		"mangle":	"xmlParseDoc",
		"c++":	"xmlParseDoc(const xmlChar *)",
		"go":	"(*XmlChar).XmlParseDoc"
	}, {
		"mangle":	"xmlParseDocTypeDecl",
		"c++":	"xmlParseDocTypeDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseDocTypeDecl"
	}, {
		"mangle":	"xmlParseDocument",
		"c++":	"xmlParseDocument(xmlParserCtxtPtr)",
		"go":	"XmlParseDocument"
	}, {
		"mangle":	"xmlParseElement",
		"c++":	"xmlParseElement(xmlParserCtxtPtr)",
		"go":	"XmlParseElement"
	}, {
		"mangle":	"xmlParseElementChildrenContentDecl",
		"c++":	"xmlParseElementChildrenContentDecl(xmlParserCtxtPtr, int)",
		"go":	"XmlParseElementChildrenContentDecl"
	}, {
		"mangle":	"xmlParseElementContentDecl",
		"c++":	"xmlParseElementContentDecl(xmlParserCtxtPtr, const xmlChar *, xmlElementContentPtr *)",
		"go":	"XmlParseElementContentDecl"
	}, {
		"mangle":	"xmlParseElementDecl",
		"c++":	"xmlParseElementDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseElementDecl"
	}, {
		"mangle":	"xmlParseElementMixedContentDecl",
		"c++":	"xmlParseElementMixedContentDecl(xmlParserCtxtPtr, int)",
		"go":	"XmlParseElementMixedContentDecl"
	}, {
		"mangle":	"xmlParseEncName",
		"c++":	"xmlParseEncName(xmlParserCtxtPtr)",
		"go":	"XmlParseEncName"
	}, {
		"mangle":	"xmlParseEncodingDecl",
		"c++":	"xmlParseEncodingDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseEncodingDecl"
	}, {
		"mangle":	"xmlParseEndTag",
		"c++":	"xmlParseEndTag(xmlParserCtxtPtr)",
		"go":	"XmlParseEndTag"
	}, {
		"mangle":	"xmlParseEntity",
		"c++":	"xmlParseEntity(const char *)",
		"go":	"XmlParseEntity"
	}, {
		"mangle":	"xmlParseEntityDecl",
		"c++":	"xmlParseEntityDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseEntityDecl"
	}, {
		"mangle":	"xmlParseEntityRef",
		"c++":	"xmlParseEntityRef(xmlParserCtxtPtr)",
		"go":	"XmlParseEntityRef"
	}, {
		"mangle":	"xmlParseEntityValue",
		"c++":	"xmlParseEntityValue(xmlParserCtxtPtr, xmlChar **)",
		"go":	"XmlParseEntityValue"
	}, {
		"mangle":	"xmlParseEnumeratedType",
		"c++":	"xmlParseEnumeratedType(xmlParserCtxtPtr, xmlEnumerationPtr *)",
		"go":	"XmlParseEnumeratedType"
	}, {
		"mangle":	"xmlParseEnumerationType",
		"c++":	"xmlParseEnumerationType(xmlParserCtxtPtr)",
		"go":	"XmlParseEnumerationType"
	}, {
		"mangle":	"xmlParseExtParsedEnt",
		"c++":	"xmlParseExtParsedEnt(xmlParserCtxtPtr)",
		"go":	"XmlParseExtParsedEnt"
	}, {
		"mangle":	"xmlParseExternalEntity",
		"c++":	"xmlParseExternalEntity(xmlDocPtr, xmlSAXHandlerPtr, void *, int, const xmlChar *, const xmlChar *, xmlNodePtr *)",
		"go":	"XmlParseExternalEntity"
	}, {
		"mangle":	"xmlParseExternalID",
		"c++":	"xmlParseExternalID(xmlParserCtxtPtr, xmlChar **, int)",
		"go":	"XmlParseExternalID"
	}, {
		"mangle":	"xmlParseExternalSubset",
		"c++":	"xmlParseExternalSubset(xmlParserCtxtPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlParseExternalSubset"
	}, {
		"mangle":	"xmlParseFile",
		"c++":	"xmlParseFile(const char *)",
		"go":	"XmlParseFile"
	}, {
		"mangle":	"xmlParseInNodeContext",
		"c++":	"xmlParseInNodeContext(xmlNodePtr, const char *, int, int, xmlNodePtr *)",
		"go":	"XmlParseInNodeContext"
	}, {
		"mangle":	"xmlParseMarkupDecl",
		"c++":	"xmlParseMarkupDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseMarkupDecl"
	}, {
		"mangle":	"xmlParseMemory",
		"c++":	"xmlParseMemory(const char *, int)",
		"go":	"XmlParseMemory"
	}, {
		"mangle":	"xmlParseMisc",
		"c++":	"xmlParseMisc(xmlParserCtxtPtr)",
		"go":	"XmlParseMisc"
	}, {
		"mangle":	"xmlParseName",
		"c++":	"xmlParseName(xmlParserCtxtPtr)",
		"go":	"XmlParseName"
	}, {
		"mangle":	"xmlParseNamespace",
		"c++":	"xmlParseNamespace(xmlParserCtxtPtr)",
		"go":	"XmlParseNamespace"
	}, {
		"mangle":	"xmlParseNmtoken",
		"c++":	"xmlParseNmtoken(xmlParserCtxtPtr)",
		"go":	"XmlParseNmtoken"
	}, {
		"mangle":	"xmlParseNotationDecl",
		"c++":	"xmlParseNotationDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseNotationDecl"
	}, {
		"mangle":	"xmlParseNotationType",
		"c++":	"xmlParseNotationType(xmlParserCtxtPtr)",
		"go":	"XmlParseNotationType"
	}, {
		"mangle":	"xmlParsePEReference",
		"c++":	"xmlParsePEReference(xmlParserCtxtPtr)",
		"go":	"XmlParsePEReference"
	}, {
		"mangle":	"xmlParsePI",
		"c++":	"xmlParsePI(xmlParserCtxtPtr)",
		"go":	"XmlParsePI"
	}, {
		"mangle":	"xmlParsePITarget",
		"c++":	"xmlParsePITarget(xmlParserCtxtPtr)",
		"go":	"XmlParsePITarget"
	}, {
		"mangle":	"xmlParsePubidLiteral",
		"c++":	"xmlParsePubidLiteral(xmlParserCtxtPtr)",
		"go":	"XmlParsePubidLiteral"
	}, {
		"mangle":	"xmlParseQuotedString",
		"c++":	"xmlParseQuotedString(xmlParserCtxtPtr)",
		"go":	"XmlParseQuotedString"
	}, {
		"mangle":	"xmlParseReference",
		"c++":	"xmlParseReference(xmlParserCtxtPtr)",
		"go":	"XmlParseReference"
	}, {
		"mangle":	"xmlParseSDDecl",
		"c++":	"xmlParseSDDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseSDDecl"
	}, {
		"mangle":	"xmlParseStartTag",
		"c++":	"xmlParseStartTag(xmlParserCtxtPtr)",
		"go":	"XmlParseStartTag"
	}, {
		"mangle":	"xmlParseSystemLiteral",
		"c++":	"xmlParseSystemLiteral(xmlParserCtxtPtr)",
		"go":	"XmlParseSystemLiteral"
	}, {
		"mangle":	"xmlParseTextDecl",
		"c++":	"xmlParseTextDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseTextDecl"
	}, {
		"mangle":	"xmlParseURI",
		"c++":	"xmlParseURI(const char *)",
		"go":	"XmlParseURI"
	}, {
		"mangle":	"xmlParseURIRaw",
		"c++":	"xmlParseURIRaw(const char *, int)",
		"go":	"XmlParseURIRaw"
	}, {
		"mangle":	"xmlParseURIReference",
		"c++":	"xmlParseURIReference(xmlURIPtr, const char *)",
		"go":	"XmlParseURIReference"
	}, {
		"mangle":	"xmlParseURISafe",
		"c++":	"xmlParseURISafe(const char *, xmlURIPtr *)",
		"go":	"XmlParseURISafe"
	}, {
		"mangle":	"xmlParseVersionInfo",
		"c++":	"xmlParseVersionInfo(xmlParserCtxtPtr)",
		"go":	"XmlParseVersionInfo"
	}, {
		"mangle":	"xmlParseVersionNum",
		"c++":	"xmlParseVersionNum(xmlParserCtxtPtr)",
		"go":	"XmlParseVersionNum"
	}, {
		"mangle":	"xmlParseXMLDecl",
		"c++":	"xmlParseXMLDecl(xmlParserCtxtPtr)",
		"go":	"XmlParseXMLDecl"
	}, {
		"mangle":	"xmlParserAddNodeInfo",
		"c++":	"xmlParserAddNodeInfo(xmlParserCtxtPtr, xmlParserNodeInfoPtr)",
		"go":	"XmlParserAddNodeInfo"
	}, {
		"mangle":	"xmlParserError",
		"c++":	"xmlParserError(void *, const char *, ...)",
		"go":	"XmlParserError"
	}, {
		"mangle":	"xmlParserFindNodeInfo",
		"c++":	"xmlParserFindNodeInfo(xmlParserCtxtPtr, xmlNodePtr)",
		"go":	"XmlParserFindNodeInfo"
	}, {
		"mangle":	"xmlParserFindNodeInfoIndex",
		"c++":	"xmlParserFindNodeInfoIndex(xmlParserNodeInfoSeqPtr, xmlNodePtr)",
		"go":	"XmlParserFindNodeInfoIndex"
	}, {
		"mangle":	"xmlParserGetDirectory",
		"c++":	"xmlParserGetDirectory(const char *)",
		"go":	"XmlParserGetDirectory"
	}, {
		"mangle":	"xmlParserHandlePEReference",
		"c++":	"xmlParserHandlePEReference(xmlParserCtxtPtr)",
		"go":	"XmlParserHandlePEReference"
	}, {
		"mangle":	"xmlParserHandleReference",
		"c++":	"xmlParserHandleReference(xmlParserCtxtPtr)",
		"go":	"XmlParserHandleReference"
	}, {
		"mangle":	"xmlParserInputBufferCreateFd",
		"c++":	"xmlParserInputBufferCreateFd(int, xmlCharEncoding)",
		"go":	"XmlParserInputBufferCreateFd"
	}, {
		"mangle":	"xmlParserInputBufferCreateFile",
		"c++":	"xmlParserInputBufferCreateFile(FILE *, xmlCharEncoding)",
		"go":	"XmlParserInputBufferCreateFile"
	}, {
		"mangle":	"xmlParserInputBufferCreateFilename",
		"c++":	"xmlParserInputBufferCreateFilename(const char *, xmlCharEncoding)",
		"go":	"XmlParserInputBufferCreateFilename"
	}, {
		"mangle":	"xmlParserInputBufferCreateFilenameDefault",
		"c++":	"xmlParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc)",
		"go":	"XmlParserInputBufferCreateFilenameDefault"
	}, {
		"mangle":	"xmlParserInputBufferCreateIO",
		"c++":	"xmlParserInputBufferCreateIO(xmlInputReadCallback, xmlInputCloseCallback, void *, xmlCharEncoding)",
		"go":	"XmlParserInputBufferCreateIO"
	}, {
		"mangle":	"xmlParserInputBufferCreateMem",
		"c++":	"xmlParserInputBufferCreateMem(const char *, int, xmlCharEncoding)",
		"go":	"XmlParserInputBufferCreateMem"
	}, {
		"mangle":	"xmlParserInputBufferCreateStatic",
		"c++":	"xmlParserInputBufferCreateStatic(const char *, int, xmlCharEncoding)",
		"go":	"XmlParserInputBufferCreateStatic"
	}, {
		"mangle":	"xmlParserInputBufferGrow",
		"c++":	"xmlParserInputBufferGrow(xmlParserInputBufferPtr, int)",
		"go":	"XmlParserInputBufferGrow"
	}, {
		"mangle":	"xmlParserInputBufferPush",
		"c++":	"xmlParserInputBufferPush(xmlParserInputBufferPtr, int, const char *)",
		"go":	"XmlParserInputBufferPush"
	}, {
		"mangle":	"xmlParserInputBufferRead",
		"c++":	"xmlParserInputBufferRead(xmlParserInputBufferPtr, int)",
		"go":	"XmlParserInputBufferRead"
	}, {
		"mangle":	"xmlParserInputGrow",
		"c++":	"xmlParserInputGrow(xmlParserInputPtr, int)",
		"go":	"XmlParserInputGrow"
	}, {
		"mangle":	"xmlParserInputRead",
		"c++":	"xmlParserInputRead(xmlParserInputPtr, int)",
		"go":	"XmlParserInputRead"
	}, {
		"mangle":	"xmlParserInputShrink",
		"c++":	"xmlParserInputShrink(xmlParserInputPtr)",
		"go":	"XmlParserInputShrink"
	}, {
		"mangle":	"xmlParserPrintFileContext",
		"c++":	"xmlParserPrintFileContext(struct _xmlParserInput *)",
		"go":	"(*Struct XmlParserInput).XmlParserPrintFileContext"
	}, {
		"mangle":	"xmlParserPrintFileInfo",
		"c++":	"xmlParserPrintFileInfo(struct _xmlParserInput *)",
		"go":	"(*Struct XmlParserInput).XmlParserPrintFileInfo"
	}, {
		"mangle":	"xmlParserValidityError",
		"c++":	"xmlParserValidityError(void *, const char *, ...)",
		"go":	"XmlParserValidityError"
	}, {
		"mangle":	"xmlParserValidityWarning",
		"c++":	"xmlParserValidityWarning(void *, const char *, ...)",
		"go":	"XmlParserValidityWarning"
	}, {
		"mangle":	"xmlParserWarning",
		"c++":	"xmlParserWarning(void *, const char *, ...)",
		"go":	"XmlParserWarning"
	}, {
		"mangle":	"xmlPathToURI",
		"c++":	"xmlPathToURI(const xmlChar *)",
		"go":	"(*XmlChar).XmlPathToURI"
	}, {
		"mangle":	"xmlPatternCompileSafe",
		"c++":	"xmlPatternCompileSafe(const xmlChar *, xmlDict *, int, const xmlChar **, xmlPatternPtr *)",
		"go":	"(*XmlChar).XmlPatternCompileSafe"
	}, {
		"mangle":	"xmlPatternFromRoot",
		"c++":	"xmlPatternFromRoot(xmlPatternPtr)",
		"go":	"XmlPatternFromRoot"
	}, {
		"mangle":	"xmlPatternGetStreamCtxt",
		"c++":	"xmlPatternGetStreamCtxt(xmlPatternPtr)",
		"go":	"XmlPatternGetStreamCtxt"
	}, {
		"mangle":	"xmlPatternMatch",
		"c++":	"xmlPatternMatch(xmlPatternPtr, xmlNodePtr)",
		"go":	"XmlPatternMatch"
	}, {
		"mangle":	"xmlPatternMaxDepth",
		"c++":	"xmlPatternMaxDepth(xmlPatternPtr)",
		"go":	"XmlPatternMaxDepth"
	}, {
		"mangle":	"xmlPatternMinDepth",
		"c++":	"xmlPatternMinDepth(xmlPatternPtr)",
		"go":	"XmlPatternMinDepth"
	}, {
		"mangle":	"xmlPatternStreamable",
		"c++":	"xmlPatternStreamable(xmlPatternPtr)",
		"go":	"XmlPatternStreamable"
	}, {
		"mangle":	"xmlPatterncompile",
		"c++":	"xmlPatterncompile(const xmlChar *, xmlDict *, int, const xmlChar **)",
		"go":	"(*XmlChar).XmlPatterncompile"
	}, {
		"mangle":	"xmlPedanticParserDefault",
		"c++":	"xmlPedanticParserDefault(int)",
		"go":	"XmlPedanticParserDefault"
	}, {
		"mangle":	"xmlPopInput",
		"c++":	"xmlPopInput(xmlParserCtxtPtr)",
		"go":	"XmlPopInput"
	}, {
		"mangle":	"xmlPopInputCallbacks",
		"c++":	"xmlPopInputCallbacks()",
		"go":	"XmlPopInputCallbacks"
	}, {
		"mangle":	"xmlPopOutputCallbacks",
		"c++":	"xmlPopOutputCallbacks()",
		"go":	"XmlPopOutputCallbacks"
	}, {
		"mangle":	"xmlPreviousElementSibling",
		"c++":	"xmlPreviousElementSibling(xmlNodePtr)",
		"go":	"XmlPreviousElementSibling"
	}, {
		"mangle":	"xmlPrintURI",
		"c++":	"xmlPrintURI(FILE *, xmlURIPtr)",
		"go":	"XmlPrintURI"
	}, {
		"mangle":	"xmlPushInput",
		"c++":	"xmlPushInput(xmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"XmlPushInput"
	}, {
		"mangle":	"xmlRMutexLock",
		"c++":	"xmlRMutexLock(xmlRMutexPtr)",
		"go":	"XmlRMutexLock"
	}, {
		"mangle":	"xmlRMutexUnlock",
		"c++":	"xmlRMutexUnlock(xmlRMutexPtr)",
		"go":	"XmlRMutexUnlock"
	}, {
		"mangle":	"xmlReadDoc",
		"c++":	"xmlReadDoc(const xmlChar *, const char *, const char *, int)",
		"go":	"(*XmlChar).XmlReadDoc"
	}, {
		"mangle":	"xmlReadFd",
		"c++":	"xmlReadFd(int, const char *, const char *, int)",
		"go":	"XmlReadFd"
	}, {
		"mangle":	"xmlReadFile",
		"c++":	"xmlReadFile(const char *, const char *, int)",
		"go":	"XmlReadFile"
	}, {
		"mangle":	"xmlReadIO",
		"c++":	"xmlReadIO(xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"XmlReadIO"
	}, {
		"mangle":	"xmlReadMemory",
		"c++":	"xmlReadMemory(const char *, int, const char *, const char *, int)",
		"go":	"XmlReadMemory"
	}, {
		"mangle":	"xmlReaderForDoc",
		"c++":	"xmlReaderForDoc(const xmlChar *, const char *, const char *, int)",
		"go":	"(*XmlChar).XmlReaderForDoc"
	}, {
		"mangle":	"xmlReaderForFd",
		"c++":	"xmlReaderForFd(int, const char *, const char *, int)",
		"go":	"XmlReaderForFd"
	}, {
		"mangle":	"xmlReaderForFile",
		"c++":	"xmlReaderForFile(const char *, const char *, int)",
		"go":	"XmlReaderForFile"
	}, {
		"mangle":	"xmlReaderForIO",
		"c++":	"xmlReaderForIO(xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"XmlReaderForIO"
	}, {
		"mangle":	"xmlReaderForMemory",
		"c++":	"xmlReaderForMemory(const char *, int, const char *, const char *, int)",
		"go":	"XmlReaderForMemory"
	}, {
		"mangle":	"xmlReaderNewDoc",
		"c++":	"xmlReaderNewDoc(xmlTextReaderPtr, const xmlChar *, const char *, const char *, int)",
		"go":	"XmlReaderNewDoc"
	}, {
		"mangle":	"xmlReaderNewFd",
		"c++":	"xmlReaderNewFd(xmlTextReaderPtr, int, const char *, const char *, int)",
		"go":	"XmlReaderNewFd"
	}, {
		"mangle":	"xmlReaderNewFile",
		"c++":	"xmlReaderNewFile(xmlTextReaderPtr, const char *, const char *, int)",
		"go":	"XmlReaderNewFile"
	}, {
		"mangle":	"xmlReaderNewIO",
		"c++":	"xmlReaderNewIO(xmlTextReaderPtr, xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"XmlReaderNewIO"
	}, {
		"mangle":	"xmlReaderNewMemory",
		"c++":	"xmlReaderNewMemory(xmlTextReaderPtr, const char *, int, const char *, const char *, int)",
		"go":	"XmlReaderNewMemory"
	}, {
		"mangle":	"xmlReaderNewWalker",
		"c++":	"xmlReaderNewWalker(xmlTextReaderPtr, xmlDocPtr)",
		"go":	"XmlReaderNewWalker"
	}, {
		"mangle":	"xmlReaderWalker",
		"c++":	"xmlReaderWalker(xmlDocPtr)",
		"go":	"XmlReaderWalker"
	}, {
		"mangle":	"xmlReallocLoc",
		"c++":	"xmlReallocLoc(void *, size_t, const char *, int)",
		"go":	"XmlReallocLoc"
	}, {
		"mangle":	"xmlReconciliateNs",
		"c++":	"xmlReconciliateNs(xmlDocPtr, xmlNodePtr)",
		"go":	"XmlReconciliateNs"
	}, {
		"mangle":	"xmlRecoverDoc",
		"c++":	"xmlRecoverDoc(const xmlChar *)",
		"go":	"(*XmlChar).XmlRecoverDoc"
	}, {
		"mangle":	"xmlRecoverFile",
		"c++":	"xmlRecoverFile(const char *)",
		"go":	"XmlRecoverFile"
	}, {
		"mangle":	"xmlRecoverMemory",
		"c++":	"xmlRecoverMemory(const char *, int)",
		"go":	"XmlRecoverMemory"
	}, {
		"mangle":	"xmlRegExecErrInfo",
		"c++":	"xmlRegExecErrInfo(xmlRegExecCtxtPtr, const xmlChar **, int *, int *, xmlChar **, int *)",
		"go":	"XmlRegExecErrInfo"
	}, {
		"mangle":	"xmlRegExecNextValues",
		"c++":	"xmlRegExecNextValues(xmlRegExecCtxtPtr, int *, int *, xmlChar **, int *)",
		"go":	"XmlRegExecNextValues"
	}, {
		"mangle":	"xmlRegExecPushString",
		"c++":	"xmlRegExecPushString(xmlRegExecCtxtPtr, const xmlChar *, void *)",
		"go":	"XmlRegExecPushString"
	}, {
		"mangle":	"xmlRegExecPushString2",
		"c++":	"xmlRegExecPushString2(xmlRegExecCtxtPtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"XmlRegExecPushString2"
	}, {
		"mangle":	"xmlRegFreeExecCtxt",
		"c++":	"xmlRegFreeExecCtxt(xmlRegExecCtxtPtr)",
		"go":	"XmlRegFreeExecCtxt"
	}, {
		"mangle":	"xmlRegFreeRegexp",
		"c++":	"xmlRegFreeRegexp(xmlRegexpPtr)",
		"go":	"XmlRegFreeRegexp"
	}, {
		"mangle":	"xmlRegNewExecCtxt",
		"c++":	"xmlRegNewExecCtxt(xmlRegexpPtr, xmlRegExecCallbacks, void *)",
		"go":	"XmlRegNewExecCtxt"
	}, {
		"mangle":	"xmlRegexpCompile",
		"c++":	"xmlRegexpCompile(const xmlChar *)",
		"go":	"(*XmlChar).XmlRegexpCompile"
	}, {
		"mangle":	"xmlRegexpExec",
		"c++":	"xmlRegexpExec(xmlRegexpPtr, const xmlChar *)",
		"go":	"XmlRegexpExec"
	}, {
		"mangle":	"xmlRegexpIsDeterminist",
		"c++":	"xmlRegexpIsDeterminist(xmlRegexpPtr)",
		"go":	"XmlRegexpIsDeterminist"
	}, {
		"mangle":	"xmlRegexpPrint",
		"c++":	"xmlRegexpPrint(FILE *, xmlRegexpPtr)",
		"go":	"XmlRegexpPrint"
	}, {
		"mangle":	"xmlRegisterCharEncodingHandler",
		"c++":	"xmlRegisterCharEncodingHandler(xmlCharEncodingHandlerPtr)",
		"go":	"XmlRegisterCharEncodingHandler"
	}, {
		"mangle":	"xmlRegisterDefaultInputCallbacks",
		"c++":	"xmlRegisterDefaultInputCallbacks()",
		"go":	"XmlRegisterDefaultInputCallbacks"
	}, {
		"mangle":	"xmlRegisterDefaultOutputCallbacks",
		"c++":	"xmlRegisterDefaultOutputCallbacks()",
		"go":	"XmlRegisterDefaultOutputCallbacks"
	}, {
		"mangle":	"xmlRegisterHTTPPostCallbacks",
		"c++":	"xmlRegisterHTTPPostCallbacks()",
		"go":	"XmlRegisterHTTPPostCallbacks"
	}, {
		"mangle":	"xmlRegisterInputCallbacks",
		"c++":	"xmlRegisterInputCallbacks(xmlInputMatchCallback, xmlInputOpenCallback, xmlInputReadCallback, xmlInputCloseCallback)",
		"go":	"XmlRegisterInputCallbacks"
	}, {
		"mangle":	"xmlRegisterNodeDefault",
		"c++":	"xmlRegisterNodeDefault(xmlRegisterNodeFunc)",
		"go":	"XmlRegisterNodeDefault"
	}, {
		"mangle":	"xmlRegisterOutputCallbacks",
		"c++":	"xmlRegisterOutputCallbacks(xmlOutputMatchCallback, xmlOutputOpenCallback, xmlOutputWriteCallback, xmlOutputCloseCallback)",
		"go":	"XmlRegisterOutputCallbacks"
	}, {
		"mangle":	"xmlRelaxNGCleanupTypes",
		"c++":	"xmlRelaxNGCleanupTypes()",
		"go":	"XmlRelaxNGCleanupTypes"
	}, {
		"mangle":	"xmlRelaxNGDump",
		"c++":	"xmlRelaxNGDump(FILE *, xmlRelaxNGPtr)",
		"go":	"XmlRelaxNGDump"
	}, {
		"mangle":	"xmlRelaxNGDumpTree",
		"c++":	"xmlRelaxNGDumpTree(FILE *, xmlRelaxNGPtr)",
		"go":	"XmlRelaxNGDumpTree"
	}, {
		"mangle":	"xmlRelaxNGFree",
		"c++":	"xmlRelaxNGFree(xmlRelaxNGPtr)",
		"go":	"XmlRelaxNGFree"
	}, {
		"mangle":	"xmlRelaxNGFreeParserCtxt",
		"c++":	"xmlRelaxNGFreeParserCtxt(xmlRelaxNGParserCtxtPtr)",
		"go":	"XmlRelaxNGFreeParserCtxt"
	}, {
		"mangle":	"xmlRelaxNGFreeValidCtxt",
		"c++":	"xmlRelaxNGFreeValidCtxt(xmlRelaxNGValidCtxtPtr)",
		"go":	"XmlRelaxNGFreeValidCtxt"
	}, {
		"mangle":	"xmlRelaxNGGetParserErrors",
		"c++":	"xmlRelaxNGGetParserErrors(xmlRelaxNGParserCtxtPtr, xmlRelaxNGValidityErrorFunc *, xmlRelaxNGValidityWarningFunc *, void **)",
		"go":	"XmlRelaxNGGetParserErrors"
	}, {
		"mangle":	"xmlRelaxNGGetValidErrors",
		"c++":	"xmlRelaxNGGetValidErrors(xmlRelaxNGValidCtxtPtr, xmlRelaxNGValidityErrorFunc *, xmlRelaxNGValidityWarningFunc *, void **)",
		"go":	"XmlRelaxNGGetValidErrors"
	}, {
		"mangle":	"xmlRelaxNGInitTypes",
		"c++":	"xmlRelaxNGInitTypes()",
		"go":	"XmlRelaxNGInitTypes"
	}, {
		"mangle":	"xmlRelaxNGNewDocParserCtxt",
		"c++":	"xmlRelaxNGNewDocParserCtxt(xmlDocPtr)",
		"go":	"XmlRelaxNGNewDocParserCtxt"
	}, {
		"mangle":	"xmlRelaxNGNewMemParserCtxt",
		"c++":	"xmlRelaxNGNewMemParserCtxt(const char *, int)",
		"go":	"XmlRelaxNGNewMemParserCtxt"
	}, {
		"mangle":	"xmlRelaxNGNewParserCtxt",
		"c++":	"xmlRelaxNGNewParserCtxt(const char *)",
		"go":	"XmlRelaxNGNewParserCtxt"
	}, {
		"mangle":	"xmlRelaxNGNewValidCtxt",
		"c++":	"xmlRelaxNGNewValidCtxt(xmlRelaxNGPtr)",
		"go":	"XmlRelaxNGNewValidCtxt"
	}, {
		"mangle":	"xmlRelaxNGParse",
		"c++":	"xmlRelaxNGParse(xmlRelaxNGParserCtxtPtr)",
		"go":	"XmlRelaxNGParse"
	}, {
		"mangle":	"xmlRelaxNGSetParserErrors",
		"c++":	"xmlRelaxNGSetParserErrors(xmlRelaxNGParserCtxtPtr, xmlRelaxNGValidityErrorFunc, xmlRelaxNGValidityWarningFunc, void *)",
		"go":	"XmlRelaxNGSetParserErrors"
	}, {
		"mangle":	"xmlRelaxNGSetParserStructuredErrors",
		"c++":	"xmlRelaxNGSetParserStructuredErrors(xmlRelaxNGParserCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlRelaxNGSetParserStructuredErrors"
	}, {
		"mangle":	"xmlRelaxNGSetValidErrors",
		"c++":	"xmlRelaxNGSetValidErrors(xmlRelaxNGValidCtxtPtr, xmlRelaxNGValidityErrorFunc, xmlRelaxNGValidityWarningFunc, void *)",
		"go":	"XmlRelaxNGSetValidErrors"
	}, {
		"mangle":	"xmlRelaxNGSetValidStructuredErrors",
		"c++":	"xmlRelaxNGSetValidStructuredErrors(xmlRelaxNGValidCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlRelaxNGSetValidStructuredErrors"
	}, {
		"mangle":	"xmlRelaxNGValidateDoc",
		"c++":	"xmlRelaxNGValidateDoc(xmlRelaxNGValidCtxtPtr, xmlDocPtr)",
		"go":	"XmlRelaxNGValidateDoc"
	}, {
		"mangle":	"xmlRelaxNGValidateFullElement",
		"c++":	"xmlRelaxNGValidateFullElement(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"XmlRelaxNGValidateFullElement"
	}, {
		"mangle":	"xmlRelaxNGValidatePopElement",
		"c++":	"xmlRelaxNGValidatePopElement(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"XmlRelaxNGValidatePopElement"
	}, {
		"mangle":	"xmlRelaxNGValidatePushCData",
		"c++":	"xmlRelaxNGValidatePushCData(xmlRelaxNGValidCtxtPtr, const xmlChar *, int)",
		"go":	"XmlRelaxNGValidatePushCData"
	}, {
		"mangle":	"xmlRelaxNGValidatePushElement",
		"c++":	"xmlRelaxNGValidatePushElement(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"XmlRelaxNGValidatePushElement"
	}, {
		"mangle":	"xmlRelaxParserSetFlag",
		"c++":	"xmlRelaxParserSetFlag(xmlRelaxNGParserCtxtPtr, int)",
		"go":	"XmlRelaxParserSetFlag"
	}, {
		"mangle":	"xmlRemoveID",
		"c++":	"xmlRemoveID(xmlDocPtr, xmlAttrPtr)",
		"go":	"XmlRemoveID"
	}, {
		"mangle":	"xmlRemoveProp",
		"c++":	"xmlRemoveProp(xmlAttrPtr)",
		"go":	"XmlRemoveProp"
	}, {
		"mangle":	"xmlRemoveRef",
		"c++":	"xmlRemoveRef(xmlDocPtr, xmlAttrPtr)",
		"go":	"XmlRemoveRef"
	}, {
		"mangle":	"xmlReplaceNode",
		"c++":	"xmlReplaceNode(xmlNodePtr, xmlNodePtr)",
		"go":	"XmlReplaceNode"
	}, {
		"mangle":	"xmlResetError",
		"c++":	"xmlResetError(xmlErrorPtr)",
		"go":	"XmlResetError"
	}, {
		"mangle":	"xmlResetLastError",
		"c++":	"xmlResetLastError()",
		"go":	"XmlResetLastError"
	}, {
		"mangle":	"xmlSAX2AttributeDecl",
		"c++":	"xmlSAX2AttributeDecl(void *, const xmlChar *, const xmlChar *, int, int, const xmlChar *, xmlEnumerationPtr)",
		"go":	"XmlSAX2AttributeDecl"
	}, {
		"mangle":	"xmlSAX2CDataBlock",
		"c++":	"xmlSAX2CDataBlock(void *, const xmlChar *, int)",
		"go":	"XmlSAX2CDataBlock"
	}, {
		"mangle":	"xmlSAX2Characters",
		"c++":	"xmlSAX2Characters(void *, const xmlChar *, int)",
		"go":	"XmlSAX2Characters"
	}, {
		"mangle":	"xmlSAX2Comment",
		"c++":	"xmlSAX2Comment(void *, const xmlChar *)",
		"go":	"XmlSAX2Comment"
	}, {
		"mangle":	"xmlSAX2ElementDecl",
		"c++":	"xmlSAX2ElementDecl(void *, const xmlChar *, int, xmlElementContentPtr)",
		"go":	"XmlSAX2ElementDecl"
	}, {
		"mangle":	"xmlSAX2EndDocument",
		"c++":	"xmlSAX2EndDocument(void *)",
		"go":	"XmlSAX2EndDocument"
	}, {
		"mangle":	"xmlSAX2EndElement",
		"c++":	"xmlSAX2EndElement(void *, const xmlChar *)",
		"go":	"XmlSAX2EndElement"
	}, {
		"mangle":	"xmlSAX2EndElementNs",
		"c++":	"xmlSAX2EndElementNs(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlSAX2EndElementNs"
	}, {
		"mangle":	"xmlSAX2EntityDecl",
		"c++":	"xmlSAX2EntityDecl(void *, const xmlChar *, int, const xmlChar *, const xmlChar *, xmlChar *)",
		"go":	"XmlSAX2EntityDecl"
	}, {
		"mangle":	"xmlSAX2ExternalSubset",
		"c++":	"xmlSAX2ExternalSubset(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlSAX2ExternalSubset"
	}, {
		"mangle":	"xmlSAX2GetColumnNumber",
		"c++":	"xmlSAX2GetColumnNumber(void *)",
		"go":	"XmlSAX2GetColumnNumber"
	}, {
		"mangle":	"xmlSAX2GetEntity",
		"c++":	"xmlSAX2GetEntity(void *, const xmlChar *)",
		"go":	"XmlSAX2GetEntity"
	}, {
		"mangle":	"xmlSAX2GetLineNumber",
		"c++":	"xmlSAX2GetLineNumber(void *)",
		"go":	"XmlSAX2GetLineNumber"
	}, {
		"mangle":	"xmlSAX2GetParameterEntity",
		"c++":	"xmlSAX2GetParameterEntity(void *, const xmlChar *)",
		"go":	"XmlSAX2GetParameterEntity"
	}, {
		"mangle":	"xmlSAX2GetPublicId",
		"c++":	"xmlSAX2GetPublicId(void *)",
		"go":	"XmlSAX2GetPublicId"
	}, {
		"mangle":	"xmlSAX2GetSystemId",
		"c++":	"xmlSAX2GetSystemId(void *)",
		"go":	"XmlSAX2GetSystemId"
	}, {
		"mangle":	"xmlSAX2HasExternalSubset",
		"c++":	"xmlSAX2HasExternalSubset(void *)",
		"go":	"XmlSAX2HasExternalSubset"
	}, {
		"mangle":	"xmlSAX2HasInternalSubset",
		"c++":	"xmlSAX2HasInternalSubset(void *)",
		"go":	"XmlSAX2HasInternalSubset"
	}, {
		"mangle":	"xmlSAX2IgnorableWhitespace",
		"c++":	"xmlSAX2IgnorableWhitespace(void *, const xmlChar *, int)",
		"go":	"XmlSAX2IgnorableWhitespace"
	}, {
		"mangle":	"xmlSAX2InitDefaultSAXHandler",
		"c++":	"xmlSAX2InitDefaultSAXHandler(xmlSAXHandler *, int)",
		"go":	"(*XmlSAXHandler).XmlSAX2InitDefaultSAXHandler"
	}, {
		"mangle":	"xmlSAX2InitHtmlDefaultSAXHandler",
		"c++":	"xmlSAX2InitHtmlDefaultSAXHandler(xmlSAXHandler *)",
		"go":	"(*XmlSAXHandler).XmlSAX2InitHtmlDefaultSAXHandler"
	}, {
		"mangle":	"xmlSAX2InternalSubset",
		"c++":	"xmlSAX2InternalSubset(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlSAX2InternalSubset"
	}, {
		"mangle":	"xmlSAX2IsStandalone",
		"c++":	"xmlSAX2IsStandalone(void *)",
		"go":	"XmlSAX2IsStandalone"
	}, {
		"mangle":	"xmlSAX2NotationDecl",
		"c++":	"xmlSAX2NotationDecl(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlSAX2NotationDecl"
	}, {
		"mangle":	"xmlSAX2ProcessingInstruction",
		"c++":	"xmlSAX2ProcessingInstruction(void *, const xmlChar *, const xmlChar *)",
		"go":	"XmlSAX2ProcessingInstruction"
	}, {
		"mangle":	"xmlSAX2Reference",
		"c++":	"xmlSAX2Reference(void *, const xmlChar *)",
		"go":	"XmlSAX2Reference"
	}, {
		"mangle":	"xmlSAX2ResolveEntity",
		"c++":	"xmlSAX2ResolveEntity(void *, const xmlChar *, const xmlChar *)",
		"go":	"XmlSAX2ResolveEntity"
	}, {
		"mangle":	"xmlSAX2SetDocumentLocator",
		"c++":	"xmlSAX2SetDocumentLocator(void *, xmlSAXLocatorPtr)",
		"go":	"XmlSAX2SetDocumentLocator"
	}, {
		"mangle":	"xmlSAX2StartDocument",
		"c++":	"xmlSAX2StartDocument(void *)",
		"go":	"XmlSAX2StartDocument"
	}, {
		"mangle":	"xmlSAX2StartElement",
		"c++":	"xmlSAX2StartElement(void *, const xmlChar *, const xmlChar **)",
		"go":	"XmlSAX2StartElement"
	}, {
		"mangle":	"xmlSAX2StartElementNs",
		"c++":	"xmlSAX2StartElementNs(void *, const xmlChar *, const xmlChar *, const xmlChar *, int, const xmlChar **, int, int, const xmlChar **)",
		"go":	"XmlSAX2StartElementNs"
	}, {
		"mangle":	"xmlSAX2UnparsedEntityDecl",
		"c++":	"xmlSAX2UnparsedEntityDecl(void *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlSAX2UnparsedEntityDecl"
	}, {
		"mangle":	"xmlSAXDefaultVersion",
		"c++":	"xmlSAXDefaultVersion(int)",
		"go":	"XmlSAXDefaultVersion"
	}, {
		"mangle":	"xmlSAXParseDTD",
		"c++":	"xmlSAXParseDTD(xmlSAXHandlerPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlSAXParseDTD"
	}, {
		"mangle":	"xmlSAXParseDoc",
		"c++":	"xmlSAXParseDoc(xmlSAXHandlerPtr, const xmlChar *, int)",
		"go":	"XmlSAXParseDoc"
	}, {
		"mangle":	"xmlSAXParseEntity",
		"c++":	"xmlSAXParseEntity(xmlSAXHandlerPtr, const char *)",
		"go":	"XmlSAXParseEntity"
	}, {
		"mangle":	"xmlSAXParseFile",
		"c++":	"xmlSAXParseFile(xmlSAXHandlerPtr, const char *, int)",
		"go":	"XmlSAXParseFile"
	}, {
		"mangle":	"xmlSAXParseFileWithData",
		"c++":	"xmlSAXParseFileWithData(xmlSAXHandlerPtr, const char *, int, void *)",
		"go":	"XmlSAXParseFileWithData"
	}, {
		"mangle":	"xmlSAXParseMemory",
		"c++":	"xmlSAXParseMemory(xmlSAXHandlerPtr, const char *, int, int)",
		"go":	"XmlSAXParseMemory"
	}, {
		"mangle":	"xmlSAXParseMemoryWithData",
		"c++":	"xmlSAXParseMemoryWithData(xmlSAXHandlerPtr, const char *, int, int, void *)",
		"go":	"XmlSAXParseMemoryWithData"
	}, {
		"mangle":	"xmlSAXUserParseFile",
		"c++":	"xmlSAXUserParseFile(xmlSAXHandlerPtr, void *, const char *)",
		"go":	"XmlSAXUserParseFile"
	}, {
		"mangle":	"xmlSAXUserParseMemory",
		"c++":	"xmlSAXUserParseMemory(xmlSAXHandlerPtr, void *, const char *, int)",
		"go":	"XmlSAXUserParseMemory"
	}, {
		"mangle":	"xmlSAXVersion",
		"c++":	"xmlSAXVersion(xmlSAXHandler *, int)",
		"go":	"(*XmlSAXHandler).XmlSAXVersion"
	}, {
		"mangle":	"xmlSaveClose",
		"c++":	"xmlSaveClose(xmlSaveCtxtPtr)",
		"go":	"XmlSaveClose"
	}, {
		"mangle":	"xmlSaveDoc",
		"c++":	"xmlSaveDoc(xmlSaveCtxtPtr, xmlDocPtr)",
		"go":	"XmlSaveDoc"
	}, {
		"mangle":	"xmlSaveFile",
		"c++":	"xmlSaveFile(const char *, xmlDocPtr)",
		"go":	"XmlSaveFile"
	}, {
		"mangle":	"xmlSaveFileEnc",
		"c++":	"xmlSaveFileEnc(const char *, xmlDocPtr, const char *)",
		"go":	"XmlSaveFileEnc"
	}, {
		"mangle":	"xmlSaveFileTo",
		"c++":	"xmlSaveFileTo(xmlOutputBufferPtr, xmlDocPtr, const char *)",
		"go":	"XmlSaveFileTo"
	}, {
		"mangle":	"xmlSaveFinish",
		"c++":	"xmlSaveFinish(xmlSaveCtxtPtr)",
		"go":	"XmlSaveFinish"
	}, {
		"mangle":	"xmlSaveFlush",
		"c++":	"xmlSaveFlush(xmlSaveCtxtPtr)",
		"go":	"XmlSaveFlush"
	}, {
		"mangle":	"xmlSaveFormatFile",
		"c++":	"xmlSaveFormatFile(const char *, xmlDocPtr, int)",
		"go":	"XmlSaveFormatFile"
	}, {
		"mangle":	"xmlSaveFormatFileEnc",
		"c++":	"xmlSaveFormatFileEnc(const char *, xmlDocPtr, const char *, int)",
		"go":	"XmlSaveFormatFileEnc"
	}, {
		"mangle":	"xmlSaveFormatFileTo",
		"c++":	"xmlSaveFormatFileTo(xmlOutputBufferPtr, xmlDocPtr, const char *, int)",
		"go":	"XmlSaveFormatFileTo"
	}, {
		"mangle":	"xmlSaveSetAttrEscape",
		"c++":	"xmlSaveSetAttrEscape(xmlSaveCtxtPtr, xmlCharEncodingOutputFunc)",
		"go":	"XmlSaveSetAttrEscape"
	}, {
		"mangle":	"xmlSaveSetEscape",
		"c++":	"xmlSaveSetEscape(xmlSaveCtxtPtr, xmlCharEncodingOutputFunc)",
		"go":	"XmlSaveSetEscape"
	}, {
		"mangle":	"xmlSaveToBuffer",
		"c++":	"xmlSaveToBuffer(xmlBufferPtr, const char *, int)",
		"go":	"XmlSaveToBuffer"
	}, {
		"mangle":	"xmlSaveToFd",
		"c++":	"xmlSaveToFd(int, const char *, int)",
		"go":	"XmlSaveToFd"
	}, {
		"mangle":	"xmlSaveToFilename",
		"c++":	"xmlSaveToFilename(const char *, const char *, int)",
		"go":	"XmlSaveToFilename"
	}, {
		"mangle":	"xmlSaveToIO",
		"c++":	"xmlSaveToIO(xmlOutputWriteCallback, xmlOutputCloseCallback, void *, const char *, int)",
		"go":	"XmlSaveToIO"
	}, {
		"mangle":	"xmlSaveTree",
		"c++":	"xmlSaveTree(xmlSaveCtxtPtr, xmlNodePtr)",
		"go":	"XmlSaveTree"
	}, {
		"mangle":	"xmlSaveUri",
		"c++":	"xmlSaveUri(xmlURIPtr)",
		"go":	"XmlSaveUri"
	}, {
		"mangle":	"xmlScanName",
		"c++":	"xmlScanName(xmlParserCtxtPtr)",
		"go":	"XmlScanName"
	}, {
		"mangle":	"xmlSchemaCheckFacet",
		"c++":	"xmlSchemaCheckFacet(xmlSchemaFacetPtr, xmlSchemaTypePtr, xmlSchemaParserCtxtPtr, const xmlChar *)",
		"go":	"XmlSchemaCheckFacet"
	}, {
		"mangle":	"xmlSchemaCleanupTypes",
		"c++":	"xmlSchemaCleanupTypes()",
		"go":	"XmlSchemaCleanupTypes"
	}, {
		"mangle":	"xmlSchemaCollapseString",
		"c++":	"xmlSchemaCollapseString(const xmlChar *)",
		"go":	"(*XmlChar).XmlSchemaCollapseString"
	}, {
		"mangle":	"xmlSchemaCompareValues",
		"c++":	"xmlSchemaCompareValues(xmlSchemaValPtr, xmlSchemaValPtr)",
		"go":	"XmlSchemaCompareValues"
	}, {
		"mangle":	"xmlSchemaCompareValuesWhtsp",
		"c++":	"xmlSchemaCompareValuesWhtsp(xmlSchemaValPtr, xmlSchemaWhitespaceValueType, xmlSchemaValPtr, xmlSchemaWhitespaceValueType)",
		"go":	"XmlSchemaCompareValuesWhtsp"
	}, {
		"mangle":	"xmlSchemaCopyValue",
		"c++":	"xmlSchemaCopyValue(xmlSchemaValPtr)",
		"go":	"XmlSchemaCopyValue"
	}, {
		"mangle":	"xmlSchemaDump",
		"c++":	"xmlSchemaDump(FILE *, xmlSchemaPtr)",
		"go":	"XmlSchemaDump"
	}, {
		"mangle":	"xmlSchemaFree",
		"c++":	"xmlSchemaFree(xmlSchemaPtr)",
		"go":	"XmlSchemaFree"
	}, {
		"mangle":	"xmlSchemaFreeFacet",
		"c++":	"xmlSchemaFreeFacet(xmlSchemaFacetPtr)",
		"go":	"XmlSchemaFreeFacet"
	}, {
		"mangle":	"xmlSchemaFreeParserCtxt",
		"c++":	"xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr)",
		"go":	"XmlSchemaFreeParserCtxt"
	}, {
		"mangle":	"xmlSchemaFreeType",
		"c++":	"xmlSchemaFreeType(xmlSchemaTypePtr)",
		"go":	"XmlSchemaFreeType"
	}, {
		"mangle":	"xmlSchemaFreeValidCtxt",
		"c++":	"xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr)",
		"go":	"XmlSchemaFreeValidCtxt"
	}, {
		"mangle":	"xmlSchemaFreeValue",
		"c++":	"xmlSchemaFreeValue(xmlSchemaValPtr)",
		"go":	"XmlSchemaFreeValue"
	}, {
		"mangle":	"xmlSchemaFreeWildcard",
		"c++":	"xmlSchemaFreeWildcard(xmlSchemaWildcardPtr)",
		"go":	"XmlSchemaFreeWildcard"
	}, {
		"mangle":	"xmlSchemaGetBuiltInListSimpleTypeItemType",
		"c++":	"xmlSchemaGetBuiltInListSimpleTypeItemType(xmlSchemaTypePtr)",
		"go":	"XmlSchemaGetBuiltInListSimpleTypeItemType"
	}, {
		"mangle":	"xmlSchemaGetBuiltInType",
		"c++":	"xmlSchemaGetBuiltInType(xmlSchemaValType)",
		"go":	"XmlSchemaValType.XmlSchemaGetBuiltInType"
	}, {
		"mangle":	"xmlSchemaGetCanonValue",
		"c++":	"xmlSchemaGetCanonValue(xmlSchemaValPtr, const xmlChar **)",
		"go":	"XmlSchemaGetCanonValue"
	}, {
		"mangle":	"xmlSchemaGetCanonValueWhtsp",
		"c++":	"xmlSchemaGetCanonValueWhtsp(xmlSchemaValPtr, const xmlChar **, xmlSchemaWhitespaceValueType)",
		"go":	"XmlSchemaGetCanonValueWhtsp"
	}, {
		"mangle":	"xmlSchemaGetFacetValueAsULong",
		"c++":	"xmlSchemaGetFacetValueAsULong(xmlSchemaFacetPtr)",
		"go":	"XmlSchemaGetFacetValueAsULong"
	}, {
		"mangle":	"xmlSchemaGetParserErrors",
		"c++":	"xmlSchemaGetParserErrors(xmlSchemaParserCtxtPtr, xmlSchemaValidityErrorFunc *, xmlSchemaValidityWarningFunc *, void **)",
		"go":	"XmlSchemaGetParserErrors"
	}, {
		"mangle":	"xmlSchemaGetPredefinedType",
		"c++":	"xmlSchemaGetPredefinedType(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlSchemaGetPredefinedType"
	}, {
		"mangle":	"xmlSchemaGetValType",
		"c++":	"xmlSchemaGetValType(xmlSchemaValPtr)",
		"go":	"XmlSchemaGetValType"
	}, {
		"mangle":	"xmlSchemaGetValidErrors",
		"c++":	"xmlSchemaGetValidErrors(xmlSchemaValidCtxtPtr, xmlSchemaValidityErrorFunc *, xmlSchemaValidityWarningFunc *, void **)",
		"go":	"XmlSchemaGetValidErrors"
	}, {
		"mangle":	"xmlSchemaInitTypes",
		"c++":	"xmlSchemaInitTypes()",
		"go":	"XmlSchemaInitTypes"
	}, {
		"mangle":	"xmlSchemaIsBuiltInTypeFacet",
		"c++":	"xmlSchemaIsBuiltInTypeFacet(xmlSchemaTypePtr, int)",
		"go":	"XmlSchemaIsBuiltInTypeFacet"
	}, {
		"mangle":	"xmlSchemaIsValid",
		"c++":	"xmlSchemaIsValid(xmlSchemaValidCtxtPtr)",
		"go":	"XmlSchemaIsValid"
	}, {
		"mangle":	"xmlSchemaNewDocParserCtxt",
		"c++":	"xmlSchemaNewDocParserCtxt(xmlDocPtr)",
		"go":	"XmlSchemaNewDocParserCtxt"
	}, {
		"mangle":	"xmlSchemaNewFacet",
		"c++":	"xmlSchemaNewFacet()",
		"go":	"XmlSchemaNewFacet"
	}, {
		"mangle":	"xmlSchemaNewMemParserCtxt",
		"c++":	"xmlSchemaNewMemParserCtxt(const char *, int)",
		"go":	"XmlSchemaNewMemParserCtxt"
	}, {
		"mangle":	"xmlSchemaNewNOTATIONValue",
		"c++":	"xmlSchemaNewNOTATIONValue(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlSchemaNewNOTATIONValue"
	}, {
		"mangle":	"xmlSchemaNewParserCtxt",
		"c++":	"xmlSchemaNewParserCtxt(const char *)",
		"go":	"XmlSchemaNewParserCtxt"
	}, {
		"mangle":	"xmlSchemaNewQNameValue",
		"c++":	"xmlSchemaNewQNameValue(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlSchemaNewQNameValue"
	}, {
		"mangle":	"xmlSchemaNewStringValue",
		"c++":	"xmlSchemaNewStringValue(xmlSchemaValType, const xmlChar *)",
		"go":	"XmlSchemaValType.XmlSchemaNewStringValue"
	}, {
		"mangle":	"xmlSchemaNewValidCtxt",
		"c++":	"xmlSchemaNewValidCtxt(xmlSchemaPtr)",
		"go":	"XmlSchemaNewValidCtxt"
	}, {
		"mangle":	"xmlSchemaParse",
		"c++":	"xmlSchemaParse(xmlSchemaParserCtxtPtr)",
		"go":	"XmlSchemaParse"
	}, {
		"mangle":	"xmlSchemaSAXPlug",
		"c++":	"xmlSchemaSAXPlug(xmlSchemaValidCtxtPtr, xmlSAXHandlerPtr *, void **)",
		"go":	"XmlSchemaSAXPlug"
	}, {
		"mangle":	"xmlSchemaSAXUnplug",
		"c++":	"xmlSchemaSAXUnplug(xmlSchemaSAXPlugPtr)",
		"go":	"XmlSchemaSAXUnplug"
	}, {
		"mangle":	"xmlSchemaSetParserErrors",
		"c++":	"xmlSchemaSetParserErrors(xmlSchemaParserCtxtPtr, xmlSchemaValidityErrorFunc, xmlSchemaValidityWarningFunc, void *)",
		"go":	"XmlSchemaSetParserErrors"
	}, {
		"mangle":	"xmlSchemaSetParserStructuredErrors",
		"c++":	"xmlSchemaSetParserStructuredErrors(xmlSchemaParserCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlSchemaSetParserStructuredErrors"
	}, {
		"mangle":	"xmlSchemaSetValidErrors",
		"c++":	"xmlSchemaSetValidErrors(xmlSchemaValidCtxtPtr, xmlSchemaValidityErrorFunc, xmlSchemaValidityWarningFunc, void *)",
		"go":	"XmlSchemaSetValidErrors"
	}, {
		"mangle":	"xmlSchemaSetValidOptions",
		"c++":	"xmlSchemaSetValidOptions(xmlSchemaValidCtxtPtr, int)",
		"go":	"XmlSchemaSetValidOptions"
	}, {
		"mangle":	"xmlSchemaSetValidStructuredErrors",
		"c++":	"xmlSchemaSetValidStructuredErrors(xmlSchemaValidCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlSchemaSetValidStructuredErrors"
	}, {
		"mangle":	"xmlSchemaValPredefTypeNode",
		"c++":	"xmlSchemaValPredefTypeNode(xmlSchemaTypePtr, const xmlChar *, xmlSchemaValPtr *, xmlNodePtr)",
		"go":	"XmlSchemaValPredefTypeNode"
	}, {
		"mangle":	"xmlSchemaValPredefTypeNodeNoNorm",
		"c++":	"xmlSchemaValPredefTypeNodeNoNorm(xmlSchemaTypePtr, const xmlChar *, xmlSchemaValPtr *, xmlNodePtr)",
		"go":	"XmlSchemaValPredefTypeNodeNoNorm"
	}, {
		"mangle":	"xmlSchemaValidCtxtGetOptions",
		"c++":	"xmlSchemaValidCtxtGetOptions(xmlSchemaValidCtxtPtr)",
		"go":	"XmlSchemaValidCtxtGetOptions"
	}, {
		"mangle":	"xmlSchemaValidCtxtGetParserCtxt",
		"c++":	"xmlSchemaValidCtxtGetParserCtxt(xmlSchemaValidCtxtPtr)",
		"go":	"XmlSchemaValidCtxtGetParserCtxt"
	}, {
		"mangle":	"xmlSchemaValidateDoc",
		"c++":	"xmlSchemaValidateDoc(xmlSchemaValidCtxtPtr, xmlDocPtr)",
		"go":	"XmlSchemaValidateDoc"
	}, {
		"mangle":	"xmlSchemaValidateFacet",
		"c++":	"xmlSchemaValidateFacet(xmlSchemaTypePtr, xmlSchemaFacetPtr, const xmlChar *, xmlSchemaValPtr)",
		"go":	"XmlSchemaValidateFacet"
	}, {
		"mangle":	"xmlSchemaValidateFacetWhtsp",
		"c++":	"xmlSchemaValidateFacetWhtsp(xmlSchemaFacetPtr, xmlSchemaWhitespaceValueType, xmlSchemaValType, const xmlChar *, xmlSchemaValPtr, xmlSchemaWhitespaceValueType)",
		"go":	"XmlSchemaValidateFacetWhtsp"
	}, {
		"mangle":	"xmlSchemaValidateFile",
		"c++":	"xmlSchemaValidateFile(xmlSchemaValidCtxtPtr, const char *, int)",
		"go":	"XmlSchemaValidateFile"
	}, {
		"mangle":	"xmlSchemaValidateLengthFacet",
		"c++":	"xmlSchemaValidateLengthFacet(xmlSchemaTypePtr, xmlSchemaFacetPtr, const xmlChar *, xmlSchemaValPtr, unsigned long *)",
		"go":	"XmlSchemaValidateLengthFacet"
	}, {
		"mangle":	"xmlSchemaValidateLengthFacetWhtsp",
		"c++":	"xmlSchemaValidateLengthFacetWhtsp(xmlSchemaFacetPtr, xmlSchemaValType, const xmlChar *, xmlSchemaValPtr, unsigned long *, xmlSchemaWhitespaceValueType)",
		"go":	"XmlSchemaValidateLengthFacetWhtsp"
	}, {
		"mangle":	"xmlSchemaValidateListSimpleTypeFacet",
		"c++":	"xmlSchemaValidateListSimpleTypeFacet(xmlSchemaFacetPtr, const xmlChar *, unsigned long, unsigned long *)",
		"go":	"XmlSchemaValidateListSimpleTypeFacet"
	}, {
		"mangle":	"xmlSchemaValidateOneElement",
		"c++":	"xmlSchemaValidateOneElement(xmlSchemaValidCtxtPtr, xmlNodePtr)",
		"go":	"XmlSchemaValidateOneElement"
	}, {
		"mangle":	"xmlSchemaValidatePredefinedType",
		"c++":	"xmlSchemaValidatePredefinedType(xmlSchemaTypePtr, const xmlChar *, xmlSchemaValPtr *)",
		"go":	"XmlSchemaValidatePredefinedType"
	}, {
		"mangle":	"xmlSchemaValidateSetFilename",
		"c++":	"xmlSchemaValidateSetFilename(xmlSchemaValidCtxtPtr, const char *)",
		"go":	"XmlSchemaValidateSetFilename"
	}, {
		"mangle":	"xmlSchemaValidateSetLocator",
		"c++":	"xmlSchemaValidateSetLocator(xmlSchemaValidCtxtPtr, xmlSchemaValidityLocatorFunc, void *)",
		"go":	"XmlSchemaValidateSetLocator"
	}, {
		"mangle":	"xmlSchemaValidateStream",
		"c++":	"xmlSchemaValidateStream(xmlSchemaValidCtxtPtr, xmlParserInputBufferPtr, xmlCharEncoding, xmlSAXHandlerPtr, void *)",
		"go":	"XmlSchemaValidateStream"
	}, {
		"mangle":	"xmlSchemaValueAppend",
		"c++":	"xmlSchemaValueAppend(xmlSchemaValPtr, xmlSchemaValPtr)",
		"go":	"XmlSchemaValueAppend"
	}, {
		"mangle":	"xmlSchemaValueGetAsBoolean",
		"c++":	"xmlSchemaValueGetAsBoolean(xmlSchemaValPtr)",
		"go":	"XmlSchemaValueGetAsBoolean"
	}, {
		"mangle":	"xmlSchemaValueGetAsString",
		"c++":	"xmlSchemaValueGetAsString(xmlSchemaValPtr)",
		"go":	"XmlSchemaValueGetAsString"
	}, {
		"mangle":	"xmlSchemaValueGetNext",
		"c++":	"xmlSchemaValueGetNext(xmlSchemaValPtr)",
		"go":	"XmlSchemaValueGetNext"
	}, {
		"mangle":	"xmlSchemaWhiteSpaceReplace",
		"c++":	"xmlSchemaWhiteSpaceReplace(const xmlChar *)",
		"go":	"(*XmlChar).XmlSchemaWhiteSpaceReplace"
	}, {
		"mangle":	"xmlSchematronFree",
		"c++":	"xmlSchematronFree(xmlSchematronPtr)",
		"go":	"XmlSchematronFree"
	}, {
		"mangle":	"xmlSchematronFreeParserCtxt",
		"c++":	"xmlSchematronFreeParserCtxt(xmlSchematronParserCtxtPtr)",
		"go":	"XmlSchematronFreeParserCtxt"
	}, {
		"mangle":	"xmlSchematronFreeValidCtxt",
		"c++":	"xmlSchematronFreeValidCtxt(xmlSchematronValidCtxtPtr)",
		"go":	"XmlSchematronFreeValidCtxt"
	}, {
		"mangle":	"xmlSchematronNewDocParserCtxt",
		"c++":	"xmlSchematronNewDocParserCtxt(xmlDocPtr)",
		"go":	"XmlSchematronNewDocParserCtxt"
	}, {
		"mangle":	"xmlSchematronNewMemParserCtxt",
		"c++":	"xmlSchematronNewMemParserCtxt(const char *, int)",
		"go":	"XmlSchematronNewMemParserCtxt"
	}, {
		"mangle":	"xmlSchematronNewParserCtxt",
		"c++":	"xmlSchematronNewParserCtxt(const char *)",
		"go":	"XmlSchematronNewParserCtxt"
	}, {
		"mangle":	"xmlSchematronNewValidCtxt",
		"c++":	"xmlSchematronNewValidCtxt(xmlSchematronPtr, int)",
		"go":	"XmlSchematronNewValidCtxt"
	}, {
		"mangle":	"xmlSchematronParse",
		"c++":	"xmlSchematronParse(xmlSchematronParserCtxtPtr)",
		"go":	"XmlSchematronParse"
	}, {
		"mangle":	"xmlSchematronSetValidStructuredErrors",
		"c++":	"xmlSchematronSetValidStructuredErrors(xmlSchematronValidCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlSchematronSetValidStructuredErrors"
	}, {
		"mangle":	"xmlSchematronValidateDoc",
		"c++":	"xmlSchematronValidateDoc(xmlSchematronValidCtxtPtr, xmlDocPtr)",
		"go":	"XmlSchematronValidateDoc"
	}, {
		"mangle":	"xmlSearchNs",
		"c++":	"xmlSearchNs(xmlDocPtr, xmlNodePtr, const xmlChar *)",
		"go":	"XmlSearchNs"
	}, {
		"mangle":	"xmlSearchNsByHref",
		"c++":	"xmlSearchNsByHref(xmlDocPtr, xmlNodePtr, const xmlChar *)",
		"go":	"XmlSearchNsByHref"
	}, {
		"mangle":	"xmlSetBufferAllocationScheme",
		"c++":	"xmlSetBufferAllocationScheme(xmlBufferAllocationScheme)",
		"go":	"XmlBufferAllocationScheme.XmlSetBufferAllocationScheme"
	}, {
		"mangle":	"xmlSetCompressMode",
		"c++":	"xmlSetCompressMode(int)",
		"go":	"XmlSetCompressMode"
	}, {
		"mangle":	"xmlSetDocCompressMode",
		"c++":	"xmlSetDocCompressMode(xmlDocPtr, int)",
		"go":	"XmlSetDocCompressMode"
	}, {
		"mangle":	"xmlSetEntityReferenceFunc",
		"c++":	"xmlSetEntityReferenceFunc(xmlEntityReferenceFunc)",
		"go":	"XmlSetEntityReferenceFunc"
	}, {
		"mangle":	"xmlSetExternalEntityLoader",
		"c++":	"xmlSetExternalEntityLoader(xmlExternalEntityLoader)",
		"go":	"XmlSetExternalEntityLoader"
	}, {
		"mangle":	"xmlSetFeature",
		"c++":	"xmlSetFeature(xmlParserCtxtPtr, const char *, void *)",
		"go":	"XmlSetFeature"
	}, {
		"mangle":	"xmlSetGenericErrorFunc",
		"c++":	"xmlSetGenericErrorFunc(void *, xmlGenericErrorFunc)",
		"go":	"XmlSetGenericErrorFunc"
	}, {
		"mangle":	"xmlSetListDoc",
		"c++":	"xmlSetListDoc(xmlNodePtr, xmlDocPtr)",
		"go":	"XmlSetListDoc"
	}, {
		"mangle":	"xmlSetNs",
		"c++":	"xmlSetNs(xmlNodePtr, xmlNsPtr)",
		"go":	"XmlSetNs"
	}, {
		"mangle":	"xmlSetNsProp",
		"c++":	"xmlSetNsProp(xmlNodePtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlSetNsProp"
	}, {
		"mangle":	"xmlSetProp",
		"c++":	"xmlSetProp(xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlSetProp"
	}, {
		"mangle":	"xmlSetStructuredErrorFunc",
		"c++":	"xmlSetStructuredErrorFunc(void *, xmlStructuredErrorFunc)",
		"go":	"XmlSetStructuredErrorFunc"
	}, {
		"mangle":	"xmlSetTreeDoc",
		"c++":	"xmlSetTreeDoc(xmlNodePtr, xmlDocPtr)",
		"go":	"XmlSetTreeDoc"
	}, {
		"mangle":	"xmlSetupParserForBuffer",
		"c++":	"xmlSetupParserForBuffer(xmlParserCtxtPtr, const xmlChar *, const char *)",
		"go":	"XmlSetupParserForBuffer"
	}, {
		"mangle":	"xmlShell",
		"c++":	"xmlShell(xmlDocPtr, const char *, xmlShellReadlineFunc, FILE *)",
		"go":	"XmlShell"
	}, {
		"mangle":	"xmlShellBase",
		"c++":	"xmlShellBase(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellBase"
	}, {
		"mangle":	"xmlShellCat",
		"c++":	"xmlShellCat(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellCat"
	}, {
		"mangle":	"xmlShellDir",
		"c++":	"xmlShellDir(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellDir"
	}, {
		"mangle":	"xmlShellDu",
		"c++":	"xmlShellDu(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellDu"
	}, {
		"mangle":	"xmlShellList",
		"c++":	"xmlShellList(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellList"
	}, {
		"mangle":	"xmlShellLoad",
		"c++":	"xmlShellLoad(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellLoad"
	}, {
		"mangle":	"xmlShellPrintNode",
		"c++":	"xmlShellPrintNode(xmlNodePtr)",
		"go":	"XmlShellPrintNode"
	}, {
		"mangle":	"xmlShellPrintXPathError",
		"c++":	"xmlShellPrintXPathError(int, const char *)",
		"go":	"XmlShellPrintXPathError"
	}, {
		"mangle":	"xmlShellPrintXPathResult",
		"c++":	"xmlShellPrintXPathResult(xmlXPathObjectPtr)",
		"go":	"XmlShellPrintXPathResult"
	}, {
		"mangle":	"xmlShellPwd",
		"c++":	"xmlShellPwd(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellPwd"
	}, {
		"mangle":	"xmlShellSave",
		"c++":	"xmlShellSave(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellSave"
	}, {
		"mangle":	"xmlShellValidate",
		"c++":	"xmlShellValidate(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellValidate"
	}, {
		"mangle":	"xmlShellWrite",
		"c++":	"xmlShellWrite(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlShellWrite"
	}, {
		"mangle":	"xmlSkipBlankChars",
		"c++":	"xmlSkipBlankChars(xmlParserCtxtPtr)",
		"go":	"XmlSkipBlankChars"
	}, {
		"mangle":	"xmlSnprintfElementContent",
		"c++":	"xmlSnprintfElementContent(char *, int, xmlElementContentPtr, int)",
		"go":	"XmlSnprintfElementContent"
	}, {
		"mangle":	"xmlSplitQName",
		"c++":	"xmlSplitQName(xmlParserCtxtPtr, const xmlChar *, xmlChar **)",
		"go":	"XmlSplitQName"
	}, {
		"mangle":	"xmlSplitQName2",
		"c++":	"xmlSplitQName2(const xmlChar *, xmlChar **)",
		"go":	"(*XmlChar).XmlSplitQName2"
	}, {
		"mangle":	"xmlSplitQName3",
		"c++":	"xmlSplitQName3(const xmlChar *, int *)",
		"go":	"(*XmlChar).XmlSplitQName3"
	}, {
		"mangle":	"xmlSprintfElementContent",
		"c++":	"xmlSprintfElementContent(char *, xmlElementContentPtr, int)",
		"go":	"XmlSprintfElementContent"
	}, {
		"mangle":	"xmlStopParser",
		"c++":	"xmlStopParser(xmlParserCtxtPtr)",
		"go":	"XmlStopParser"
	}, {
		"mangle":	"xmlStrEqual",
		"c++":	"xmlStrEqual(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlStrEqual"
	}, {
		"mangle":	"xmlStrPrintf",
		"c++":	"xmlStrPrintf(xmlChar *, int, const char *, ...)",
		"go":	"(*XmlChar).XmlStrPrintf"
	}, {
		"mangle":	"xmlStrQEqual",
		"c++":	"xmlStrQEqual(const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlStrQEqual"
	}, {
		"mangle":	"xmlStrVPrintf",
		"c++":	"xmlStrVPrintf(xmlChar *, int, const char *, struct __va_list_tag *)",
		"go":	"(*XmlChar).XmlStrVPrintf"
	}, {
		"mangle":	"xmlStrcasecmp",
		"c++":	"xmlStrcasecmp(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlStrcasecmp"
	}, {
		"mangle":	"xmlStrcasestr",
		"c++":	"xmlStrcasestr(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlStrcasestr"
	}, {
		"mangle":	"xmlStrcat",
		"c++":	"xmlStrcat(xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlStrcat"
	}, {
		"mangle":	"xmlStrchr",
		"c++":	"xmlStrchr(const xmlChar *, xmlChar)",
		"go":	"(*XmlChar).XmlStrchr"
	}, {
		"mangle":	"xmlStrcmp",
		"c++":	"xmlStrcmp(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlStrcmp"
	}, {
		"mangle":	"xmlStrdup",
		"c++":	"xmlStrdup(const xmlChar *)",
		"go":	"(*XmlChar).XmlStrdup"
	}, {
		"mangle":	"xmlStreamPop",
		"c++":	"xmlStreamPop(xmlStreamCtxtPtr)",
		"go":	"XmlStreamPop"
	}, {
		"mangle":	"xmlStreamPush",
		"c++":	"xmlStreamPush(xmlStreamCtxtPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlStreamPush"
	}, {
		"mangle":	"xmlStreamPushAttr",
		"c++":	"xmlStreamPushAttr(xmlStreamCtxtPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlStreamPushAttr"
	}, {
		"mangle":	"xmlStreamPushNode",
		"c++":	"xmlStreamPushNode(xmlStreamCtxtPtr, const xmlChar *, const xmlChar *, int)",
		"go":	"XmlStreamPushNode"
	}, {
		"mangle":	"xmlStreamWantsAnyNode",
		"c++":	"xmlStreamWantsAnyNode(xmlStreamCtxtPtr)",
		"go":	"XmlStreamWantsAnyNode"
	}, {
		"mangle":	"xmlStringCurrentChar",
		"c++":	"xmlStringCurrentChar(xmlParserCtxtPtr, const xmlChar *, int *)",
		"go":	"XmlStringCurrentChar"
	}, {
		"mangle":	"xmlStringDecodeEntities",
		"c++":	"xmlStringDecodeEntities(xmlParserCtxtPtr, const xmlChar *, int, xmlChar, xmlChar, xmlChar)",
		"go":	"XmlStringDecodeEntities"
	}, {
		"mangle":	"xmlStringGetNodeList",
		"c++":	"xmlStringGetNodeList(const xmlDoc *, const xmlChar *)",
		"go":	"(*XmlDoc).XmlStringGetNodeList"
	}, {
		"mangle":	"xmlStringLenDecodeEntities",
		"c++":	"xmlStringLenDecodeEntities(xmlParserCtxtPtr, const xmlChar *, int, int, xmlChar, xmlChar, xmlChar)",
		"go":	"XmlStringLenDecodeEntities"
	}, {
		"mangle":	"xmlStringLenGetNodeList",
		"c++":	"xmlStringLenGetNodeList(const xmlDoc *, const xmlChar *, int)",
		"go":	"(*XmlDoc).XmlStringLenGetNodeList"
	}, {
		"mangle":	"xmlStrlen",
		"c++":	"xmlStrlen(const xmlChar *)",
		"go":	"(*XmlChar).XmlStrlen"
	}, {
		"mangle":	"xmlStrncasecmp",
		"c++":	"xmlStrncasecmp(const xmlChar *, const xmlChar *, int)",
		"go":	"(*XmlChar).XmlStrncasecmp"
	}, {
		"mangle":	"xmlStrncat",
		"c++":	"xmlStrncat(xmlChar *, const xmlChar *, int)",
		"go":	"(*XmlChar).XmlStrncat"
	}, {
		"mangle":	"xmlStrncatNew",
		"c++":	"xmlStrncatNew(const xmlChar *, const xmlChar *, int)",
		"go":	"(*XmlChar).XmlStrncatNew"
	}, {
		"mangle":	"xmlStrncmp",
		"c++":	"xmlStrncmp(const xmlChar *, const xmlChar *, int)",
		"go":	"(*XmlChar).XmlStrncmp"
	}, {
		"mangle":	"xmlStrndup",
		"c++":	"xmlStrndup(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlStrndup"
	}, {
		"mangle":	"xmlStrstr",
		"c++":	"xmlStrstr(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlStrstr"
	}, {
		"mangle":	"xmlStrsub",
		"c++":	"xmlStrsub(const xmlChar *, int, int)",
		"go":	"(*XmlChar).XmlStrsub"
	}, {
		"mangle":	"xmlSubstituteEntitiesDefault",
		"c++":	"xmlSubstituteEntitiesDefault(int)",
		"go":	"XmlSubstituteEntitiesDefault"
	}, {
		"mangle":	"xmlSwitchEncoding",
		"c++":	"xmlSwitchEncoding(xmlParserCtxtPtr, xmlCharEncoding)",
		"go":	"XmlSwitchEncoding"
	}, {
		"mangle":	"xmlSwitchEncodingName",
		"c++":	"xmlSwitchEncodingName(xmlParserCtxtPtr, const char *)",
		"go":	"XmlSwitchEncodingName"
	}, {
		"mangle":	"xmlSwitchInputEncoding",
		"c++":	"xmlSwitchInputEncoding(xmlParserCtxtPtr, xmlParserInputPtr, xmlCharEncodingHandlerPtr)",
		"go":	"XmlSwitchInputEncoding"
	}, {
		"mangle":	"xmlSwitchToEncoding",
		"c++":	"xmlSwitchToEncoding(xmlParserCtxtPtr, xmlCharEncodingHandlerPtr)",
		"go":	"XmlSwitchToEncoding"
	}, {
		"mangle":	"xmlTextConcat",
		"c++":	"xmlTextConcat(xmlNodePtr, const xmlChar *, int)",
		"go":	"XmlTextConcat"
	}, {
		"mangle":	"xmlTextMerge",
		"c++":	"xmlTextMerge(xmlNodePtr, xmlNodePtr)",
		"go":	"XmlTextMerge"
	}, {
		"mangle":	"xmlTextReaderAttributeCount",
		"c++":	"xmlTextReaderAttributeCount(xmlTextReaderPtr)",
		"go":	"XmlTextReaderAttributeCount"
	}, {
		"mangle":	"xmlTextReaderBaseUri",
		"c++":	"xmlTextReaderBaseUri(xmlTextReaderPtr)",
		"go":	"XmlTextReaderBaseUri"
	}, {
		"mangle":	"xmlTextReaderByteConsumed",
		"c++":	"xmlTextReaderByteConsumed(xmlTextReaderPtr)",
		"go":	"XmlTextReaderByteConsumed"
	}, {
		"mangle":	"xmlTextReaderClose",
		"c++":	"xmlTextReaderClose(xmlTextReaderPtr)",
		"go":	"XmlTextReaderClose"
	}, {
		"mangle":	"xmlTextReaderConstBaseUri",
		"c++":	"xmlTextReaderConstBaseUri(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstBaseUri"
	}, {
		"mangle":	"xmlTextReaderConstEncoding",
		"c++":	"xmlTextReaderConstEncoding(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstEncoding"
	}, {
		"mangle":	"xmlTextReaderConstLocalName",
		"c++":	"xmlTextReaderConstLocalName(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstLocalName"
	}, {
		"mangle":	"xmlTextReaderConstName",
		"c++":	"xmlTextReaderConstName(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstName"
	}, {
		"mangle":	"xmlTextReaderConstNamespaceUri",
		"c++":	"xmlTextReaderConstNamespaceUri(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstNamespaceUri"
	}, {
		"mangle":	"xmlTextReaderConstPrefix",
		"c++":	"xmlTextReaderConstPrefix(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstPrefix"
	}, {
		"mangle":	"xmlTextReaderConstString",
		"c++":	"xmlTextReaderConstString(xmlTextReaderPtr, const xmlChar *)",
		"go":	"XmlTextReaderConstString"
	}, {
		"mangle":	"xmlTextReaderConstValue",
		"c++":	"xmlTextReaderConstValue(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstValue"
	}, {
		"mangle":	"xmlTextReaderConstXmlLang",
		"c++":	"xmlTextReaderConstXmlLang(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstXmlLang"
	}, {
		"mangle":	"xmlTextReaderConstXmlVersion",
		"c++":	"xmlTextReaderConstXmlVersion(xmlTextReaderPtr)",
		"go":	"XmlTextReaderConstXmlVersion"
	}, {
		"mangle":	"xmlTextReaderCurrentDoc",
		"c++":	"xmlTextReaderCurrentDoc(xmlTextReaderPtr)",
		"go":	"XmlTextReaderCurrentDoc"
	}, {
		"mangle":	"xmlTextReaderCurrentNode",
		"c++":	"xmlTextReaderCurrentNode(xmlTextReaderPtr)",
		"go":	"XmlTextReaderCurrentNode"
	}, {
		"mangle":	"xmlTextReaderDepth",
		"c++":	"xmlTextReaderDepth(xmlTextReaderPtr)",
		"go":	"XmlTextReaderDepth"
	}, {
		"mangle":	"xmlTextReaderExpand",
		"c++":	"xmlTextReaderExpand(xmlTextReaderPtr)",
		"go":	"XmlTextReaderExpand"
	}, {
		"mangle":	"xmlTextReaderGetAttribute",
		"c++":	"xmlTextReaderGetAttribute(xmlTextReaderPtr, const xmlChar *)",
		"go":	"XmlTextReaderGetAttribute"
	}, {
		"mangle":	"xmlTextReaderGetAttributeNo",
		"c++":	"xmlTextReaderGetAttributeNo(xmlTextReaderPtr, int)",
		"go":	"XmlTextReaderGetAttributeNo"
	}, {
		"mangle":	"xmlTextReaderGetAttributeNs",
		"c++":	"xmlTextReaderGetAttributeNs(xmlTextReaderPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextReaderGetAttributeNs"
	}, {
		"mangle":	"xmlTextReaderGetErrorHandler",
		"c++":	"xmlTextReaderGetErrorHandler(xmlTextReaderPtr, xmlTextReaderErrorFunc *, void **)",
		"go":	"XmlTextReaderGetErrorHandler"
	}, {
		"mangle":	"xmlTextReaderGetLastError",
		"c++":	"xmlTextReaderGetLastError(xmlTextReaderPtr)",
		"go":	"XmlTextReaderGetLastError"
	}, {
		"mangle":	"xmlTextReaderGetParserColumnNumber",
		"c++":	"xmlTextReaderGetParserColumnNumber(xmlTextReaderPtr)",
		"go":	"XmlTextReaderGetParserColumnNumber"
	}, {
		"mangle":	"xmlTextReaderGetParserLineNumber",
		"c++":	"xmlTextReaderGetParserLineNumber(xmlTextReaderPtr)",
		"go":	"XmlTextReaderGetParserLineNumber"
	}, {
		"mangle":	"xmlTextReaderGetParserProp",
		"c++":	"xmlTextReaderGetParserProp(xmlTextReaderPtr, int)",
		"go":	"XmlTextReaderGetParserProp"
	}, {
		"mangle":	"xmlTextReaderGetRemainder",
		"c++":	"xmlTextReaderGetRemainder(xmlTextReaderPtr)",
		"go":	"XmlTextReaderGetRemainder"
	}, {
		"mangle":	"xmlTextReaderHasAttributes",
		"c++":	"xmlTextReaderHasAttributes(xmlTextReaderPtr)",
		"go":	"XmlTextReaderHasAttributes"
	}, {
		"mangle":	"xmlTextReaderHasValue",
		"c++":	"xmlTextReaderHasValue(xmlTextReaderPtr)",
		"go":	"XmlTextReaderHasValue"
	}, {
		"mangle":	"xmlTextReaderIsDefault",
		"c++":	"xmlTextReaderIsDefault(xmlTextReaderPtr)",
		"go":	"XmlTextReaderIsDefault"
	}, {
		"mangle":	"xmlTextReaderIsEmptyElement",
		"c++":	"xmlTextReaderIsEmptyElement(xmlTextReaderPtr)",
		"go":	"XmlTextReaderIsEmptyElement"
	}, {
		"mangle":	"xmlTextReaderIsNamespaceDecl",
		"c++":	"xmlTextReaderIsNamespaceDecl(xmlTextReaderPtr)",
		"go":	"XmlTextReaderIsNamespaceDecl"
	}, {
		"mangle":	"xmlTextReaderIsValid",
		"c++":	"xmlTextReaderIsValid(xmlTextReaderPtr)",
		"go":	"XmlTextReaderIsValid"
	}, {
		"mangle":	"xmlTextReaderLocalName",
		"c++":	"xmlTextReaderLocalName(xmlTextReaderPtr)",
		"go":	"XmlTextReaderLocalName"
	}, {
		"mangle":	"xmlTextReaderLocatorBaseURI",
		"c++":	"xmlTextReaderLocatorBaseURI(xmlTextReaderLocatorPtr)",
		"go":	"XmlTextReaderLocatorBaseURI"
	}, {
		"mangle":	"xmlTextReaderLocatorLineNumber",
		"c++":	"xmlTextReaderLocatorLineNumber(xmlTextReaderLocatorPtr)",
		"go":	"XmlTextReaderLocatorLineNumber"
	}, {
		"mangle":	"xmlTextReaderLookupNamespace",
		"c++":	"xmlTextReaderLookupNamespace(xmlTextReaderPtr, const xmlChar *)",
		"go":	"XmlTextReaderLookupNamespace"
	}, {
		"mangle":	"xmlTextReaderMoveToAttribute",
		"c++":	"xmlTextReaderMoveToAttribute(xmlTextReaderPtr, const xmlChar *)",
		"go":	"XmlTextReaderMoveToAttribute"
	}, {
		"mangle":	"xmlTextReaderMoveToAttributeNo",
		"c++":	"xmlTextReaderMoveToAttributeNo(xmlTextReaderPtr, int)",
		"go":	"XmlTextReaderMoveToAttributeNo"
	}, {
		"mangle":	"xmlTextReaderMoveToAttributeNs",
		"c++":	"xmlTextReaderMoveToAttributeNs(xmlTextReaderPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextReaderMoveToAttributeNs"
	}, {
		"mangle":	"xmlTextReaderMoveToElement",
		"c++":	"xmlTextReaderMoveToElement(xmlTextReaderPtr)",
		"go":	"XmlTextReaderMoveToElement"
	}, {
		"mangle":	"xmlTextReaderMoveToFirstAttribute",
		"c++":	"xmlTextReaderMoveToFirstAttribute(xmlTextReaderPtr)",
		"go":	"XmlTextReaderMoveToFirstAttribute"
	}, {
		"mangle":	"xmlTextReaderMoveToNextAttribute",
		"c++":	"xmlTextReaderMoveToNextAttribute(xmlTextReaderPtr)",
		"go":	"XmlTextReaderMoveToNextAttribute"
	}, {
		"mangle":	"xmlTextReaderName",
		"c++":	"xmlTextReaderName(xmlTextReaderPtr)",
		"go":	"XmlTextReaderName"
	}, {
		"mangle":	"xmlTextReaderNamespaceUri",
		"c++":	"xmlTextReaderNamespaceUri(xmlTextReaderPtr)",
		"go":	"XmlTextReaderNamespaceUri"
	}, {
		"mangle":	"xmlTextReaderNext",
		"c++":	"xmlTextReaderNext(xmlTextReaderPtr)",
		"go":	"XmlTextReaderNext"
	}, {
		"mangle":	"xmlTextReaderNextSibling",
		"c++":	"xmlTextReaderNextSibling(xmlTextReaderPtr)",
		"go":	"XmlTextReaderNextSibling"
	}, {
		"mangle":	"xmlTextReaderNodeType",
		"c++":	"xmlTextReaderNodeType(xmlTextReaderPtr)",
		"go":	"XmlTextReaderNodeType"
	}, {
		"mangle":	"xmlTextReaderNormalization",
		"c++":	"xmlTextReaderNormalization(xmlTextReaderPtr)",
		"go":	"XmlTextReaderNormalization"
	}, {
		"mangle":	"xmlTextReaderPrefix",
		"c++":	"xmlTextReaderPrefix(xmlTextReaderPtr)",
		"go":	"XmlTextReaderPrefix"
	}, {
		"mangle":	"xmlTextReaderPreserve",
		"c++":	"xmlTextReaderPreserve(xmlTextReaderPtr)",
		"go":	"XmlTextReaderPreserve"
	}, {
		"mangle":	"xmlTextReaderPreservePattern",
		"c++":	"xmlTextReaderPreservePattern(xmlTextReaderPtr, const xmlChar *, const xmlChar **)",
		"go":	"XmlTextReaderPreservePattern"
	}, {
		"mangle":	"xmlTextReaderQuoteChar",
		"c++":	"xmlTextReaderQuoteChar(xmlTextReaderPtr)",
		"go":	"XmlTextReaderQuoteChar"
	}, {
		"mangle":	"xmlTextReaderRead",
		"c++":	"xmlTextReaderRead(xmlTextReaderPtr)",
		"go":	"XmlTextReaderRead"
	}, {
		"mangle":	"xmlTextReaderReadAttributeValue",
		"c++":	"xmlTextReaderReadAttributeValue(xmlTextReaderPtr)",
		"go":	"XmlTextReaderReadAttributeValue"
	}, {
		"mangle":	"xmlTextReaderReadInnerXml",
		"c++":	"xmlTextReaderReadInnerXml(xmlTextReaderPtr)",
		"go":	"XmlTextReaderReadInnerXml"
	}, {
		"mangle":	"xmlTextReaderReadOuterXml",
		"c++":	"xmlTextReaderReadOuterXml(xmlTextReaderPtr)",
		"go":	"XmlTextReaderReadOuterXml"
	}, {
		"mangle":	"xmlTextReaderReadState",
		"c++":	"xmlTextReaderReadState(xmlTextReaderPtr)",
		"go":	"XmlTextReaderReadState"
	}, {
		"mangle":	"xmlTextReaderReadString",
		"c++":	"xmlTextReaderReadString(xmlTextReaderPtr)",
		"go":	"XmlTextReaderReadString"
	}, {
		"mangle":	"xmlTextReaderRelaxNGSetSchema",
		"c++":	"xmlTextReaderRelaxNGSetSchema(xmlTextReaderPtr, xmlRelaxNGPtr)",
		"go":	"XmlTextReaderRelaxNGSetSchema"
	}, {
		"mangle":	"xmlTextReaderRelaxNGValidate",
		"c++":	"xmlTextReaderRelaxNGValidate(xmlTextReaderPtr, const char *)",
		"go":	"XmlTextReaderRelaxNGValidate"
	}, {
		"mangle":	"xmlTextReaderRelaxNGValidateCtxt",
		"c++":	"xmlTextReaderRelaxNGValidateCtxt(xmlTextReaderPtr, xmlRelaxNGValidCtxtPtr, int)",
		"go":	"XmlTextReaderRelaxNGValidateCtxt"
	}, {
		"mangle":	"xmlTextReaderSchemaValidate",
		"c++":	"xmlTextReaderSchemaValidate(xmlTextReaderPtr, const char *)",
		"go":	"XmlTextReaderSchemaValidate"
	}, {
		"mangle":	"xmlTextReaderSchemaValidateCtxt",
		"c++":	"xmlTextReaderSchemaValidateCtxt(xmlTextReaderPtr, xmlSchemaValidCtxtPtr, int)",
		"go":	"XmlTextReaderSchemaValidateCtxt"
	}, {
		"mangle":	"xmlTextReaderSetErrorHandler",
		"c++":	"xmlTextReaderSetErrorHandler(xmlTextReaderPtr, xmlTextReaderErrorFunc, void *)",
		"go":	"XmlTextReaderSetErrorHandler"
	}, {
		"mangle":	"xmlTextReaderSetMaxAmplification",
		"c++":	"xmlTextReaderSetMaxAmplification(xmlTextReaderPtr, unsigned int)",
		"go":	"XmlTextReaderSetMaxAmplification"
	}, {
		"mangle":	"xmlTextReaderSetParserProp",
		"c++":	"xmlTextReaderSetParserProp(xmlTextReaderPtr, int, int)",
		"go":	"XmlTextReaderSetParserProp"
	}, {
		"mangle":	"xmlTextReaderSetSchema",
		"c++":	"xmlTextReaderSetSchema(xmlTextReaderPtr, xmlSchemaPtr)",
		"go":	"XmlTextReaderSetSchema"
	}, {
		"mangle":	"xmlTextReaderSetStructuredErrorHandler",
		"c++":	"xmlTextReaderSetStructuredErrorHandler(xmlTextReaderPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlTextReaderSetStructuredErrorHandler"
	}, {
		"mangle":	"xmlTextReaderSetup",
		"c++":	"xmlTextReaderSetup(xmlTextReaderPtr, xmlParserInputBufferPtr, const char *, const char *, int)",
		"go":	"XmlTextReaderSetup"
	}, {
		"mangle":	"xmlTextReaderStandalone",
		"c++":	"xmlTextReaderStandalone(xmlTextReaderPtr)",
		"go":	"XmlTextReaderStandalone"
	}, {
		"mangle":	"xmlTextReaderValue",
		"c++":	"xmlTextReaderValue(xmlTextReaderPtr)",
		"go":	"XmlTextReaderValue"
	}, {
		"mangle":	"xmlTextReaderXmlLang",
		"c++":	"xmlTextReaderXmlLang(xmlTextReaderPtr)",
		"go":	"XmlTextReaderXmlLang"
	}, {
		"mangle":	"xmlTextWriterClose",
		"c++":	"xmlTextWriterClose(xmlTextWriterPtr)",
		"go":	"XmlTextWriterClose"
	}, {
		"mangle":	"xmlTextWriterEndAttribute",
		"c++":	"xmlTextWriterEndAttribute(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndAttribute"
	}, {
		"mangle":	"xmlTextWriterEndCDATA",
		"c++":	"xmlTextWriterEndCDATA(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndCDATA"
	}, {
		"mangle":	"xmlTextWriterEndComment",
		"c++":	"xmlTextWriterEndComment(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndComment"
	}, {
		"mangle":	"xmlTextWriterEndDTD",
		"c++":	"xmlTextWriterEndDTD(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndDTD"
	}, {
		"mangle":	"xmlTextWriterEndDTDAttlist",
		"c++":	"xmlTextWriterEndDTDAttlist(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterEndDTDElement",
		"c++":	"xmlTextWriterEndDTDElement(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndDTDElement"
	}, {
		"mangle":	"xmlTextWriterEndDTDEntity",
		"c++":	"xmlTextWriterEndDTDEntity(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndDTDEntity"
	}, {
		"mangle":	"xmlTextWriterEndDocument",
		"c++":	"xmlTextWriterEndDocument(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndDocument"
	}, {
		"mangle":	"xmlTextWriterEndElement",
		"c++":	"xmlTextWriterEndElement(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndElement"
	}, {
		"mangle":	"xmlTextWriterEndPI",
		"c++":	"xmlTextWriterEndPI(xmlTextWriterPtr)",
		"go":	"XmlTextWriterEndPI"
	}, {
		"mangle":	"xmlTextWriterFlush",
		"c++":	"xmlTextWriterFlush(xmlTextWriterPtr)",
		"go":	"XmlTextWriterFlush"
	}, {
		"mangle":	"xmlTextWriterFullEndElement",
		"c++":	"xmlTextWriterFullEndElement(xmlTextWriterPtr)",
		"go":	"XmlTextWriterFullEndElement"
	}, {
		"mangle":	"xmlTextWriterSetIndent",
		"c++":	"xmlTextWriterSetIndent(xmlTextWriterPtr, int)",
		"go":	"XmlTextWriterSetIndent"
	}, {
		"mangle":	"xmlTextWriterSetIndentString",
		"c++":	"xmlTextWriterSetIndentString(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterSetIndentString"
	}, {
		"mangle":	"xmlTextWriterSetQuoteChar",
		"c++":	"xmlTextWriterSetQuoteChar(xmlTextWriterPtr, xmlChar)",
		"go":	"XmlTextWriterSetQuoteChar"
	}, {
		"mangle":	"xmlTextWriterStartAttribute",
		"c++":	"xmlTextWriterStartAttribute(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterStartAttribute"
	}, {
		"mangle":	"xmlTextWriterStartAttributeNS",
		"c++":	"xmlTextWriterStartAttributeNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterStartAttributeNS"
	}, {
		"mangle":	"xmlTextWriterStartCDATA",
		"c++":	"xmlTextWriterStartCDATA(xmlTextWriterPtr)",
		"go":	"XmlTextWriterStartCDATA"
	}, {
		"mangle":	"xmlTextWriterStartComment",
		"c++":	"xmlTextWriterStartComment(xmlTextWriterPtr)",
		"go":	"XmlTextWriterStartComment"
	}, {
		"mangle":	"xmlTextWriterStartDTD",
		"c++":	"xmlTextWriterStartDTD(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterStartDTD"
	}, {
		"mangle":	"xmlTextWriterStartDTDAttlist",
		"c++":	"xmlTextWriterStartDTDAttlist(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterStartDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterStartDTDElement",
		"c++":	"xmlTextWriterStartDTDElement(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterStartDTDElement"
	}, {
		"mangle":	"xmlTextWriterStartDTDEntity",
		"c++":	"xmlTextWriterStartDTDEntity(xmlTextWriterPtr, int, const xmlChar *)",
		"go":	"XmlTextWriterStartDTDEntity"
	}, {
		"mangle":	"xmlTextWriterStartDocument",
		"c++":	"xmlTextWriterStartDocument(xmlTextWriterPtr, const char *, const char *, const char *)",
		"go":	"XmlTextWriterStartDocument"
	}, {
		"mangle":	"xmlTextWriterStartElement",
		"c++":	"xmlTextWriterStartElement(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterStartElement"
	}, {
		"mangle":	"xmlTextWriterStartElementNS",
		"c++":	"xmlTextWriterStartElementNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterStartElementNS"
	}, {
		"mangle":	"xmlTextWriterStartPI",
		"c++":	"xmlTextWriterStartPI(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterStartPI"
	}, {
		"mangle":	"xmlTextWriterWriteAttribute",
		"c++":	"xmlTextWriterWriteAttribute(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteAttribute"
	}, {
		"mangle":	"xmlTextWriterWriteAttributeNS",
		"c++":	"xmlTextWriterWriteAttributeNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteAttributeNS"
	}, {
		"mangle":	"xmlTextWriterWriteBase64",
		"c++":	"xmlTextWriterWriteBase64(xmlTextWriterPtr, const char *, int, int)",
		"go":	"XmlTextWriterWriteBase64"
	}, {
		"mangle":	"xmlTextWriterWriteBinHex",
		"c++":	"xmlTextWriterWriteBinHex(xmlTextWriterPtr, const char *, int, int)",
		"go":	"XmlTextWriterWriteBinHex"
	}, {
		"mangle":	"xmlTextWriterWriteCDATA",
		"c++":	"xmlTextWriterWriteCDATA(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterWriteCDATA"
	}, {
		"mangle":	"xmlTextWriterWriteComment",
		"c++":	"xmlTextWriterWriteComment(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterWriteComment"
	}, {
		"mangle":	"xmlTextWriterWriteDTD",
		"c++":	"xmlTextWriterWriteDTD(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteDTD"
	}, {
		"mangle":	"xmlTextWriterWriteDTDAttlist",
		"c++":	"xmlTextWriterWriteDTDAttlist(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterWriteDTDElement",
		"c++":	"xmlTextWriterWriteDTDElement(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteDTDElement"
	}, {
		"mangle":	"xmlTextWriterWriteDTDEntity",
		"c++":	"xmlTextWriterWriteDTDEntity(xmlTextWriterPtr, int, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteDTDEntity"
	}, {
		"mangle":	"xmlTextWriterWriteDTDExternalEntity",
		"c++":	"xmlTextWriterWriteDTDExternalEntity(xmlTextWriterPtr, int, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteDTDExternalEntity"
	}, {
		"mangle":	"xmlTextWriterWriteDTDExternalEntityContents",
		"c++":	"xmlTextWriterWriteDTDExternalEntityContents(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteDTDExternalEntityContents"
	}, {
		"mangle":	"xmlTextWriterWriteDTDInternalEntity",
		"c++":	"xmlTextWriterWriteDTDInternalEntity(xmlTextWriterPtr, int, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteDTDInternalEntity"
	}, {
		"mangle":	"xmlTextWriterWriteDTDNotation",
		"c++":	"xmlTextWriterWriteDTDNotation(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteDTDNotation"
	}, {
		"mangle":	"xmlTextWriterWriteElement",
		"c++":	"xmlTextWriterWriteElement(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteElement"
	}, {
		"mangle":	"xmlTextWriterWriteElementNS",
		"c++":	"xmlTextWriterWriteElementNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWriteElementNS"
	}, {
		"mangle":	"xmlTextWriterWriteFormatAttribute",
		"c++":	"xmlTextWriterWriteFormatAttribute(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatAttribute"
	}, {
		"mangle":	"xmlTextWriterWriteFormatAttributeNS",
		"c++":	"xmlTextWriterWriteFormatAttributeNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatAttributeNS"
	}, {
		"mangle":	"xmlTextWriterWriteFormatCDATA",
		"c++":	"xmlTextWriterWriteFormatCDATA(xmlTextWriterPtr, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatCDATA"
	}, {
		"mangle":	"xmlTextWriterWriteFormatComment",
		"c++":	"xmlTextWriterWriteFormatComment(xmlTextWriterPtr, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatComment"
	}, {
		"mangle":	"xmlTextWriterWriteFormatDTD",
		"c++":	"xmlTextWriterWriteFormatDTD(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatDTD"
	}, {
		"mangle":	"xmlTextWriterWriteFormatDTDAttlist",
		"c++":	"xmlTextWriterWriteFormatDTDAttlist(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterWriteFormatDTDElement",
		"c++":	"xmlTextWriterWriteFormatDTDElement(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatDTDElement"
	}, {
		"mangle":	"xmlTextWriterWriteFormatDTDInternalEntity",
		"c++":	"xmlTextWriterWriteFormatDTDInternalEntity(xmlTextWriterPtr, int, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatDTDInternalEntity"
	}, {
		"mangle":	"xmlTextWriterWriteFormatElement",
		"c++":	"xmlTextWriterWriteFormatElement(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatElement"
	}, {
		"mangle":	"xmlTextWriterWriteFormatElementNS",
		"c++":	"xmlTextWriterWriteFormatElementNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatElementNS"
	}, {
		"mangle":	"xmlTextWriterWriteFormatPI",
		"c++":	"xmlTextWriterWriteFormatPI(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatPI"
	}, {
		"mangle":	"xmlTextWriterWriteFormatRaw",
		"c++":	"xmlTextWriterWriteFormatRaw(xmlTextWriterPtr, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatRaw"
	}, {
		"mangle":	"xmlTextWriterWriteFormatString",
		"c++":	"xmlTextWriterWriteFormatString(xmlTextWriterPtr, const char *, ...)",
		"go":	"XmlTextWriterWriteFormatString"
	}, {
		"mangle":	"xmlTextWriterWritePI",
		"c++":	"xmlTextWriterWritePI(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlTextWriterWritePI"
	}, {
		"mangle":	"xmlTextWriterWriteRaw",
		"c++":	"xmlTextWriterWriteRaw(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterWriteRaw"
	}, {
		"mangle":	"xmlTextWriterWriteRawLen",
		"c++":	"xmlTextWriterWriteRawLen(xmlTextWriterPtr, const xmlChar *, int)",
		"go":	"XmlTextWriterWriteRawLen"
	}, {
		"mangle":	"xmlTextWriterWriteString",
		"c++":	"xmlTextWriterWriteString(xmlTextWriterPtr, const xmlChar *)",
		"go":	"XmlTextWriterWriteString"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatAttribute",
		"c++":	"xmlTextWriterWriteVFormatAttribute(xmlTextWriterPtr, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatAttribute"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatAttributeNS",
		"c++":	"xmlTextWriterWriteVFormatAttributeNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatAttributeNS"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatCDATA",
		"c++":	"xmlTextWriterWriteVFormatCDATA(xmlTextWriterPtr, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatCDATA"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatComment",
		"c++":	"xmlTextWriterWriteVFormatComment(xmlTextWriterPtr, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatComment"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatDTD",
		"c++":	"xmlTextWriterWriteVFormatDTD(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatDTD"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatDTDAttlist",
		"c++":	"xmlTextWriterWriteVFormatDTDAttlist(xmlTextWriterPtr, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatDTDElement",
		"c++":	"xmlTextWriterWriteVFormatDTDElement(xmlTextWriterPtr, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatDTDElement"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatDTDInternalEntity",
		"c++":	"xmlTextWriterWriteVFormatDTDInternalEntity(xmlTextWriterPtr, int, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatDTDInternalEntity"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatElement",
		"c++":	"xmlTextWriterWriteVFormatElement(xmlTextWriterPtr, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatElement"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatElementNS",
		"c++":	"xmlTextWriterWriteVFormatElementNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatElementNS"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatPI",
		"c++":	"xmlTextWriterWriteVFormatPI(xmlTextWriterPtr, const xmlChar *, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatPI"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatRaw",
		"c++":	"xmlTextWriterWriteVFormatRaw(xmlTextWriterPtr, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatRaw"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatString",
		"c++":	"xmlTextWriterWriteVFormatString(xmlTextWriterPtr, const char *, struct __va_list_tag *)",
		"go":	"XmlTextWriterWriteVFormatString"
	}, {
		"mangle":	"xmlThrDefBufferAllocScheme",
		"c++":	"xmlThrDefBufferAllocScheme(xmlBufferAllocationScheme)",
		"go":	"XmlBufferAllocationScheme.XmlThrDefBufferAllocScheme"
	}, {
		"mangle":	"xmlThrDefDefaultBufferSize",
		"c++":	"xmlThrDefDefaultBufferSize(int)",
		"go":	"XmlThrDefDefaultBufferSize"
	}, {
		"mangle":	"xmlThrDefDeregisterNodeDefault",
		"c++":	"xmlThrDefDeregisterNodeDefault(xmlDeregisterNodeFunc)",
		"go":	"XmlThrDefDeregisterNodeDefault"
	}, {
		"mangle":	"xmlThrDefDoValidityCheckingDefaultValue",
		"c++":	"xmlThrDefDoValidityCheckingDefaultValue(int)",
		"go":	"XmlThrDefDoValidityCheckingDefaultValue"
	}, {
		"mangle":	"xmlThrDefGetWarningsDefaultValue",
		"c++":	"xmlThrDefGetWarningsDefaultValue(int)",
		"go":	"XmlThrDefGetWarningsDefaultValue"
	}, {
		"mangle":	"xmlThrDefIndentTreeOutput",
		"c++":	"xmlThrDefIndentTreeOutput(int)",
		"go":	"XmlThrDefIndentTreeOutput"
	}, {
		"mangle":	"xmlThrDefKeepBlanksDefaultValue",
		"c++":	"xmlThrDefKeepBlanksDefaultValue(int)",
		"go":	"XmlThrDefKeepBlanksDefaultValue"
	}, {
		"mangle":	"xmlThrDefLineNumbersDefaultValue",
		"c++":	"xmlThrDefLineNumbersDefaultValue(int)",
		"go":	"XmlThrDefLineNumbersDefaultValue"
	}, {
		"mangle":	"xmlThrDefLoadExtDtdDefaultValue",
		"c++":	"xmlThrDefLoadExtDtdDefaultValue(int)",
		"go":	"XmlThrDefLoadExtDtdDefaultValue"
	}, {
		"mangle":	"xmlThrDefOutputBufferCreateFilenameDefault",
		"c++":	"xmlThrDefOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc)",
		"go":	"XmlThrDefOutputBufferCreateFilenameDefault"
	}, {
		"mangle":	"xmlThrDefParserDebugEntities",
		"c++":	"xmlThrDefParserDebugEntities(int)",
		"go":	"XmlThrDefParserDebugEntities"
	}, {
		"mangle":	"xmlThrDefParserInputBufferCreateFilenameDefault",
		"c++":	"xmlThrDefParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc)",
		"go":	"XmlThrDefParserInputBufferCreateFilenameDefault"
	}, {
		"mangle":	"xmlThrDefPedanticParserDefaultValue",
		"c++":	"xmlThrDefPedanticParserDefaultValue(int)",
		"go":	"XmlThrDefPedanticParserDefaultValue"
	}, {
		"mangle":	"xmlThrDefRegisterNodeDefault",
		"c++":	"xmlThrDefRegisterNodeDefault(xmlRegisterNodeFunc)",
		"go":	"XmlThrDefRegisterNodeDefault"
	}, {
		"mangle":	"xmlThrDefSaveNoEmptyTags",
		"c++":	"xmlThrDefSaveNoEmptyTags(int)",
		"go":	"XmlThrDefSaveNoEmptyTags"
	}, {
		"mangle":	"xmlThrDefSetGenericErrorFunc",
		"c++":	"xmlThrDefSetGenericErrorFunc(void *, xmlGenericErrorFunc)",
		"go":	"XmlThrDefSetGenericErrorFunc"
	}, {
		"mangle":	"xmlThrDefSetStructuredErrorFunc",
		"c++":	"xmlThrDefSetStructuredErrorFunc(void *, xmlStructuredErrorFunc)",
		"go":	"XmlThrDefSetStructuredErrorFunc"
	}, {
		"mangle":	"xmlThrDefSubstituteEntitiesDefaultValue",
		"c++":	"xmlThrDefSubstituteEntitiesDefaultValue(int)",
		"go":	"XmlThrDefSubstituteEntitiesDefaultValue"
	}, {
		"mangle":	"xmlThrDefTreeIndentString",
		"c++":	"xmlThrDefTreeIndentString(const char *)",
		"go":	"XmlThrDefTreeIndentString"
	}, {
		"mangle":	"xmlUCSIsAegeanNumbers",
		"c++":	"xmlUCSIsAegeanNumbers(int)",
		"go":	"XmlUCSIsAegeanNumbers"
	}, {
		"mangle":	"xmlUCSIsAlphabeticPresentationForms",
		"c++":	"xmlUCSIsAlphabeticPresentationForms(int)",
		"go":	"XmlUCSIsAlphabeticPresentationForms"
	}, {
		"mangle":	"xmlUCSIsArabic",
		"c++":	"xmlUCSIsArabic(int)",
		"go":	"XmlUCSIsArabic"
	}, {
		"mangle":	"xmlUCSIsArabicPresentationFormsA",
		"c++":	"xmlUCSIsArabicPresentationFormsA(int)",
		"go":	"XmlUCSIsArabicPresentationFormsA"
	}, {
		"mangle":	"xmlUCSIsArabicPresentationFormsB",
		"c++":	"xmlUCSIsArabicPresentationFormsB(int)",
		"go":	"XmlUCSIsArabicPresentationFormsB"
	}, {
		"mangle":	"xmlUCSIsArmenian",
		"c++":	"xmlUCSIsArmenian(int)",
		"go":	"XmlUCSIsArmenian"
	}, {
		"mangle":	"xmlUCSIsArrows",
		"c++":	"xmlUCSIsArrows(int)",
		"go":	"XmlUCSIsArrows"
	}, {
		"mangle":	"xmlUCSIsBasicLatin",
		"c++":	"xmlUCSIsBasicLatin(int)",
		"go":	"XmlUCSIsBasicLatin"
	}, {
		"mangle":	"xmlUCSIsBengali",
		"c++":	"xmlUCSIsBengali(int)",
		"go":	"XmlUCSIsBengali"
	}, {
		"mangle":	"xmlUCSIsBlock",
		"c++":	"xmlUCSIsBlock(int, const char *)",
		"go":	"XmlUCSIsBlock"
	}, {
		"mangle":	"xmlUCSIsBlockElements",
		"c++":	"xmlUCSIsBlockElements(int)",
		"go":	"XmlUCSIsBlockElements"
	}, {
		"mangle":	"xmlUCSIsBopomofo",
		"c++":	"xmlUCSIsBopomofo(int)",
		"go":	"XmlUCSIsBopomofo"
	}, {
		"mangle":	"xmlUCSIsBopomofoExtended",
		"c++":	"xmlUCSIsBopomofoExtended(int)",
		"go":	"XmlUCSIsBopomofoExtended"
	}, {
		"mangle":	"xmlUCSIsBoxDrawing",
		"c++":	"xmlUCSIsBoxDrawing(int)",
		"go":	"XmlUCSIsBoxDrawing"
	}, {
		"mangle":	"xmlUCSIsBraillePatterns",
		"c++":	"xmlUCSIsBraillePatterns(int)",
		"go":	"XmlUCSIsBraillePatterns"
	}, {
		"mangle":	"xmlUCSIsBuhid",
		"c++":	"xmlUCSIsBuhid(int)",
		"go":	"XmlUCSIsBuhid"
	}, {
		"mangle":	"xmlUCSIsByzantineMusicalSymbols",
		"c++":	"xmlUCSIsByzantineMusicalSymbols(int)",
		"go":	"XmlUCSIsByzantineMusicalSymbols"
	}, {
		"mangle":	"xmlUCSIsCJKCompatibility",
		"c++":	"xmlUCSIsCJKCompatibility(int)",
		"go":	"XmlUCSIsCJKCompatibility"
	}, {
		"mangle":	"xmlUCSIsCJKCompatibilityForms",
		"c++":	"xmlUCSIsCJKCompatibilityForms(int)",
		"go":	"XmlUCSIsCJKCompatibilityForms"
	}, {
		"mangle":	"xmlUCSIsCJKCompatibilityIdeographs",
		"c++":	"xmlUCSIsCJKCompatibilityIdeographs(int)",
		"go":	"XmlUCSIsCJKCompatibilityIdeographs"
	}, {
		"mangle":	"xmlUCSIsCJKCompatibilityIdeographsSupplement",
		"c++":	"xmlUCSIsCJKCompatibilityIdeographsSupplement(int)",
		"go":	"XmlUCSIsCJKCompatibilityIdeographsSupplement"
	}, {
		"mangle":	"xmlUCSIsCJKRadicalsSupplement",
		"c++":	"xmlUCSIsCJKRadicalsSupplement(int)",
		"go":	"XmlUCSIsCJKRadicalsSupplement"
	}, {
		"mangle":	"xmlUCSIsCJKSymbolsandPunctuation",
		"c++":	"xmlUCSIsCJKSymbolsandPunctuation(int)",
		"go":	"XmlUCSIsCJKSymbolsandPunctuation"
	}, {
		"mangle":	"xmlUCSIsCJKUnifiedIdeographs",
		"c++":	"xmlUCSIsCJKUnifiedIdeographs(int)",
		"go":	"XmlUCSIsCJKUnifiedIdeographs"
	}, {
		"mangle":	"xmlUCSIsCJKUnifiedIdeographsExtensionA",
		"c++":	"xmlUCSIsCJKUnifiedIdeographsExtensionA(int)",
		"go":	"XmlUCSIsCJKUnifiedIdeographsExtensionA"
	}, {
		"mangle":	"xmlUCSIsCJKUnifiedIdeographsExtensionB",
		"c++":	"xmlUCSIsCJKUnifiedIdeographsExtensionB(int)",
		"go":	"XmlUCSIsCJKUnifiedIdeographsExtensionB"
	}, {
		"mangle":	"xmlUCSIsCat",
		"c++":	"xmlUCSIsCat(int, const char *)",
		"go":	"XmlUCSIsCat"
	}, {
		"mangle":	"xmlUCSIsCatC",
		"c++":	"xmlUCSIsCatC(int)",
		"go":	"XmlUCSIsCatC"
	}, {
		"mangle":	"xmlUCSIsCatCc",
		"c++":	"xmlUCSIsCatCc(int)",
		"go":	"XmlUCSIsCatCc"
	}, {
		"mangle":	"xmlUCSIsCatCf",
		"c++":	"xmlUCSIsCatCf(int)",
		"go":	"XmlUCSIsCatCf"
	}, {
		"mangle":	"xmlUCSIsCatCo",
		"c++":	"xmlUCSIsCatCo(int)",
		"go":	"XmlUCSIsCatCo"
	}, {
		"mangle":	"xmlUCSIsCatCs",
		"c++":	"xmlUCSIsCatCs(int)",
		"go":	"XmlUCSIsCatCs"
	}, {
		"mangle":	"xmlUCSIsCatL",
		"c++":	"xmlUCSIsCatL(int)",
		"go":	"XmlUCSIsCatL"
	}, {
		"mangle":	"xmlUCSIsCatLl",
		"c++":	"xmlUCSIsCatLl(int)",
		"go":	"XmlUCSIsCatLl"
	}, {
		"mangle":	"xmlUCSIsCatLm",
		"c++":	"xmlUCSIsCatLm(int)",
		"go":	"XmlUCSIsCatLm"
	}, {
		"mangle":	"xmlUCSIsCatLo",
		"c++":	"xmlUCSIsCatLo(int)",
		"go":	"XmlUCSIsCatLo"
	}, {
		"mangle":	"xmlUCSIsCatLt",
		"c++":	"xmlUCSIsCatLt(int)",
		"go":	"XmlUCSIsCatLt"
	}, {
		"mangle":	"xmlUCSIsCatLu",
		"c++":	"xmlUCSIsCatLu(int)",
		"go":	"XmlUCSIsCatLu"
	}, {
		"mangle":	"xmlUCSIsCatM",
		"c++":	"xmlUCSIsCatM(int)",
		"go":	"XmlUCSIsCatM"
	}, {
		"mangle":	"xmlUCSIsCatMc",
		"c++":	"xmlUCSIsCatMc(int)",
		"go":	"XmlUCSIsCatMc"
	}, {
		"mangle":	"xmlUCSIsCatMe",
		"c++":	"xmlUCSIsCatMe(int)",
		"go":	"XmlUCSIsCatMe"
	}, {
		"mangle":	"xmlUCSIsCatMn",
		"c++":	"xmlUCSIsCatMn(int)",
		"go":	"XmlUCSIsCatMn"
	}, {
		"mangle":	"xmlUCSIsCatN",
		"c++":	"xmlUCSIsCatN(int)",
		"go":	"XmlUCSIsCatN"
	}, {
		"mangle":	"xmlUCSIsCatNd",
		"c++":	"xmlUCSIsCatNd(int)",
		"go":	"XmlUCSIsCatNd"
	}, {
		"mangle":	"xmlUCSIsCatNl",
		"c++":	"xmlUCSIsCatNl(int)",
		"go":	"XmlUCSIsCatNl"
	}, {
		"mangle":	"xmlUCSIsCatNo",
		"c++":	"xmlUCSIsCatNo(int)",
		"go":	"XmlUCSIsCatNo"
	}, {
		"mangle":	"xmlUCSIsCatP",
		"c++":	"xmlUCSIsCatP(int)",
		"go":	"XmlUCSIsCatP"
	}, {
		"mangle":	"xmlUCSIsCatPc",
		"c++":	"xmlUCSIsCatPc(int)",
		"go":	"XmlUCSIsCatPc"
	}, {
		"mangle":	"xmlUCSIsCatPd",
		"c++":	"xmlUCSIsCatPd(int)",
		"go":	"XmlUCSIsCatPd"
	}, {
		"mangle":	"xmlUCSIsCatPe",
		"c++":	"xmlUCSIsCatPe(int)",
		"go":	"XmlUCSIsCatPe"
	}, {
		"mangle":	"xmlUCSIsCatPf",
		"c++":	"xmlUCSIsCatPf(int)",
		"go":	"XmlUCSIsCatPf"
	}, {
		"mangle":	"xmlUCSIsCatPi",
		"c++":	"xmlUCSIsCatPi(int)",
		"go":	"XmlUCSIsCatPi"
	}, {
		"mangle":	"xmlUCSIsCatPo",
		"c++":	"xmlUCSIsCatPo(int)",
		"go":	"XmlUCSIsCatPo"
	}, {
		"mangle":	"xmlUCSIsCatPs",
		"c++":	"xmlUCSIsCatPs(int)",
		"go":	"XmlUCSIsCatPs"
	}, {
		"mangle":	"xmlUCSIsCatS",
		"c++":	"xmlUCSIsCatS(int)",
		"go":	"XmlUCSIsCatS"
	}, {
		"mangle":	"xmlUCSIsCatSc",
		"c++":	"xmlUCSIsCatSc(int)",
		"go":	"XmlUCSIsCatSc"
	}, {
		"mangle":	"xmlUCSIsCatSk",
		"c++":	"xmlUCSIsCatSk(int)",
		"go":	"XmlUCSIsCatSk"
	}, {
		"mangle":	"xmlUCSIsCatSm",
		"c++":	"xmlUCSIsCatSm(int)",
		"go":	"XmlUCSIsCatSm"
	}, {
		"mangle":	"xmlUCSIsCatSo",
		"c++":	"xmlUCSIsCatSo(int)",
		"go":	"XmlUCSIsCatSo"
	}, {
		"mangle":	"xmlUCSIsCatZ",
		"c++":	"xmlUCSIsCatZ(int)",
		"go":	"XmlUCSIsCatZ"
	}, {
		"mangle":	"xmlUCSIsCatZl",
		"c++":	"xmlUCSIsCatZl(int)",
		"go":	"XmlUCSIsCatZl"
	}, {
		"mangle":	"xmlUCSIsCatZp",
		"c++":	"xmlUCSIsCatZp(int)",
		"go":	"XmlUCSIsCatZp"
	}, {
		"mangle":	"xmlUCSIsCatZs",
		"c++":	"xmlUCSIsCatZs(int)",
		"go":	"XmlUCSIsCatZs"
	}, {
		"mangle":	"xmlUCSIsCherokee",
		"c++":	"xmlUCSIsCherokee(int)",
		"go":	"XmlUCSIsCherokee"
	}, {
		"mangle":	"xmlUCSIsCombiningDiacriticalMarks",
		"c++":	"xmlUCSIsCombiningDiacriticalMarks(int)",
		"go":	"XmlUCSIsCombiningDiacriticalMarks"
	}, {
		"mangle":	"xmlUCSIsCombiningDiacriticalMarksforSymbols",
		"c++":	"xmlUCSIsCombiningDiacriticalMarksforSymbols(int)",
		"go":	"XmlUCSIsCombiningDiacriticalMarksforSymbols"
	}, {
		"mangle":	"xmlUCSIsCombiningHalfMarks",
		"c++":	"xmlUCSIsCombiningHalfMarks(int)",
		"go":	"XmlUCSIsCombiningHalfMarks"
	}, {
		"mangle":	"xmlUCSIsCombiningMarksforSymbols",
		"c++":	"xmlUCSIsCombiningMarksforSymbols(int)",
		"go":	"XmlUCSIsCombiningMarksforSymbols"
	}, {
		"mangle":	"xmlUCSIsControlPictures",
		"c++":	"xmlUCSIsControlPictures(int)",
		"go":	"XmlUCSIsControlPictures"
	}, {
		"mangle":	"xmlUCSIsCurrencySymbols",
		"c++":	"xmlUCSIsCurrencySymbols(int)",
		"go":	"XmlUCSIsCurrencySymbols"
	}, {
		"mangle":	"xmlUCSIsCypriotSyllabary",
		"c++":	"xmlUCSIsCypriotSyllabary(int)",
		"go":	"XmlUCSIsCypriotSyllabary"
	}, {
		"mangle":	"xmlUCSIsCyrillic",
		"c++":	"xmlUCSIsCyrillic(int)",
		"go":	"XmlUCSIsCyrillic"
	}, {
		"mangle":	"xmlUCSIsCyrillicSupplement",
		"c++":	"xmlUCSIsCyrillicSupplement(int)",
		"go":	"XmlUCSIsCyrillicSupplement"
	}, {
		"mangle":	"xmlUCSIsDeseret",
		"c++":	"xmlUCSIsDeseret(int)",
		"go":	"XmlUCSIsDeseret"
	}, {
		"mangle":	"xmlUCSIsDevanagari",
		"c++":	"xmlUCSIsDevanagari(int)",
		"go":	"XmlUCSIsDevanagari"
	}, {
		"mangle":	"xmlUCSIsDingbats",
		"c++":	"xmlUCSIsDingbats(int)",
		"go":	"XmlUCSIsDingbats"
	}, {
		"mangle":	"xmlUCSIsEnclosedAlphanumerics",
		"c++":	"xmlUCSIsEnclosedAlphanumerics(int)",
		"go":	"XmlUCSIsEnclosedAlphanumerics"
	}, {
		"mangle":	"xmlUCSIsEnclosedCJKLettersandMonths",
		"c++":	"xmlUCSIsEnclosedCJKLettersandMonths(int)",
		"go":	"XmlUCSIsEnclosedCJKLettersandMonths"
	}, {
		"mangle":	"xmlUCSIsEthiopic",
		"c++":	"xmlUCSIsEthiopic(int)",
		"go":	"XmlUCSIsEthiopic"
	}, {
		"mangle":	"xmlUCSIsGeneralPunctuation",
		"c++":	"xmlUCSIsGeneralPunctuation(int)",
		"go":	"XmlUCSIsGeneralPunctuation"
	}, {
		"mangle":	"xmlUCSIsGeometricShapes",
		"c++":	"xmlUCSIsGeometricShapes(int)",
		"go":	"XmlUCSIsGeometricShapes"
	}, {
		"mangle":	"xmlUCSIsGeorgian",
		"c++":	"xmlUCSIsGeorgian(int)",
		"go":	"XmlUCSIsGeorgian"
	}, {
		"mangle":	"xmlUCSIsGothic",
		"c++":	"xmlUCSIsGothic(int)",
		"go":	"XmlUCSIsGothic"
	}, {
		"mangle":	"xmlUCSIsGreek",
		"c++":	"xmlUCSIsGreek(int)",
		"go":	"XmlUCSIsGreek"
	}, {
		"mangle":	"xmlUCSIsGreekExtended",
		"c++":	"xmlUCSIsGreekExtended(int)",
		"go":	"XmlUCSIsGreekExtended"
	}, {
		"mangle":	"xmlUCSIsGreekandCoptic",
		"c++":	"xmlUCSIsGreekandCoptic(int)",
		"go":	"XmlUCSIsGreekandCoptic"
	}, {
		"mangle":	"xmlUCSIsGujarati",
		"c++":	"xmlUCSIsGujarati(int)",
		"go":	"XmlUCSIsGujarati"
	}, {
		"mangle":	"xmlUCSIsGurmukhi",
		"c++":	"xmlUCSIsGurmukhi(int)",
		"go":	"XmlUCSIsGurmukhi"
	}, {
		"mangle":	"xmlUCSIsHalfwidthandFullwidthForms",
		"c++":	"xmlUCSIsHalfwidthandFullwidthForms(int)",
		"go":	"XmlUCSIsHalfwidthandFullwidthForms"
	}, {
		"mangle":	"xmlUCSIsHangulCompatibilityJamo",
		"c++":	"xmlUCSIsHangulCompatibilityJamo(int)",
		"go":	"XmlUCSIsHangulCompatibilityJamo"
	}, {
		"mangle":	"xmlUCSIsHangulJamo",
		"c++":	"xmlUCSIsHangulJamo(int)",
		"go":	"XmlUCSIsHangulJamo"
	}, {
		"mangle":	"xmlUCSIsHangulSyllables",
		"c++":	"xmlUCSIsHangulSyllables(int)",
		"go":	"XmlUCSIsHangulSyllables"
	}, {
		"mangle":	"xmlUCSIsHanunoo",
		"c++":	"xmlUCSIsHanunoo(int)",
		"go":	"XmlUCSIsHanunoo"
	}, {
		"mangle":	"xmlUCSIsHebrew",
		"c++":	"xmlUCSIsHebrew(int)",
		"go":	"XmlUCSIsHebrew"
	}, {
		"mangle":	"xmlUCSIsHighPrivateUseSurrogates",
		"c++":	"xmlUCSIsHighPrivateUseSurrogates(int)",
		"go":	"XmlUCSIsHighPrivateUseSurrogates"
	}, {
		"mangle":	"xmlUCSIsHighSurrogates",
		"c++":	"xmlUCSIsHighSurrogates(int)",
		"go":	"XmlUCSIsHighSurrogates"
	}, {
		"mangle":	"xmlUCSIsHiragana",
		"c++":	"xmlUCSIsHiragana(int)",
		"go":	"XmlUCSIsHiragana"
	}, {
		"mangle":	"xmlUCSIsIPAExtensions",
		"c++":	"xmlUCSIsIPAExtensions(int)",
		"go":	"XmlUCSIsIPAExtensions"
	}, {
		"mangle":	"xmlUCSIsIdeographicDescriptionCharacters",
		"c++":	"xmlUCSIsIdeographicDescriptionCharacters(int)",
		"go":	"XmlUCSIsIdeographicDescriptionCharacters"
	}, {
		"mangle":	"xmlUCSIsKanbun",
		"c++":	"xmlUCSIsKanbun(int)",
		"go":	"XmlUCSIsKanbun"
	}, {
		"mangle":	"xmlUCSIsKangxiRadicals",
		"c++":	"xmlUCSIsKangxiRadicals(int)",
		"go":	"XmlUCSIsKangxiRadicals"
	}, {
		"mangle":	"xmlUCSIsKannada",
		"c++":	"xmlUCSIsKannada(int)",
		"go":	"XmlUCSIsKannada"
	}, {
		"mangle":	"xmlUCSIsKatakana",
		"c++":	"xmlUCSIsKatakana(int)",
		"go":	"XmlUCSIsKatakana"
	}, {
		"mangle":	"xmlUCSIsKatakanaPhoneticExtensions",
		"c++":	"xmlUCSIsKatakanaPhoneticExtensions(int)",
		"go":	"XmlUCSIsKatakanaPhoneticExtensions"
	}, {
		"mangle":	"xmlUCSIsKhmer",
		"c++":	"xmlUCSIsKhmer(int)",
		"go":	"XmlUCSIsKhmer"
	}, {
		"mangle":	"xmlUCSIsKhmerSymbols",
		"c++":	"xmlUCSIsKhmerSymbols(int)",
		"go":	"XmlUCSIsKhmerSymbols"
	}, {
		"mangle":	"xmlUCSIsLao",
		"c++":	"xmlUCSIsLao(int)",
		"go":	"XmlUCSIsLao"
	}, {
		"mangle":	"xmlUCSIsLatin1Supplement",
		"c++":	"xmlUCSIsLatin1Supplement(int)",
		"go":	"XmlUCSIsLatin1Supplement"
	}, {
		"mangle":	"xmlUCSIsLatinExtendedA",
		"c++":	"xmlUCSIsLatinExtendedA(int)",
		"go":	"XmlUCSIsLatinExtendedA"
	}, {
		"mangle":	"xmlUCSIsLatinExtendedAdditional",
		"c++":	"xmlUCSIsLatinExtendedAdditional(int)",
		"go":	"XmlUCSIsLatinExtendedAdditional"
	}, {
		"mangle":	"xmlUCSIsLatinExtendedB",
		"c++":	"xmlUCSIsLatinExtendedB(int)",
		"go":	"XmlUCSIsLatinExtendedB"
	}, {
		"mangle":	"xmlUCSIsLetterlikeSymbols",
		"c++":	"xmlUCSIsLetterlikeSymbols(int)",
		"go":	"XmlUCSIsLetterlikeSymbols"
	}, {
		"mangle":	"xmlUCSIsLimbu",
		"c++":	"xmlUCSIsLimbu(int)",
		"go":	"XmlUCSIsLimbu"
	}, {
		"mangle":	"xmlUCSIsLinearBIdeograms",
		"c++":	"xmlUCSIsLinearBIdeograms(int)",
		"go":	"XmlUCSIsLinearBIdeograms"
	}, {
		"mangle":	"xmlUCSIsLinearBSyllabary",
		"c++":	"xmlUCSIsLinearBSyllabary(int)",
		"go":	"XmlUCSIsLinearBSyllabary"
	}, {
		"mangle":	"xmlUCSIsLowSurrogates",
		"c++":	"xmlUCSIsLowSurrogates(int)",
		"go":	"XmlUCSIsLowSurrogates"
	}, {
		"mangle":	"xmlUCSIsMalayalam",
		"c++":	"xmlUCSIsMalayalam(int)",
		"go":	"XmlUCSIsMalayalam"
	}, {
		"mangle":	"xmlUCSIsMathematicalAlphanumericSymbols",
		"c++":	"xmlUCSIsMathematicalAlphanumericSymbols(int)",
		"go":	"XmlUCSIsMathematicalAlphanumericSymbols"
	}, {
		"mangle":	"xmlUCSIsMathematicalOperators",
		"c++":	"xmlUCSIsMathematicalOperators(int)",
		"go":	"XmlUCSIsMathematicalOperators"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousMathematicalSymbolsA",
		"c++":	"xmlUCSIsMiscellaneousMathematicalSymbolsA(int)",
		"go":	"XmlUCSIsMiscellaneousMathematicalSymbolsA"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousMathematicalSymbolsB",
		"c++":	"xmlUCSIsMiscellaneousMathematicalSymbolsB(int)",
		"go":	"XmlUCSIsMiscellaneousMathematicalSymbolsB"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousSymbols",
		"c++":	"xmlUCSIsMiscellaneousSymbols(int)",
		"go":	"XmlUCSIsMiscellaneousSymbols"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousSymbolsandArrows",
		"c++":	"xmlUCSIsMiscellaneousSymbolsandArrows(int)",
		"go":	"XmlUCSIsMiscellaneousSymbolsandArrows"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousTechnical",
		"c++":	"xmlUCSIsMiscellaneousTechnical(int)",
		"go":	"XmlUCSIsMiscellaneousTechnical"
	}, {
		"mangle":	"xmlUCSIsMongolian",
		"c++":	"xmlUCSIsMongolian(int)",
		"go":	"XmlUCSIsMongolian"
	}, {
		"mangle":	"xmlUCSIsMusicalSymbols",
		"c++":	"xmlUCSIsMusicalSymbols(int)",
		"go":	"XmlUCSIsMusicalSymbols"
	}, {
		"mangle":	"xmlUCSIsMyanmar",
		"c++":	"xmlUCSIsMyanmar(int)",
		"go":	"XmlUCSIsMyanmar"
	}, {
		"mangle":	"xmlUCSIsNumberForms",
		"c++":	"xmlUCSIsNumberForms(int)",
		"go":	"XmlUCSIsNumberForms"
	}, {
		"mangle":	"xmlUCSIsOgham",
		"c++":	"xmlUCSIsOgham(int)",
		"go":	"XmlUCSIsOgham"
	}, {
		"mangle":	"xmlUCSIsOldItalic",
		"c++":	"xmlUCSIsOldItalic(int)",
		"go":	"XmlUCSIsOldItalic"
	}, {
		"mangle":	"xmlUCSIsOpticalCharacterRecognition",
		"c++":	"xmlUCSIsOpticalCharacterRecognition(int)",
		"go":	"XmlUCSIsOpticalCharacterRecognition"
	}, {
		"mangle":	"xmlUCSIsOriya",
		"c++":	"xmlUCSIsOriya(int)",
		"go":	"XmlUCSIsOriya"
	}, {
		"mangle":	"xmlUCSIsOsmanya",
		"c++":	"xmlUCSIsOsmanya(int)",
		"go":	"XmlUCSIsOsmanya"
	}, {
		"mangle":	"xmlUCSIsPhoneticExtensions",
		"c++":	"xmlUCSIsPhoneticExtensions(int)",
		"go":	"XmlUCSIsPhoneticExtensions"
	}, {
		"mangle":	"xmlUCSIsPrivateUse",
		"c++":	"xmlUCSIsPrivateUse(int)",
		"go":	"XmlUCSIsPrivateUse"
	}, {
		"mangle":	"xmlUCSIsPrivateUseArea",
		"c++":	"xmlUCSIsPrivateUseArea(int)",
		"go":	"XmlUCSIsPrivateUseArea"
	}, {
		"mangle":	"xmlUCSIsRunic",
		"c++":	"xmlUCSIsRunic(int)",
		"go":	"XmlUCSIsRunic"
	}, {
		"mangle":	"xmlUCSIsShavian",
		"c++":	"xmlUCSIsShavian(int)",
		"go":	"XmlUCSIsShavian"
	}, {
		"mangle":	"xmlUCSIsSinhala",
		"c++":	"xmlUCSIsSinhala(int)",
		"go":	"XmlUCSIsSinhala"
	}, {
		"mangle":	"xmlUCSIsSmallFormVariants",
		"c++":	"xmlUCSIsSmallFormVariants(int)",
		"go":	"XmlUCSIsSmallFormVariants"
	}, {
		"mangle":	"xmlUCSIsSpacingModifierLetters",
		"c++":	"xmlUCSIsSpacingModifierLetters(int)",
		"go":	"XmlUCSIsSpacingModifierLetters"
	}, {
		"mangle":	"xmlUCSIsSpecials",
		"c++":	"xmlUCSIsSpecials(int)",
		"go":	"XmlUCSIsSpecials"
	}, {
		"mangle":	"xmlUCSIsSuperscriptsandSubscripts",
		"c++":	"xmlUCSIsSuperscriptsandSubscripts(int)",
		"go":	"XmlUCSIsSuperscriptsandSubscripts"
	}, {
		"mangle":	"xmlUCSIsSupplementalArrowsA",
		"c++":	"xmlUCSIsSupplementalArrowsA(int)",
		"go":	"XmlUCSIsSupplementalArrowsA"
	}, {
		"mangle":	"xmlUCSIsSupplementalArrowsB",
		"c++":	"xmlUCSIsSupplementalArrowsB(int)",
		"go":	"XmlUCSIsSupplementalArrowsB"
	}, {
		"mangle":	"xmlUCSIsSupplementalMathematicalOperators",
		"c++":	"xmlUCSIsSupplementalMathematicalOperators(int)",
		"go":	"XmlUCSIsSupplementalMathematicalOperators"
	}, {
		"mangle":	"xmlUCSIsSupplementaryPrivateUseAreaA",
		"c++":	"xmlUCSIsSupplementaryPrivateUseAreaA(int)",
		"go":	"XmlUCSIsSupplementaryPrivateUseAreaA"
	}, {
		"mangle":	"xmlUCSIsSupplementaryPrivateUseAreaB",
		"c++":	"xmlUCSIsSupplementaryPrivateUseAreaB(int)",
		"go":	"XmlUCSIsSupplementaryPrivateUseAreaB"
	}, {
		"mangle":	"xmlUCSIsSyriac",
		"c++":	"xmlUCSIsSyriac(int)",
		"go":	"XmlUCSIsSyriac"
	}, {
		"mangle":	"xmlUCSIsTagalog",
		"c++":	"xmlUCSIsTagalog(int)",
		"go":	"XmlUCSIsTagalog"
	}, {
		"mangle":	"xmlUCSIsTagbanwa",
		"c++":	"xmlUCSIsTagbanwa(int)",
		"go":	"XmlUCSIsTagbanwa"
	}, {
		"mangle":	"xmlUCSIsTags",
		"c++":	"xmlUCSIsTags(int)",
		"go":	"XmlUCSIsTags"
	}, {
		"mangle":	"xmlUCSIsTaiLe",
		"c++":	"xmlUCSIsTaiLe(int)",
		"go":	"XmlUCSIsTaiLe"
	}, {
		"mangle":	"xmlUCSIsTaiXuanJingSymbols",
		"c++":	"xmlUCSIsTaiXuanJingSymbols(int)",
		"go":	"XmlUCSIsTaiXuanJingSymbols"
	}, {
		"mangle":	"xmlUCSIsTamil",
		"c++":	"xmlUCSIsTamil(int)",
		"go":	"XmlUCSIsTamil"
	}, {
		"mangle":	"xmlUCSIsTelugu",
		"c++":	"xmlUCSIsTelugu(int)",
		"go":	"XmlUCSIsTelugu"
	}, {
		"mangle":	"xmlUCSIsThaana",
		"c++":	"xmlUCSIsThaana(int)",
		"go":	"XmlUCSIsThaana"
	}, {
		"mangle":	"xmlUCSIsThai",
		"c++":	"xmlUCSIsThai(int)",
		"go":	"XmlUCSIsThai"
	}, {
		"mangle":	"xmlUCSIsTibetan",
		"c++":	"xmlUCSIsTibetan(int)",
		"go":	"XmlUCSIsTibetan"
	}, {
		"mangle":	"xmlUCSIsUgaritic",
		"c++":	"xmlUCSIsUgaritic(int)",
		"go":	"XmlUCSIsUgaritic"
	}, {
		"mangle":	"xmlUCSIsUnifiedCanadianAboriginalSyllabics",
		"c++":	"xmlUCSIsUnifiedCanadianAboriginalSyllabics(int)",
		"go":	"XmlUCSIsUnifiedCanadianAboriginalSyllabics"
	}, {
		"mangle":	"xmlUCSIsVariationSelectors",
		"c++":	"xmlUCSIsVariationSelectors(int)",
		"go":	"XmlUCSIsVariationSelectors"
	}, {
		"mangle":	"xmlUCSIsVariationSelectorsSupplement",
		"c++":	"xmlUCSIsVariationSelectorsSupplement(int)",
		"go":	"XmlUCSIsVariationSelectorsSupplement"
	}, {
		"mangle":	"xmlUCSIsYiRadicals",
		"c++":	"xmlUCSIsYiRadicals(int)",
		"go":	"XmlUCSIsYiRadicals"
	}, {
		"mangle":	"xmlUCSIsYiSyllables",
		"c++":	"xmlUCSIsYiSyllables(int)",
		"go":	"XmlUCSIsYiSyllables"
	}, {
		"mangle":	"xmlUCSIsYijingHexagramSymbols",
		"c++":	"xmlUCSIsYijingHexagramSymbols(int)",
		"go":	"XmlUCSIsYijingHexagramSymbols"
	}, {
		"mangle":	"xmlURIEscape",
		"c++":	"xmlURIEscape(const xmlChar *)",
		"go":	"(*XmlChar).XmlURIEscape"
	}, {
		"mangle":	"xmlURIEscapeStr",
		"c++":	"xmlURIEscapeStr(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlURIEscapeStr"
	}, {
		"mangle":	"xmlURIUnescapeString",
		"c++":	"xmlURIUnescapeString(const char *, int, char *)",
		"go":	"XmlURIUnescapeString"
	}, {
		"mangle":	"xmlUTF8Charcmp",
		"c++":	"xmlUTF8Charcmp(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlUTF8Charcmp"
	}, {
		"mangle":	"xmlUTF8Size",
		"c++":	"xmlUTF8Size(const xmlChar *)",
		"go":	"(*XmlChar).XmlUTF8Size"
	}, {
		"mangle":	"xmlUTF8Strlen",
		"c++":	"xmlUTF8Strlen(const xmlChar *)",
		"go":	"(*XmlChar).XmlUTF8Strlen"
	}, {
		"mangle":	"xmlUTF8Strloc",
		"c++":	"xmlUTF8Strloc(const xmlChar *, const xmlChar *)",
		"go":	"(*XmlChar).XmlUTF8Strloc"
	}, {
		"mangle":	"xmlUTF8Strndup",
		"c++":	"xmlUTF8Strndup(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlUTF8Strndup"
	}, {
		"mangle":	"xmlUTF8Strpos",
		"c++":	"xmlUTF8Strpos(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlUTF8Strpos"
	}, {
		"mangle":	"xmlUTF8Strsize",
		"c++":	"xmlUTF8Strsize(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlUTF8Strsize"
	}, {
		"mangle":	"xmlUTF8Strsub",
		"c++":	"xmlUTF8Strsub(const xmlChar *, int, int)",
		"go":	"(*XmlChar).XmlUTF8Strsub"
	}, {
		"mangle":	"xmlUnlinkNode",
		"c++":	"xmlUnlinkNode(xmlNodePtr)",
		"go":	"XmlUnlinkNode"
	}, {
		"mangle":	"xmlUnlockLibrary",
		"c++":	"xmlUnlockLibrary()",
		"go":	"XmlUnlockLibrary"
	}, {
		"mangle":	"xmlUnsetNsProp",
		"c++":	"xmlUnsetNsProp(xmlNodePtr, xmlNsPtr, const xmlChar *)",
		"go":	"XmlUnsetNsProp"
	}, {
		"mangle":	"xmlUnsetProp",
		"c++":	"xmlUnsetProp(xmlNodePtr, const xmlChar *)",
		"go":	"XmlUnsetProp"
	}, {
		"mangle":	"xmlValidBuildContentModel",
		"c++":	"xmlValidBuildContentModel(xmlValidCtxtPtr, xmlElementPtr)",
		"go":	"XmlValidBuildContentModel"
	}, {
		"mangle":	"xmlValidCtxtNormalizeAttributeValue",
		"c++":	"xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlValidCtxtNormalizeAttributeValue"
	}, {
		"mangle":	"xmlValidGetPotentialChildren",
		"c++":	"xmlValidGetPotentialChildren(xmlElementContent *, const xmlChar **, int *, int)",
		"go":	"(*XmlElementContent).XmlValidGetPotentialChildren"
	}, {
		"mangle":	"xmlValidGetValidElements",
		"c++":	"xmlValidGetValidElements(xmlNode *, xmlNode *, const xmlChar **, int)",
		"go":	"(*XmlNode).XmlValidGetValidElements"
	}, {
		"mangle":	"xmlValidNormalizeAttributeValue",
		"c++":	"xmlValidNormalizeAttributeValue(xmlDocPtr, xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlValidNormalizeAttributeValue"
	}, {
		"mangle":	"xmlValidateAttributeDecl",
		"c++":	"xmlValidateAttributeDecl(xmlValidCtxtPtr, xmlDocPtr, xmlAttributePtr)",
		"go":	"XmlValidateAttributeDecl"
	}, {
		"mangle":	"xmlValidateAttributeValue",
		"c++":	"xmlValidateAttributeValue(xmlAttributeType, const xmlChar *)",
		"go":	"XmlAttributeType.XmlValidateAttributeValue"
	}, {
		"mangle":	"xmlValidateDocument",
		"c++":	"xmlValidateDocument(xmlValidCtxtPtr, xmlDocPtr)",
		"go":	"XmlValidateDocument"
	}, {
		"mangle":	"xmlValidateDocumentFinal",
		"c++":	"xmlValidateDocumentFinal(xmlValidCtxtPtr, xmlDocPtr)",
		"go":	"XmlValidateDocumentFinal"
	}, {
		"mangle":	"xmlValidateDtd",
		"c++":	"xmlValidateDtd(xmlValidCtxtPtr, xmlDocPtr, xmlDtdPtr)",
		"go":	"XmlValidateDtd"
	}, {
		"mangle":	"xmlValidateDtdFinal",
		"c++":	"xmlValidateDtdFinal(xmlValidCtxtPtr, xmlDocPtr)",
		"go":	"XmlValidateDtdFinal"
	}, {
		"mangle":	"xmlValidateElement",
		"c++":	"xmlValidateElement(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"XmlValidateElement"
	}, {
		"mangle":	"xmlValidateElementDecl",
		"c++":	"xmlValidateElementDecl(xmlValidCtxtPtr, xmlDocPtr, xmlElementPtr)",
		"go":	"XmlValidateElementDecl"
	}, {
		"mangle":	"xmlValidateNCName",
		"c++":	"xmlValidateNCName(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlValidateNCName"
	}, {
		"mangle":	"xmlValidateNMToken",
		"c++":	"xmlValidateNMToken(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlValidateNMToken"
	}, {
		"mangle":	"xmlValidateName",
		"c++":	"xmlValidateName(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlValidateName"
	}, {
		"mangle":	"xmlValidateNameValue",
		"c++":	"xmlValidateNameValue(const xmlChar *)",
		"go":	"(*XmlChar).XmlValidateNameValue"
	}, {
		"mangle":	"xmlValidateNamesValue",
		"c++":	"xmlValidateNamesValue(const xmlChar *)",
		"go":	"(*XmlChar).XmlValidateNamesValue"
	}, {
		"mangle":	"xmlValidateNmtokenValue",
		"c++":	"xmlValidateNmtokenValue(const xmlChar *)",
		"go":	"(*XmlChar).XmlValidateNmtokenValue"
	}, {
		"mangle":	"xmlValidateNmtokensValue",
		"c++":	"xmlValidateNmtokensValue(const xmlChar *)",
		"go":	"(*XmlChar).XmlValidateNmtokensValue"
	}, {
		"mangle":	"xmlValidateNotationDecl",
		"c++":	"xmlValidateNotationDecl(xmlValidCtxtPtr, xmlDocPtr, xmlNotationPtr)",
		"go":	"XmlValidateNotationDecl"
	}, {
		"mangle":	"xmlValidateNotationUse",
		"c++":	"xmlValidateNotationUse(xmlValidCtxtPtr, xmlDocPtr, const xmlChar *)",
		"go":	"XmlValidateNotationUse"
	}, {
		"mangle":	"xmlValidateOneAttribute",
		"c++":	"xmlValidateOneAttribute(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, xmlAttrPtr, const xmlChar *)",
		"go":	"XmlValidateOneAttribute"
	}, {
		"mangle":	"xmlValidateOneElement",
		"c++":	"xmlValidateOneElement(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"XmlValidateOneElement"
	}, {
		"mangle":	"xmlValidateOneNamespace",
		"c++":	"xmlValidateOneNamespace(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, const xmlChar *, xmlNsPtr, const xmlChar *)",
		"go":	"XmlValidateOneNamespace"
	}, {
		"mangle":	"xmlValidatePopElement",
		"c++":	"xmlValidatePopElement(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, const xmlChar *)",
		"go":	"XmlValidatePopElement"
	}, {
		"mangle":	"xmlValidatePushCData",
		"c++":	"xmlValidatePushCData(xmlValidCtxtPtr, const xmlChar *, int)",
		"go":	"XmlValidatePushCData"
	}, {
		"mangle":	"xmlValidatePushElement",
		"c++":	"xmlValidatePushElement(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, const xmlChar *)",
		"go":	"XmlValidatePushElement"
	}, {
		"mangle":	"xmlValidateQName",
		"c++":	"xmlValidateQName(const xmlChar *, int)",
		"go":	"(*XmlChar).XmlValidateQName"
	}, {
		"mangle":	"xmlValidateRoot",
		"c++":	"xmlValidateRoot(xmlValidCtxtPtr, xmlDocPtr)",
		"go":	"XmlValidateRoot"
	}, {
		"mangle":	"xmlXIncludeFreeContext",
		"c++":	"xmlXIncludeFreeContext(xmlXIncludeCtxtPtr)",
		"go":	"XmlXIncludeFreeContext"
	}, {
		"mangle":	"xmlXIncludeGetLastError",
		"c++":	"xmlXIncludeGetLastError(xmlXIncludeCtxtPtr)",
		"go":	"XmlXIncludeGetLastError"
	}, {
		"mangle":	"xmlXIncludeNewContext",
		"c++":	"xmlXIncludeNewContext(xmlDocPtr)",
		"go":	"XmlXIncludeNewContext"
	}, {
		"mangle":	"xmlXIncludeProcess",
		"c++":	"xmlXIncludeProcess(xmlDocPtr)",
		"go":	"XmlXIncludeProcess"
	}, {
		"mangle":	"xmlXIncludeProcessFlags",
		"c++":	"xmlXIncludeProcessFlags(xmlDocPtr, int)",
		"go":	"XmlXIncludeProcessFlags"
	}, {
		"mangle":	"xmlXIncludeProcessFlagsData",
		"c++":	"xmlXIncludeProcessFlagsData(xmlDocPtr, int, void *)",
		"go":	"XmlXIncludeProcessFlagsData"
	}, {
		"mangle":	"xmlXIncludeProcessNode",
		"c++":	"xmlXIncludeProcessNode(xmlXIncludeCtxtPtr, xmlNodePtr)",
		"go":	"XmlXIncludeProcessNode"
	}, {
		"mangle":	"xmlXIncludeProcessTree",
		"c++":	"xmlXIncludeProcessTree(xmlNodePtr)",
		"go":	"XmlXIncludeProcessTree"
	}, {
		"mangle":	"xmlXIncludeProcessTreeFlags",
		"c++":	"xmlXIncludeProcessTreeFlags(xmlNodePtr, int)",
		"go":	"XmlXIncludeProcessTreeFlags"
	}, {
		"mangle":	"xmlXIncludeProcessTreeFlagsData",
		"c++":	"xmlXIncludeProcessTreeFlagsData(xmlNodePtr, int, void *)",
		"go":	"XmlXIncludeProcessTreeFlagsData"
	}, {
		"mangle":	"xmlXIncludeSetErrorHandler",
		"c++":	"xmlXIncludeSetErrorHandler(xmlXIncludeCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlXIncludeSetErrorHandler"
	}, {
		"mangle":	"xmlXIncludeSetFlags",
		"c++":	"xmlXIncludeSetFlags(xmlXIncludeCtxtPtr, int)",
		"go":	"XmlXIncludeSetFlags"
	}, {
		"mangle":	"xmlXPathAddValues",
		"c++":	"xmlXPathAddValues(xmlXPathParserContextPtr)",
		"go":	"XmlXPathAddValues"
	}, {
		"mangle":	"xmlXPathBooleanFunction",
		"c++":	"xmlXPathBooleanFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathBooleanFunction"
	}, {
		"mangle":	"xmlXPathCastBooleanToNumber",
		"c++":	"xmlXPathCastBooleanToNumber(int)",
		"go":	"XmlXPathCastBooleanToNumber"
	}, {
		"mangle":	"xmlXPathCastBooleanToString",
		"c++":	"xmlXPathCastBooleanToString(int)",
		"go":	"XmlXPathCastBooleanToString"
	}, {
		"mangle":	"xmlXPathCastNodeSetToBoolean",
		"c++":	"xmlXPathCastNodeSetToBoolean(xmlNodeSetPtr)",
		"go":	"XmlXPathCastNodeSetToBoolean"
	}, {
		"mangle":	"xmlXPathCastNodeSetToNumber",
		"c++":	"xmlXPathCastNodeSetToNumber(xmlNodeSetPtr)",
		"go":	"XmlXPathCastNodeSetToNumber"
	}, {
		"mangle":	"xmlXPathCastNodeSetToString",
		"c++":	"xmlXPathCastNodeSetToString(xmlNodeSetPtr)",
		"go":	"XmlXPathCastNodeSetToString"
	}, {
		"mangle":	"xmlXPathCastNodeToNumber",
		"c++":	"xmlXPathCastNodeToNumber(xmlNodePtr)",
		"go":	"XmlXPathCastNodeToNumber"
	}, {
		"mangle":	"xmlXPathCastNodeToString",
		"c++":	"xmlXPathCastNodeToString(xmlNodePtr)",
		"go":	"XmlXPathCastNodeToString"
	}, {
		"mangle":	"xmlXPathCastNumberToBoolean",
		"c++":	"xmlXPathCastNumberToBoolean(double)",
		"go":	"XmlXPathCastNumberToBoolean"
	}, {
		"mangle":	"xmlXPathCastNumberToString",
		"c++":	"xmlXPathCastNumberToString(double)",
		"go":	"XmlXPathCastNumberToString"
	}, {
		"mangle":	"xmlXPathCastStringToBoolean",
		"c++":	"xmlXPathCastStringToBoolean(const xmlChar *)",
		"go":	"(*XmlChar).XmlXPathCastStringToBoolean"
	}, {
		"mangle":	"xmlXPathCastStringToNumber",
		"c++":	"xmlXPathCastStringToNumber(const xmlChar *)",
		"go":	"(*XmlChar).XmlXPathCastStringToNumber"
	}, {
		"mangle":	"xmlXPathCastToBoolean",
		"c++":	"xmlXPathCastToBoolean(xmlXPathObjectPtr)",
		"go":	"XmlXPathCastToBoolean"
	}, {
		"mangle":	"xmlXPathCastToNumber",
		"c++":	"xmlXPathCastToNumber(xmlXPathObjectPtr)",
		"go":	"XmlXPathCastToNumber"
	}, {
		"mangle":	"xmlXPathCastToString",
		"c++":	"xmlXPathCastToString(xmlXPathObjectPtr)",
		"go":	"XmlXPathCastToString"
	}, {
		"mangle":	"xmlXPathCeilingFunction",
		"c++":	"xmlXPathCeilingFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathCeilingFunction"
	}, {
		"mangle":	"xmlXPathCmpNodes",
		"c++":	"xmlXPathCmpNodes(xmlNodePtr, xmlNodePtr)",
		"go":	"XmlXPathCmpNodes"
	}, {
		"mangle":	"xmlXPathCompareValues",
		"c++":	"xmlXPathCompareValues(xmlXPathParserContextPtr, int, int)",
		"go":	"XmlXPathCompareValues"
	}, {
		"mangle":	"xmlXPathCompile",
		"c++":	"xmlXPathCompile(const xmlChar *)",
		"go":	"(*XmlChar).XmlXPathCompile"
	}, {
		"mangle":	"xmlXPathCompiledEval",
		"c++":	"xmlXPathCompiledEval(xmlXPathCompExprPtr, xmlXPathContextPtr)",
		"go":	"XmlXPathCompiledEval"
	}, {
		"mangle":	"xmlXPathCompiledEvalToBoolean",
		"c++":	"xmlXPathCompiledEvalToBoolean(xmlXPathCompExprPtr, xmlXPathContextPtr)",
		"go":	"XmlXPathCompiledEvalToBoolean"
	}, {
		"mangle":	"xmlXPathConcatFunction",
		"c++":	"xmlXPathConcatFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathConcatFunction"
	}, {
		"mangle":	"xmlXPathContainsFunction",
		"c++":	"xmlXPathContainsFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathContainsFunction"
	}, {
		"mangle":	"xmlXPathContextSetCache",
		"c++":	"xmlXPathContextSetCache(xmlXPathContextPtr, int, int, int)",
		"go":	"XmlXPathContextSetCache"
	}, {
		"mangle":	"xmlXPathConvertBoolean",
		"c++":	"xmlXPathConvertBoolean(xmlXPathObjectPtr)",
		"go":	"XmlXPathConvertBoolean"
	}, {
		"mangle":	"xmlXPathConvertNumber",
		"c++":	"xmlXPathConvertNumber(xmlXPathObjectPtr)",
		"go":	"XmlXPathConvertNumber"
	}, {
		"mangle":	"xmlXPathConvertString",
		"c++":	"xmlXPathConvertString(xmlXPathObjectPtr)",
		"go":	"XmlXPathConvertString"
	}, {
		"mangle":	"xmlXPathCountFunction",
		"c++":	"xmlXPathCountFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathCountFunction"
	}, {
		"mangle":	"xmlXPathCtxtCompile",
		"c++":	"xmlXPathCtxtCompile(xmlXPathContextPtr, const xmlChar *)",
		"go":	"XmlXPathCtxtCompile"
	}, {
		"mangle":	"xmlXPathDebugDumpCompExpr",
		"c++":	"xmlXPathDebugDumpCompExpr(FILE *, xmlXPathCompExprPtr, int)",
		"go":	"XmlXPathDebugDumpCompExpr"
	}, {
		"mangle":	"xmlXPathDebugDumpObject",
		"c++":	"xmlXPathDebugDumpObject(FILE *, xmlXPathObjectPtr, int)",
		"go":	"XmlXPathDebugDumpObject"
	}, {
		"mangle":	"xmlXPathDifference",
		"c++":	"xmlXPathDifference(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XmlXPathDifference"
	}, {
		"mangle":	"xmlXPathDistinct",
		"c++":	"xmlXPathDistinct(xmlNodeSetPtr)",
		"go":	"XmlXPathDistinct"
	}, {
		"mangle":	"xmlXPathDistinctSorted",
		"c++":	"xmlXPathDistinctSorted(xmlNodeSetPtr)",
		"go":	"XmlXPathDistinctSorted"
	}, {
		"mangle":	"xmlXPathDivValues",
		"c++":	"xmlXPathDivValues(xmlXPathParserContextPtr)",
		"go":	"XmlXPathDivValues"
	}, {
		"mangle":	"xmlXPathEqualValues",
		"c++":	"xmlXPathEqualValues(xmlXPathParserContextPtr)",
		"go":	"XmlXPathEqualValues"
	}, {
		"mangle":	"xmlXPathErr",
		"c++":	"xmlXPathErr(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathErr"
	}, {
		"mangle":	"xmlXPathEval",
		"c++":	"xmlXPathEval(const xmlChar *, xmlXPathContextPtr)",
		"go":	"(*XmlChar).XmlXPathEval"
	}, {
		"mangle":	"xmlXPathEvalExpr",
		"c++":	"xmlXPathEvalExpr(xmlXPathParserContextPtr)",
		"go":	"XmlXPathEvalExpr"
	}, {
		"mangle":	"xmlXPathEvalExpression",
		"c++":	"xmlXPathEvalExpression(const xmlChar *, xmlXPathContextPtr)",
		"go":	"(*XmlChar).XmlXPathEvalExpression"
	}, {
		"mangle":	"xmlXPathEvalPredicate",
		"c++":	"xmlXPathEvalPredicate(xmlXPathContextPtr, xmlXPathObjectPtr)",
		"go":	"XmlXPathEvalPredicate"
	}, {
		"mangle":	"xmlXPathEvaluatePredicateResult",
		"c++":	"xmlXPathEvaluatePredicateResult(xmlXPathParserContextPtr, xmlXPathObjectPtr)",
		"go":	"XmlXPathEvaluatePredicateResult"
	}, {
		"mangle":	"xmlXPathFalseFunction",
		"c++":	"xmlXPathFalseFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathFalseFunction"
	}, {
		"mangle":	"xmlXPathFloorFunction",
		"c++":	"xmlXPathFloorFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathFloorFunction"
	}, {
		"mangle":	"xmlXPathFreeCompExpr",
		"c++":	"xmlXPathFreeCompExpr(xmlXPathCompExprPtr)",
		"go":	"XmlXPathFreeCompExpr"
	}, {
		"mangle":	"xmlXPathFreeContext",
		"c++":	"xmlXPathFreeContext(xmlXPathContextPtr)",
		"go":	"XmlXPathFreeContext"
	}, {
		"mangle":	"xmlXPathFreeNodeSet",
		"c++":	"xmlXPathFreeNodeSet(xmlNodeSetPtr)",
		"go":	"XmlXPathFreeNodeSet"
	}, {
		"mangle":	"xmlXPathFreeNodeSetList",
		"c++":	"xmlXPathFreeNodeSetList(xmlXPathObjectPtr)",
		"go":	"XmlXPathFreeNodeSetList"
	}, {
		"mangle":	"xmlXPathFreeObject",
		"c++":	"xmlXPathFreeObject(xmlXPathObjectPtr)",
		"go":	"XmlXPathFreeObject"
	}, {
		"mangle":	"xmlXPathFreeParserContext",
		"c++":	"xmlXPathFreeParserContext(xmlXPathParserContextPtr)",
		"go":	"XmlXPathFreeParserContext"
	}, {
		"mangle":	"xmlXPathFunctionLookup",
		"c++":	"xmlXPathFunctionLookup(xmlXPathContextPtr, const xmlChar *)",
		"go":	"XmlXPathFunctionLookup"
	}, {
		"mangle":	"xmlXPathFunctionLookupNS",
		"c++":	"xmlXPathFunctionLookupNS(xmlXPathContextPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlXPathFunctionLookupNS"
	}, {
		"mangle":	"xmlXPathHasSameNodes",
		"c++":	"xmlXPathHasSameNodes(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XmlXPathHasSameNodes"
	}, {
		"mangle":	"xmlXPathIdFunction",
		"c++":	"xmlXPathIdFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathIdFunction"
	}, {
		"mangle":	"xmlXPathInit",
		"c++":	"xmlXPathInit()",
		"go":	"XmlXPathInit"
	}, {
		"mangle":	"xmlXPathIntersection",
		"c++":	"xmlXPathIntersection(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XmlXPathIntersection"
	}, {
		"mangle":	"xmlXPathIsInf",
		"c++":	"xmlXPathIsInf(double)",
		"go":	"XmlXPathIsInf"
	}, {
		"mangle":	"xmlXPathIsNaN",
		"c++":	"xmlXPathIsNaN(double)",
		"go":	"XmlXPathIsNaN"
	}, {
		"mangle":	"xmlXPathIsNodeType",
		"c++":	"xmlXPathIsNodeType(const xmlChar *)",
		"go":	"(*XmlChar).XmlXPathIsNodeType"
	}, {
		"mangle":	"xmlXPathLangFunction",
		"c++":	"xmlXPathLangFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathLangFunction"
	}, {
		"mangle":	"xmlXPathLastFunction",
		"c++":	"xmlXPathLastFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathLastFunction"
	}, {
		"mangle":	"xmlXPathLeading",
		"c++":	"xmlXPathLeading(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XmlXPathLeading"
	}, {
		"mangle":	"xmlXPathLeadingSorted",
		"c++":	"xmlXPathLeadingSorted(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XmlXPathLeadingSorted"
	}, {
		"mangle":	"xmlXPathLocalNameFunction",
		"c++":	"xmlXPathLocalNameFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathLocalNameFunction"
	}, {
		"mangle":	"xmlXPathModValues",
		"c++":	"xmlXPathModValues(xmlXPathParserContextPtr)",
		"go":	"XmlXPathModValues"
	}, {
		"mangle":	"xmlXPathMultValues",
		"c++":	"xmlXPathMultValues(xmlXPathParserContextPtr)",
		"go":	"XmlXPathMultValues"
	}, {
		"mangle":	"xmlXPathNamespaceURIFunction",
		"c++":	"xmlXPathNamespaceURIFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathNamespaceURIFunction"
	}, {
		"mangle":	"xmlXPathNewBoolean",
		"c++":	"xmlXPathNewBoolean(int)",
		"go":	"XmlXPathNewBoolean"
	}, {
		"mangle":	"xmlXPathNewCString",
		"c++":	"xmlXPathNewCString(const char *)",
		"go":	"XmlXPathNewCString"
	}, {
		"mangle":	"xmlXPathNewContext",
		"c++":	"xmlXPathNewContext(xmlDocPtr)",
		"go":	"XmlXPathNewContext"
	}, {
		"mangle":	"xmlXPathNewFloat",
		"c++":	"xmlXPathNewFloat(double)",
		"go":	"XmlXPathNewFloat"
	}, {
		"mangle":	"xmlXPathNewNodeSet",
		"c++":	"xmlXPathNewNodeSet(xmlNodePtr)",
		"go":	"XmlXPathNewNodeSet"
	}, {
		"mangle":	"xmlXPathNewNodeSetList",
		"c++":	"xmlXPathNewNodeSetList(xmlNodeSetPtr)",
		"go":	"XmlXPathNewNodeSetList"
	}, {
		"mangle":	"xmlXPathNewParserContext",
		"c++":	"xmlXPathNewParserContext(const xmlChar *, xmlXPathContextPtr)",
		"go":	"(*XmlChar).XmlXPathNewParserContext"
	}, {
		"mangle":	"xmlXPathNewString",
		"c++":	"xmlXPathNewString(const xmlChar *)",
		"go":	"(*XmlChar).XmlXPathNewString"
	}, {
		"mangle":	"xmlXPathNewValueTree",
		"c++":	"xmlXPathNewValueTree(xmlNodePtr)",
		"go":	"XmlXPathNewValueTree"
	}, {
		"mangle":	"xmlXPathNextAncestor",
		"c++":	"xmlXPathNextAncestor(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextAncestor"
	}, {
		"mangle":	"xmlXPathNextAncestorOrSelf",
		"c++":	"xmlXPathNextAncestorOrSelf(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextAncestorOrSelf"
	}, {
		"mangle":	"xmlXPathNextAttribute",
		"c++":	"xmlXPathNextAttribute(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextAttribute"
	}, {
		"mangle":	"xmlXPathNextChild",
		"c++":	"xmlXPathNextChild(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextChild"
	}, {
		"mangle":	"xmlXPathNextDescendant",
		"c++":	"xmlXPathNextDescendant(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextDescendant"
	}, {
		"mangle":	"xmlXPathNextDescendantOrSelf",
		"c++":	"xmlXPathNextDescendantOrSelf(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextDescendantOrSelf"
	}, {
		"mangle":	"xmlXPathNextFollowing",
		"c++":	"xmlXPathNextFollowing(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextFollowing"
	}, {
		"mangle":	"xmlXPathNextFollowingSibling",
		"c++":	"xmlXPathNextFollowingSibling(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextFollowingSibling"
	}, {
		"mangle":	"xmlXPathNextNamespace",
		"c++":	"xmlXPathNextNamespace(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextNamespace"
	}, {
		"mangle":	"xmlXPathNextParent",
		"c++":	"xmlXPathNextParent(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextParent"
	}, {
		"mangle":	"xmlXPathNextPreceding",
		"c++":	"xmlXPathNextPreceding(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextPreceding"
	}, {
		"mangle":	"xmlXPathNextPrecedingSibling",
		"c++":	"xmlXPathNextPrecedingSibling(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextPrecedingSibling"
	}, {
		"mangle":	"xmlXPathNextSelf",
		"c++":	"xmlXPathNextSelf(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XmlXPathNextSelf"
	}, {
		"mangle":	"xmlXPathNodeEval",
		"c++":	"xmlXPathNodeEval(xmlNodePtr, const xmlChar *, xmlXPathContextPtr)",
		"go":	"XmlXPathNodeEval"
	}, {
		"mangle":	"xmlXPathNodeLeading",
		"c++":	"xmlXPathNodeLeading(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XmlXPathNodeLeading"
	}, {
		"mangle":	"xmlXPathNodeLeadingSorted",
		"c++":	"xmlXPathNodeLeadingSorted(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XmlXPathNodeLeadingSorted"
	}, {
		"mangle":	"xmlXPathNodeSetAdd",
		"c++":	"xmlXPathNodeSetAdd(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XmlXPathNodeSetAdd"
	}, {
		"mangle":	"xmlXPathNodeSetAddNs",
		"c++":	"xmlXPathNodeSetAddNs(xmlNodeSetPtr, xmlNodePtr, xmlNsPtr)",
		"go":	"XmlXPathNodeSetAddNs"
	}, {
		"mangle":	"xmlXPathNodeSetAddUnique",
		"c++":	"xmlXPathNodeSetAddUnique(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XmlXPathNodeSetAddUnique"
	}, {
		"mangle":	"xmlXPathNodeSetContains",
		"c++":	"xmlXPathNodeSetContains(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XmlXPathNodeSetContains"
	}, {
		"mangle":	"xmlXPathNodeSetCreate",
		"c++":	"xmlXPathNodeSetCreate(xmlNodePtr)",
		"go":	"XmlXPathNodeSetCreate"
	}, {
		"mangle":	"xmlXPathNodeSetDel",
		"c++":	"xmlXPathNodeSetDel(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XmlXPathNodeSetDel"
	}, {
		"mangle":	"xmlXPathNodeSetFreeNs",
		"c++":	"xmlXPathNodeSetFreeNs(xmlNsPtr)",
		"go":	"XmlXPathNodeSetFreeNs"
	}, {
		"mangle":	"xmlXPathNodeSetMerge",
		"c++":	"xmlXPathNodeSetMerge(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XmlXPathNodeSetMerge"
	}, {
		"mangle":	"xmlXPathNodeSetRemove",
		"c++":	"xmlXPathNodeSetRemove(xmlNodeSetPtr, int)",
		"go":	"XmlXPathNodeSetRemove"
	}, {
		"mangle":	"xmlXPathNodeSetSort",
		"c++":	"xmlXPathNodeSetSort(xmlNodeSetPtr)",
		"go":	"XmlXPathNodeSetSort"
	}, {
		"mangle":	"xmlXPathNodeTrailing",
		"c++":	"xmlXPathNodeTrailing(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XmlXPathNodeTrailing"
	}, {
		"mangle":	"xmlXPathNodeTrailingSorted",
		"c++":	"xmlXPathNodeTrailingSorted(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XmlXPathNodeTrailingSorted"
	}, {
		"mangle":	"xmlXPathNormalizeFunction",
		"c++":	"xmlXPathNormalizeFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathNormalizeFunction"
	}, {
		"mangle":	"xmlXPathNotEqualValues",
		"c++":	"xmlXPathNotEqualValues(xmlXPathParserContextPtr)",
		"go":	"XmlXPathNotEqualValues"
	}, {
		"mangle":	"xmlXPathNotFunction",
		"c++":	"xmlXPathNotFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathNotFunction"
	}, {
		"mangle":	"xmlXPathNsLookup",
		"c++":	"xmlXPathNsLookup(xmlXPathContextPtr, const xmlChar *)",
		"go":	"XmlXPathNsLookup"
	}, {
		"mangle":	"xmlXPathNumberFunction",
		"c++":	"xmlXPathNumberFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathNumberFunction"
	}, {
		"mangle":	"xmlXPathObjectCopy",
		"c++":	"xmlXPathObjectCopy(xmlXPathObjectPtr)",
		"go":	"XmlXPathObjectCopy"
	}, {
		"mangle":	"xmlXPathOrderDocElems",
		"c++":	"xmlXPathOrderDocElems(xmlDocPtr)",
		"go":	"XmlXPathOrderDocElems"
	}, {
		"mangle":	"xmlXPathParseNCName",
		"c++":	"xmlXPathParseNCName(xmlXPathParserContextPtr)",
		"go":	"XmlXPathParseNCName"
	}, {
		"mangle":	"xmlXPathParseName",
		"c++":	"xmlXPathParseName(xmlXPathParserContextPtr)",
		"go":	"XmlXPathParseName"
	}, {
		"mangle":	"xmlXPathPopBoolean",
		"c++":	"xmlXPathPopBoolean(xmlXPathParserContextPtr)",
		"go":	"XmlXPathPopBoolean"
	}, {
		"mangle":	"xmlXPathPopExternal",
		"c++":	"xmlXPathPopExternal(xmlXPathParserContextPtr)",
		"go":	"XmlXPathPopExternal"
	}, {
		"mangle":	"xmlXPathPopNodeSet",
		"c++":	"xmlXPathPopNodeSet(xmlXPathParserContextPtr)",
		"go":	"XmlXPathPopNodeSet"
	}, {
		"mangle":	"xmlXPathPopNumber",
		"c++":	"xmlXPathPopNumber(xmlXPathParserContextPtr)",
		"go":	"XmlXPathPopNumber"
	}, {
		"mangle":	"xmlXPathPopString",
		"c++":	"xmlXPathPopString(xmlXPathParserContextPtr)",
		"go":	"XmlXPathPopString"
	}, {
		"mangle":	"xmlXPathPositionFunction",
		"c++":	"xmlXPathPositionFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathPositionFunction"
	}, {
		"mangle":	"xmlXPathRegisterAllFunctions",
		"c++":	"xmlXPathRegisterAllFunctions(xmlXPathContextPtr)",
		"go":	"XmlXPathRegisterAllFunctions"
	}, {
		"mangle":	"xmlXPathRegisterFunc",
		"c++":	"xmlXPathRegisterFunc(xmlXPathContextPtr, const xmlChar *, xmlXPathFunction)",
		"go":	"XmlXPathRegisterFunc"
	}, {
		"mangle":	"xmlXPathRegisterFuncLookup",
		"c++":	"xmlXPathRegisterFuncLookup(xmlXPathContextPtr, xmlXPathFuncLookupFunc, void *)",
		"go":	"XmlXPathRegisterFuncLookup"
	}, {
		"mangle":	"xmlXPathRegisterFuncNS",
		"c++":	"xmlXPathRegisterFuncNS(xmlXPathContextPtr, const xmlChar *, const xmlChar *, xmlXPathFunction)",
		"go":	"XmlXPathRegisterFuncNS"
	}, {
		"mangle":	"xmlXPathRegisterNs",
		"c++":	"xmlXPathRegisterNs(xmlXPathContextPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlXPathRegisterNs"
	}, {
		"mangle":	"xmlXPathRegisterVariable",
		"c++":	"xmlXPathRegisterVariable(xmlXPathContextPtr, const xmlChar *, xmlXPathObjectPtr)",
		"go":	"XmlXPathRegisterVariable"
	}, {
		"mangle":	"xmlXPathRegisterVariableLookup",
		"c++":	"xmlXPathRegisterVariableLookup(xmlXPathContextPtr, xmlXPathVariableLookupFunc, void *)",
		"go":	"XmlXPathRegisterVariableLookup"
	}, {
		"mangle":	"xmlXPathRegisterVariableNS",
		"c++":	"xmlXPathRegisterVariableNS(xmlXPathContextPtr, const xmlChar *, const xmlChar *, xmlXPathObjectPtr)",
		"go":	"XmlXPathRegisterVariableNS"
	}, {
		"mangle":	"xmlXPathRegisteredFuncsCleanup",
		"c++":	"xmlXPathRegisteredFuncsCleanup(xmlXPathContextPtr)",
		"go":	"XmlXPathRegisteredFuncsCleanup"
	}, {
		"mangle":	"xmlXPathRegisteredNsCleanup",
		"c++":	"xmlXPathRegisteredNsCleanup(xmlXPathContextPtr)",
		"go":	"XmlXPathRegisteredNsCleanup"
	}, {
		"mangle":	"xmlXPathRegisteredVariablesCleanup",
		"c++":	"xmlXPathRegisteredVariablesCleanup(xmlXPathContextPtr)",
		"go":	"XmlXPathRegisteredVariablesCleanup"
	}, {
		"mangle":	"xmlXPathRoot",
		"c++":	"xmlXPathRoot(xmlXPathParserContextPtr)",
		"go":	"XmlXPathRoot"
	}, {
		"mangle":	"xmlXPathRoundFunction",
		"c++":	"xmlXPathRoundFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathRoundFunction"
	}, {
		"mangle":	"xmlXPathSetContextNode",
		"c++":	"xmlXPathSetContextNode(xmlNodePtr, xmlXPathContextPtr)",
		"go":	"XmlXPathSetContextNode"
	}, {
		"mangle":	"xmlXPathSetErrorHandler",
		"c++":	"xmlXPathSetErrorHandler(xmlXPathContextPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XmlXPathSetErrorHandler"
	}, {
		"mangle":	"xmlXPathStartsWithFunction",
		"c++":	"xmlXPathStartsWithFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathStartsWithFunction"
	}, {
		"mangle":	"xmlXPathStringEvalNumber",
		"c++":	"xmlXPathStringEvalNumber(const xmlChar *)",
		"go":	"(*XmlChar).XmlXPathStringEvalNumber"
	}, {
		"mangle":	"xmlXPathStringFunction",
		"c++":	"xmlXPathStringFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathStringFunction"
	}, {
		"mangle":	"xmlXPathStringLengthFunction",
		"c++":	"xmlXPathStringLengthFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathStringLengthFunction"
	}, {
		"mangle":	"xmlXPathSubValues",
		"c++":	"xmlXPathSubValues(xmlXPathParserContextPtr)",
		"go":	"XmlXPathSubValues"
	}, {
		"mangle":	"xmlXPathSubstringAfterFunction",
		"c++":	"xmlXPathSubstringAfterFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathSubstringAfterFunction"
	}, {
		"mangle":	"xmlXPathSubstringBeforeFunction",
		"c++":	"xmlXPathSubstringBeforeFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathSubstringBeforeFunction"
	}, {
		"mangle":	"xmlXPathSubstringFunction",
		"c++":	"xmlXPathSubstringFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathSubstringFunction"
	}, {
		"mangle":	"xmlXPathSumFunction",
		"c++":	"xmlXPathSumFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathSumFunction"
	}, {
		"mangle":	"xmlXPathTrailing",
		"c++":	"xmlXPathTrailing(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XmlXPathTrailing"
	}, {
		"mangle":	"xmlXPathTrailingSorted",
		"c++":	"xmlXPathTrailingSorted(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XmlXPathTrailingSorted"
	}, {
		"mangle":	"xmlXPathTranslateFunction",
		"c++":	"xmlXPathTranslateFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathTranslateFunction"
	}, {
		"mangle":	"xmlXPathTrueFunction",
		"c++":	"xmlXPathTrueFunction(xmlXPathParserContextPtr, int)",
		"go":	"XmlXPathTrueFunction"
	}, {
		"mangle":	"xmlXPathValueFlipSign",
		"c++":	"xmlXPathValueFlipSign(xmlXPathParserContextPtr)",
		"go":	"XmlXPathValueFlipSign"
	}, {
		"mangle":	"xmlXPathVariableLookup",
		"c++":	"xmlXPathVariableLookup(xmlXPathContextPtr, const xmlChar *)",
		"go":	"XmlXPathVariableLookup"
	}, {
		"mangle":	"xmlXPathVariableLookupNS",
		"c++":	"xmlXPathVariableLookupNS(xmlXPathContextPtr, const xmlChar *, const xmlChar *)",
		"go":	"XmlXPathVariableLookupNS"
	}, {
		"mangle":	"xmlXPathWrapCString",
		"c++":	"xmlXPathWrapCString(char *)",
		"go":	"XmlXPathWrapCString"
	}, {
		"mangle":	"xmlXPathWrapExternal",
		"c++":	"xmlXPathWrapExternal(void *)",
		"go":	"XmlXPathWrapExternal"
	}, {
		"mangle":	"xmlXPathWrapNodeSet",
		"c++":	"xmlXPathWrapNodeSet(xmlNodeSetPtr)",
		"go":	"XmlXPathWrapNodeSet"
	}, {
		"mangle":	"xmlXPathWrapString",
		"c++":	"xmlXPathWrapString(xmlChar *)",
		"go":	"(*XmlChar).XmlXPathWrapString"
	}, {
		"mangle":	"xmlXPatherror",
		"c++":	"xmlXPatherror(xmlXPathParserContextPtr, const char *, int, int)",
		"go":	"XmlXPatherror"
	}, {
		"mangle":	"xmlXPtrEval",
		"c++":	"xmlXPtrEval(const xmlChar *, xmlXPathContextPtr)",
		"go":	"(*XmlChar).XmlXPtrEval"
	}, {
		"mangle":	"xmlXPtrNewContext",
		"c++":	"xmlXPtrNewContext(xmlDocPtr, xmlNodePtr, xmlNodePtr)",
		"go":	"XmlXPtrNewContext"
	}]